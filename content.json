[{"title":"PCA","date":"2020-04-16T07:33:00.000Z","path":"2020/04/16/Note/Math/PCA/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"math","slug":"math","permalink":"https://qrsforever.github.io/tags/math/"}]},{"title":"Scatter,Covariance,Correlation Matrix","date":"2020-04-16T03:36:00.000Z","path":"2020/04/16/Note/Math/scatter_covariance_correlation_matrix/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"KL散度和JS散度","date":"2020-04-15T11:55:00.000Z","path":"2020/04/15/Note/Math/KLD_JSD/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"(Draft)RL-rlpyt","date":"2020-03-23T12:01:00.000Z","path":"2020/03/23/ML/rl/rlpyt/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 0.1 RL源码分析 0.1.1 Runner 0.1.2 Affinity 0.1.3 Algo 0.1.4 Sampler +---------------------------+ | BaseSampler | |---------------------------| | | ◁ --------------+ +-----------------------------------------▷ | v initialize | | | | v obtain_samples | | | | v evaluate_agent | | | +---------------------------+ | | △ | | | | | | | | | | | +------------------------+ | | +-------------------------------------▷ | ParallelSamplerBase | | | | | (worker process) | | | | +----------------▷ |------------------------| | | | | | | | | | | +------------------------+ | | | | △ △ | | | | | | | | | | | | | | | | | | | | | +----------------------+ +----------------+ | | | | | AsyncGpuSamplerBase | | GpuSamplerBase | | | | | |----------------------| |----------------| | | | | | | | | | | | | +----------------------+ +----------------+ | | | | | △ △ | | | | | | | | | | | | | | | | | | | | | | | AsyncSerialSampler AsyncCpuSampler | AsyncGpuSampler GpuSampler CpuSampler SerialSampler | | | | | | | | | | | | | | | | | ▽ ▽ ▽ | +----------------------------+ +-----------------------------+ | | AsyncParallelSamplerMixin | | AsyncActionServer | | |----------------------------| |-----------------------------| | | | | | | |----------------------------| | serve_actions_evaluation | | | obtain_samples | +-----------------------------+ | | | | | +----------------------------+ | | | | | | | | | ▽ ▽ ▽ +--------------+ +--------------------------+ | ActionServer | | AsyncSamplerMixin | | | |--------------------------| +--------------+ | | |--------------------------| | async_initialize | +--------------------------+ 作用: 收集训练数据 (采样数据) 收集训练数据,就需要在environment中步进,因此environment的实例化工作也在sampler中完成, 另外真正收集训练数据 的工作由Collector类完成, Sampler对Collector做了一层包装. 0.1.4.1 BatchSpec里的 T 和 B 的概念: B: 构造B个environment对象, 独立的trajectory分段(environment实例的数量) T: 时间步, 指agent与一个environment交互时,会按时间先后顺序不断地步进到下一个state,走一步即一个step.此值&gt;=1. 0.1.4.2 env_ranks的概念 对不同的environment实例,对它们用ε-greedy来选择action的时候,ε可能是不同的.由于rlpyt在不同的并行模式下, 会形成不同的\"虚拟environment数量\"的概念, 因此在各种场景下都要确定一个对应到实际场景下的 虚拟的environment 数量,这就是env_ranks的含义. 0.1.5 Agent 1 Referencs: codelast: rlpyt introduction: rlpyt github","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"RL","slug":"RL","permalink":"https://qrsforever.github.io/tags/RL/"}]},{"title":"LSTM","date":"2020-03-23T11:48:00.000Z","path":"2020/03/23/ML/Guide/RNN/LSTM/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} TODO","tags":[{"name":"RNN","slug":"RNN","permalink":"https://qrsforever.github.io/tags/RNN/"},{"name":"Models","slug":"Models","permalink":"https://qrsforever.github.io/tags/Models/"}]},{"title":"GRU","date":"2020-03-23T11:47:00.000Z","path":"2020/03/23/ML/Guide/RNN/GRU/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} TODO","tags":[{"name":"RNN","slug":"RNN","permalink":"https://qrsforever.github.io/tags/RNN/"},{"name":"Models","slug":"Models","permalink":"https://qrsforever.github.io/tags/Models/"}]},{"title":"Torch内存","date":"2020-03-03T08:07:00.000Z","path":"2020/03/03/ML/Guide/memory_used/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 References Deep Learning Memory Usage and Pytorch Optimization Tricks","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"Opera mp4 play","date":"2020-02-19T09:36:00.000Z","path":"2020/02/19/Story/System/opera_mp4/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} ubuntu19.10 sudo snap install chromium-ffmpeg cp /snap/chromium-ffmpeg/15/chromium-ffmpeg-95241 /usr/lib/x86_64-linux-gnu/opera","tags":[{"name":"System","slug":"System","permalink":"https://qrsforever.github.io/tags/System/"}]},{"title":"(Draft)Tensor-scatter gather","date":"2020-01-30T12:15:00.000Z","path":"2020/01/30/ML/Pytorch/tensor_scatter_gather/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"(Draft)Tensor-index slice","date":"2020-01-29T12:14:00.000Z","path":"2020/01/29/ML/Pytorch/tensor_index_slice/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"PyTorch","slug":"PyTorch","permalink":"https://qrsforever.github.io/tags/PyTorch/"}]},{"title":"(Draft)Tensor-dims","date":"2020-01-25T04:12:00.000Z","path":"2020/01/25/ML/Pytorch/tensor_dims_convert/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"PyTorch","slug":"PyTorch","permalink":"https://qrsforever.github.io/tags/PyTorch/"}]},{"title":"(Draft)Tensor基础-autograd hooks","date":"2020-01-23T11:11:00.000Z","path":"2020/01/23/ML/Pytorch/tensor_autograd_hooks/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"(Draft)Tensor-api","date":"2020-01-23T10:08:00.000Z","path":"2020/01/23/ML/Pytorch/tensor_api/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"RNN","date":"2019-12-25T05:33:00.000Z","path":"2019/12/25/ML/Guide/RNN/RNN/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} TODO 1 References https://blog.floydhub.com/a-beginners-guide-on-recurrent-neural-networks-with-pytorch/","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"},{"name":"RNN","slug":"RNN","permalink":"https://qrsforever.github.io/tags/RNN/"}]},{"title":"Notebook 技巧","date":"2019-12-19T08:10:00.000Z","path":"2019/12/19/Note/Jupyter/magic/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Jupyter","slug":"Jupyter","permalink":"https://qrsforever.github.io/tags/Jupyter/"}]},{"title":"Pywdigets Demo","date":"2019-12-16T08:47:00.000Z","path":"2019/12/16/Note/Jupyter/pywidgets_demo/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"https://qrsforever.github.io/tags/Jupyter/"}]},{"title":"浏览器vim插件","date":"2019-12-13T09:53:00.000Z","path":"2019/12/13/Tools/How/browser_vim/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} browser firfox chrome keymap 1 browser 1.1 firfox Vim Vixen 1.2 chrome cVim 2 keymap key descr j,k scroll up, down / search gi go to first input box gg,G page top/bottom zi,zo zoom page in/out H, L page history back/forword m&lt;*&gt;, ;&lt;*&gt;, '&lt;*&gt; mark: m&lt;*&gt; firfox used, ;&lt;*&gt; chrome used o open gp toggle pin/unpin C-l go to url box","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"使用Notebook学习HTML","date":"2019-12-13T07:24:00.000Z","path":"2019/12/13/Note/Jupyter/widgets_html/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"https://qrsforever.github.io/tags/Jupyter/"}]},{"title":"shadowsocks配置","date":"2019-12-13T04:05:00.000Z","path":"2019/12/13/Story/System/shadowsocks/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 0.1 支持chacha20加密 sudo apt install libsodium -y 0.2 安装shadowsocks客户端 sudo pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip --isolated -v -U or sudo pip3 install shadowsocks 注意, slocal,ssserver 两个命令的安装路径(~/.local/bin by pip.conf configure), 记得设置PATH 或者pip install指定--isolated 0.3 配置 { &quot;server&quot;:&quot;x.x.x.x&quot;, # ss 服务器 地址 &quot;server_port&quot;:14131, # ss 服务器端口 &quot;local_address&quot;: &quot;127.0.0.1&quot;, # 本地ip &quot;local_port&quot;:1080, # 本地端口 &quot;password&quot;:&quot;password&quot;, # 连接 ss 密码 &quot;timeout&quot;:300, # 等待超时 &quot;method&quot;:&quot;aes-256-cfb&quot;, # 加密方式 &quot;fast_open&quot;: false, # fast_open：true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+。 &quot;workers&quot;: 1 # 工作线程数 } 0.4 启动服务 vim /etc/systemd/system/shadowsocks.service [Unit] Description=Shadowsocks [Service] TimeoutStartSec=0 ExecStart=/usr/local/bin/sslocal -c /etc/shadowsocks/shadowsocks.json [Install] WantedBy=multi-user.target systemctl sudo systemctl enable shadowsocks.service sudo systemctl start shadowsocks.service sudo systemctl status shadowsocks.service 0.5 结果 ● shadowsocks.service - Shadowsocks Loaded: loaded (/etc/systemd/system/shadowsocks.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2019-12-13 12:51:03 CST; 4s ago Main PID: 12018 (sslocal) Tasks: 1 (limit: 4915) CGroup: /system.slice/shadowsocks.service └─12018 /usr/bin/python3 /usr/local/bin/sslocal -c /etc/shadowsocks/shadowsocks.json Dec 13 12:51:03 omega systemd[1]: Started Shadowsocks. Dec 13 12:51:03 omega sslocal[12018]: INFO: loading config from /etc/shadowsocks/shadowsocks.json Dec 13 12:51:03 omega sslocal[12018]: 2019-12-13 12:51:03 INFO loading libsodium from libsodium.so.23 Dec 13 12:51:03 omega sslocal[12018]: 2019-12-13 12:51:03 INFO starting local at 127.0.0.1:1080 0.6 SS中继 sudo apt install privoxy forward-socks5 / 127.0.0.1:1080 . listen-address 0.0.0.0:8118 # local network do not use proxy forward 192.168.*.*/ . forward 10.*.*.*/ . forward 127.*.*.*/ . **** sudo /etc/init.d/privoxy restart 0.7 参考 https://dylanyang.top/post/2019/05/15/centos7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEshadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF/ http://woshishagua.com/?p=89","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"},{"name":"System","slug":"System","permalink":"https://qrsforever.github.io/tags/System/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://qrsforever.github.io/tags/Ubuntu/"}]},{"title":"(draft)NLP应用里程碑","date":"2019-11-26T03:10:39.000Z","path":"2019/11/26/ML/Guide/neural_nlp_milestones/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Co-Reference Resolution: 共指消解 Sentiment Analysis: 语义分析 Named Entity Recognition (aka NER): 命名实体 Machine Comprehension (aka MC): 机器理解 Textual Entailment (aka TE): 文本蕴涵 Semantic Role Labeling (aka SRL): 语义角色标注 References 1 Co-Reference Resolution: 共指消解 finding all expressions that refer to the same entity in a text. 2 Sentiment Analysis: 语义分析 detect the sentiment of a given text(positive and negative sentiment). 3 Named Entity Recognition (aka NER): 命名实体 extract entities such as people, locations, organizations, and miscellaneous from text. 4 Machine Comprehension (aka MC): 机器理解 answers natural language questions by selecting an answer span within an evidence text. 5 Textual Entailment (aka TE): 文本蕴涵 takes a pair of sentences and predicts whether the facts in the first necessarily imply the facts in the second one. 判断兩个句子能否互相推论 6 Semantic Role Labeling (aka SRL): 语义角色标注 7 References Beyond Word Embeddings Part 1","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"NLP","slug":"NLP","permalink":"https://qrsforever.github.io/tags/NLP/"}]},{"title":"(draft)词向量发展过程","date":"2019-11-26T02:55:04.000Z","path":"2019/11/26/ML/Guide/word_embeddings/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 Draft Text representation: 如何让计算机明白单词的含义(understand the concepts of words)? word vectors: words or phrases from a given language vocabulary are mapped to vectors of real numbers. 2 Traditional vector representation Bag of Words (aka BoW) don’t encode any information with regards to the meaning of a given word. 共现矩阵 SVD（奇异值分解） 3 Neural Embeddings 3.1 Word2Vec Continuous bag-of-words (CBOW) Continuous skip-gram GloVe FastText 4 References 从Word Embedding到Bert模型—自然语言处理中的预训练技术发展史 Word Embeddings: An Introduction to the NLP Landscape 词向量发展史-共现矩阵-SVD-NNLM-Word2Vec-Glove-ELMo Word Vectors and NLP Modeling from BoW to BERT","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"NLP","slug":"NLP","permalink":"https://qrsforever.github.io/tags/NLP/"}]},{"title":"(draft)评估模型的指标","date":"2019-11-25T06:29:44.000Z","path":"2019/11/25/ML/Guide/metric_terms/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 Example A school is running a machine learning primary diabetes scan on all of its students. The output is either diabetic (+ve) or healthy (-ve). True positive (TP): Prediction is +ve and X is diabetic, we want that True negative (TN): Prediction is -ve and X is healthy, we want that too False positive (FP): Prediction is +ve and X is healthy, false alarm, bad False negative (FN): Prediction is -ve and X is diabetic, the worst If it starts with True then the prediction was correct If it starts with False then the prediction was incorrect Positive or negative indicates the output of our program. While true or false judges this output whether correct or incorrect. --------------------------+--------------------------------+-------- | Predicted (预测) | |--------------------------------| | | | | Positive | Negative | | | | --------------------------+--------------------------------| | | | | | Positive | TP | FN | | | | 去真 | | | 真正例 | 假负例 | Observed |-------------|---------------+----------------| | | | | (实际) | | FP | TN | | Negative | 存伪 | | | | 假正例 | 真负例 | --------------------------+--------------------------------+-------- TP + FP: 程序输出为Positive(+ve, labeled as diabetic) TP + FN: 2 Term harmonic mean: 调和平均数, 倒数平均数 Accuracy: 准确度 It's the ratio of the correctly labeled subjects to the whole pool of subjects. Accuracy is the most intuitive one. Accuracy answers the following question: How many students did we correctly label out of all the students? Accuracy = (TP+TN)/(TP+FP+FN+TN) 瞧不出病的大夫,是个负责任的好大夫吗?当然不是!这也就是在分类问题上,为什么要引入F1 Score的原因. 患癌症的人毕竟是少数, 一个不会看病的大夫只要把人都判为健康, 准确度也是很高的, 其实他是个骗子 Precision: 精确度, 查准率 (预测) Precision is the ratio of the correctly +ve labeled by our program to all +ve labeled. Precision answers the following: How many of those who we labeled as diabetic are actually diabetic? Precision = TP/(TP+FP) 预测为正的样本中实际正样本的比例 (在所有被预测为正类的样本中真实结果也为正类的占比) *********** *********** A: 正确判为癌症(模型诊断筛选出患病的病人) **** **** *** B: 误判为癌症 ** ** ** ** A + C: 癌症患者(所有真实癌症病人) * * * * A + B: 被判为癌症 * * * * Precision = A / (A + B), 表明 判定&#39;患病&#39;的准确度 * C * A * B * Recall = A / (A + C) * * * * * * * * ** ** ** ** **** **** *** *********** *********** 实际为正的样本 预测为正的样本 Sensitivity(aka Recall): 灵敏度, 查全率, 召回率 (真实+预测) 医学: 病人中得出阳性检测的样本占病人总数的百分比;不漏诊(漏诊即应该为阳性被诊断为阴性)的概率. Recall is the ratio of the correctly +ve labeled by our program to all who are diabetic in reality. Recall answers the following question: Of all the people who are diabetic, how many of those we correctly predict? Recall = TP/(TP+FN) 实际正样本中预测为正的比例 (在所有真实结果为正类的样本中预测结果也为正类的占比) 一个例子: &gt; 若希望将好瓜尽可能多地选出来,则可通过增加选瓜的数量来实现,如果将所有西瓜都选上,那么所有的好瓜也必然 &gt; 都被选上了(查全率高),但这样查准率就会较低;若希望选出的瓜中好瓜比例尽可能高,则可只挑选最有把握的瓜 &gt; ,但这样就难免会漏掉不少好瓜,使得查全率较低. Specificity: 特异性 医学: 健康人中得出阴性检测的样本占健康人总数的百分比;不误诊(误诊为应该为阴性但是被诊断为阳性)的概率. Specificity is the correctly -ve labeled by the program to all who are healthy in reality. Specifity answers the following question: Of all the people who are healthy, how many of those did we correctly predict? Specificity = TN/(TN+FP) F1-score (aka F-Score / F-Measure) F1 Score considers both precision and recall. It is the harmonic mean(average) of the precision and recall. F1 Score is best if there is some sort of balance between precision (p) &amp; recall (r) in the system. F1 Score = 2(Recall Precision) / (Recall + Precision) 精确率和召回率调和平均数 AUC 二分类模型的评价 Area under Curve(曲线下的面积) Q1: 为什么不直接通过计算准确率来对模型进行评价呢? 机器学习中的很多模型对于分类问题的预测结果大多是概率,即属于某个类别的概率,如果计算准确率的话,就要把概 率转化为类别,这就需要设定一个阈值,概率大于某个阈值的属于一类,概率小于某个阈值的属于另一类,而阈值的设定 直接影响了准确率的计算. 3 References Accuracy, Recall, Precision, F-Score &amp; Specificity, which to optimize on? Basic evaluation measures from the confusion matrix 翻墙: mAP (mean Average Precision) for Object Detection 为什么需要F1 Score,而不是Accuracy? F1-micro 与 F1-macro区别和计算原理 模型评估-性能度量(分类问题)","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)计算机视觉论文","date":"2019-11-25T03:40:04.000Z","path":"2019/11/25/ML/Guide/cv_papers/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Image Classification VGG: Visual Geometry Group 资源 Semantic Segmentation Object Detection: 目标检测算法 YOLO: Real-Time Object Detection 资源 SSD: Single Shot MultiBox Detector 资源 Pose Estimation Instance Segmentation 0.1 Image Classification 0.1.1 VGG: Visual Geometry Group VGG是Oxford的Visual Geometry Group的组提出的 0.1.2 资源 A. 中文 B. 英文 arxiv: Very Deep Convolutional Networks for Large-Scale Image Recognition 通天塔: Very Deep Convolutional Networks for Large-Scale Image Recognition 0.2 Semantic Segmentation 0.3 Object Detection: 目标检测算法 0.3.1 YOLO: Real-Time Object Detection You only look once (YOLO) 0.3.1.1 资源 A. 中文 YOLOv2-darknet 内容解析 B. 英文 arxiv:You Only Look Once:Unified, Real-Time Object Detection 通天塔:You Only Look Once:Unified, Real-Time Object Detection 0.3.2 SSD: Single Shot MultiBox Detector 使用单个深层神经网络检测图像中对象的方法 单次检测器 SSD方法基于前馈卷积网络，其产生固定大小的边界框集合和框中对象类别的分数，接着是非最大化抑制步骤以产生最终检测。 Region Proposal:候选区域 0.3.2.1 资源 A. 中文 翻译SSD论文 B. 英文 arxiv:SSD: Single Shot MultiBox Detector 通天塔:SSD: Single Shot MultiBox Detector 0.4 Pose Estimation 0.5 Instance Segmentation","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"亚马逊的默认服务器限速","date":"2019-11-06T07:38:14.000Z","path":"2019/11/06/Tools/How/s3.amazonaws.com/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 MXNET 亚马孙机器学习框架 MXNET_GLUON_REPO=https://apache-mxnet.s3.cn-north-1.amazonaws.com.cn/ MXNET_GLUON_REPO=https://apache-mxnet.s3.cn-north-1.amazonaws.com.cn/ jupyter notebook","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"(draft)AllenNLP框架","date":"2019-10-23T05:56:37.000Z","path":"2019/10/23/ML/Pytorch/allennlp/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Draft AllenNLP是一个相对成熟的基于深度学习的NLP工具包,它 构建于 PyTorch 之上,它的设计遵循以下原则: (1)超模块化和轻量化.你可以使用自己喜欢的组件与 PyTorch 无缝连接. (2)经过广泛测试,易于扩展.测试覆盖率超过 90%,示例模型为你提供了很好的模板. (3)真正的填充和覆盖,让你可以毫无痛苦地轻松实现正确的模型. (4)易于实验.可以通过符合 json 规范的全面记录重现实验过程. 包含的几个大类如下: Machine Comprehension:机器阅读 Semantic Role Labeling:语义标注 Coreference Resolution:指代消解 Textual Entailment:文本蕴涵 Named Entity Recognition:命名实体识别 Constituency Parsing:成分句法分析 语言推理任务 问答和常识推理任务 语义相似度和分类任务 Sentiment Analysis 情感分析 Word Representations 词表示 传统的词向量（例如word2vec）是上下文无关的 CEO of apple eat an apple 举个例子：针对某一词多义的词汇 w=\"苹果\" 文本序列1=“我 买了 六斤 苹果。” 文本序列2=“我 买了一个 苹果 7。” 上面两个文本序列中都出现了“苹果”这个词汇，但是在不同的句子中，它们的含义显示是不同的，一个属于水果领域，一个属于电子产品呢领域，如果针对“苹果”这个词汇同时训练两个词向量来分别刻画不同领域的信息呢？答案就是使用ELMo。 在EMLo中，他们使用的是一个双向的LSTM语言模型，由一个前向和一个后向语言模型构成，目标函数就是取这两个方向语言模型的最大似然。 Open AI GPT : Generative Pre-Training BERT: Biderectional Encoder Representations from Transformers 深度学习中Embedding层 推荐阅读 词向量，英文名叫Word Embedding，按照字面意思，应该是词嵌入。 词向量跟Word2Vec(google 先入为主, 把word to vector)不能在等同了, 后来有词ID映射为向量等 有什么用 嵌入层embedding在这里做的就是把单词“deep”用向量[.32, .02, .48, .21, .56, .15]来表达。然而并不是每一个单词 都会被一个向量来代替，而是被替换为用于查找嵌入矩阵中向量的索引。 https://blog.csdn.net/jiangpeng59/article/details/77533309 Input层与embedding层 embedding，比如word2vec啊，glove啊，fasttext啊。它们都是经过不同的语料以及不同的训练方法训练而成的 Blog List 单词嵌入是使用密集的矢量表示来表示单词和文档的一类方法 定义一个词汇表为200的嵌入层（例如从0到199的整数编码的字，包括0到199），一个32维的向量空间，其中将嵌入单词 ，以及输入文档，每个单词有50个单词。 Embedding(input_dim=200, output_dim=32, input_length=50) 独热编码one-hot Glove词向量 Global Vectors for Word Representation https://nlp.stanford.edu/projects/glove/ 词性标注器: A Part-Of-Speech Tagger (POS Tagger) is a piece of software that reads text in some language and assigns parts of speech to each word (and other token), such as noun, verb, adjective, etc. Part-of-Speech 标记 含义 POS词性标注 NER实体识别 Spacy功能简介 可以用于进行分词,命名实体识别,词性识别等等 图解BiDAF中的单词嵌入、字符嵌入和上下文嵌入 https://www.jiqizhixin.com/articles/2019-10-09 https://www.jianshu.com/p/3af100e52568 整个机器理解模型是一个层次化多阶段的过程， 包括以下六个层次： 字符嵌入层（Character embedding layer） 其主要作用是将词映射到一个固定大小的向量， 这里我们使用字符水平的卷积神经网络（Character level CNN）， 该网络由Kim在2014年提出， 我们后续会对部分细节进行补充。 词嵌入层（Word embedding layer） 这里是使用预先训练的词嵌入模型， 将每一个词映射到固定大小的向量。 上下文嵌入层（Contextual embedding layer） 主要作用是给每一个词加一个上下文的线索（cue）， 前三层都是对问题和上下文进行应用 注意流层（Attention flow layer） 这里是组合问题和上下文的向量， 生成一个问题-察觉的特征向量集合。 模型层（Modeling layer） 本文是使用循环神经网络（RNN）来对上下文进行扫描 输出层（Output layer） 该层提供对问题的回答 词向量: 传统方式(共现矩阵) 和 语言模型 https://blog.csdn.net/ibelieve8013/article/details/88323271 数据集 词向量发展史 NLP 领域最优秀的 8 个预训练模型 NLP 领域最优秀的 8 个预训练模型 迁移学习本质上是在一个数据集上训练模型，然后对该模型进行调整，以在不同的数据集上执行不同的自然语言处理功能 。 自然语言处理应用能够快速增长，很大程度上要归功于通过预训练模型实现迁移学习的概念。在自然语言处理的背景下， 迁移学习本质上是在一个数据集上训练模型，然后对该模型进行调整，以在不同的数据集上执行不同的自然语言处理功能 。 这一突破，使得每个人都能够轻松地完成任务，尤其是那些没有时间、也没有资源从头开始构建自然语言处理模型的人们 。对于想要学习或过渡到自然语言处理的初学者来讲，它也堪称完美。 为什么要使用预训练模型？作者已尽其所能设计了基准模型。我们可以在自己的自然语言处理数据集上使用预训练模型， 而不是从头构建模型来解决类似的自然语言处理问题。 尽管仍然需要进行一些微调，但它已经为我们节省了大量的时间和计算资源。 Tokenizer是把你的文本转换成单词 TokenIndexer是给这些形式编个号, 把最终的文本转换成序号表示的形式 TokenIndexer可以自动的为你生成单词编号，字母编号，pos_tags的编号。 token_embedders用于将index后的词转为tensor。常用的是Embedding类（可以读取预训练词向量）和TokenCharactersEncoder类。 对于TextField，需要用TextFieldEmbedder，更具体地，BasicTextFieldEmbedder。 BasicTextFieldEmbedder用来管理多个token_embedder，这样单词可以有多种嵌入方式，嵌入之后进行拼接。 分词，帮你用spacy，NLTK，或者简单的按空格分词处理。 数据集的读取，它内置了很多数据集的读取，你可以在通过学习它的读取方式，在它的基础上对自己需要的数据集进行读取。 转化词向量过程: Glove，ELMo，BERT等常用的都可以直接使用，需要word，char粒度的都可以。 https://www.cnblogs.com/huangyc/p/9861453.html 语言模型分为统计语言模型和神经网络语言模型 Seq2Seq 序列问题和其他的机器学习问题最显著的一个区别就是序列中的值相互之间是有一个顺序的 seq2seq学习的核心是使用循环神经网络将可变长度的输入序列映射到可变长度的输出序列 0.1 params sorting_keys顾名思义是定义了我们所有instance的排序方式，排序可以提高效率（花在padding token上面的计算减少) 0.2 References https://github.com/allenai/allennlp https://mlexplained.com/2019/01/30/an-in-depth-tutorial-to-allennlp-from-basics-to-elmo-and-bert/ http://mlexplained.com/2017/12/29/attention-is-all-you-need-explained/ http://mlexplained.com/2019/01/07/paper-dissected-bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding-explained/ http://mlexplained.com/2018/06/15/paper-dissected-deep-contextualized-word-representations-explained/ realworldnlpbook https://www.cnblogs.com/robert-dlut/p/9824346.html https://blog.csdn.net/m0_38133212/article/category/8640328/ allennlp使用教程-简单","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"彻底删除Ubuntu snap","date":"2019-10-10T14:20:06.000Z","path":"2019/10/10/Story/System/remove_snap/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 1 步骤 从PATH中删除当前路径\".\", 否则删除snapd出错 export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 查看已经snap安装的软件, 并卸载 snap list; sudo snap remove xxx 删除cache, 否则删除snapd可能会出错 sudo rm -rf /var/cache/snapd 删除snapd sudo apt purge snapd 删除安装包 rm -rf ~/snap","tags":[{"name":"System","slug":"System","permalink":"https://qrsforever.github.io/tags/System/"}]},{"title":"pytorch:autograd","date":"2019-10-08T14:11:47.000Z","path":"2019/10/08/ML/Pytorch/autograd/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"Tricks:matplotlib绘图技巧","date":"2019-09-26T03:00:20.000Z","path":"2019/09/26/Note/Jupyter/plt_tricks/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 1 Jupyter","tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"https://qrsforever.github.io/tags/Jupyter/"},{"name":"Tricks","slug":"Tricks","permalink":"https://qrsforever.github.io/tags/Tricks/"}]},{"title":"Tricks:matplotlib全局配置","date":"2019-09-26T02:34:20.000Z","path":"2019/09/26/Note/Jupyter/plt_global_config/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 1 Jupyter","tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"https://qrsforever.github.io/tags/Jupyter/"},{"name":"Tricks","slug":"Tricks","permalink":"https://qrsforever.github.io/tags/Tricks/"}]},{"title":"雅克比矩阵","date":"2019-09-26T02:18:34.000Z","path":"2019/09/26/Note/Math/jacobian/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 References https://www.khanacademy.org/math/multivariable-calculus/multivariable-derivatives/jacobian/v/the-jacobian-matrix https://www.quora.com/What-is-the-Jacobian-how-does-it-work-and-what-is-an-intuitive-explanation-of-the-Jacobian-and-a-change-of-basis/answer/Mark-Eichenlaub https://www.quora.com/What-is-the-Jacobian-how-does-it-work-and-what-is-an-intuitive-explanation-of-the-Jacobian-and-a-change-of-basis/answer/Nikhil-Panikkar http://mini.eastday.com/mobile/181004122725427.html https://zhuanlan.zhihu.com/p/39762179 https://gist.github.com/sbarratt/37356c46ad1350d4c30aefbd488a4faa https://stackoverflow.com/questions/43451125/pytorch-what-are-the-gradient-arguments/47026836 https://discuss.pytorch.org/t/pytorch-most-efficient-jacobian-hessian-calculation/47417 https://discuss.pytorch.org/t/how-to-compute-jacobian-matrix-in-pytorch/14968","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"Pytorch Tutorial","date":"2019-09-25T09:19:00.000Z","path":"2019/09/25/ML/Pytorch/tutorial/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE autograd 1 References turorials: https://pytorch.org/tutorials/","tags":[{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"损失函数汇集","date":"2019-09-25T08:05:06.000Z","path":"2019/09/25/ML/Guide/loss/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 1 MSE TODO 2 CEE TODO 3 NLL TODO 4 References TODO","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"梯度下降算法Numpy实现","date":"2019-09-23T12:44:48.000Z","path":"2019/09/23/ML/Scratch/gradient_descent_algorithms/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"matplotlib colors","date":"2019-09-23T11:46:40.000Z","path":"2019/09/23/Note/Python/matplotlib_colors/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE Notebook References 1 Notebook","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Tricks","slug":"Tricks","permalink":"https://qrsforever.github.io/tags/Tricks/"}]},{"title":"numpy.where用法","date":"2019-09-23T03:19:52.000Z","path":"2019/09/23/Note/Python/numpy_where/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"}]},{"title":"牛顿法","date":"2019-09-22T06:35:25.000Z","path":"2019/09/22/ML/Guide/Newton_method/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE Description Applications 求方程的根 求最优解 References 1 Description 牛顿法的基本思想是利用迭代点\\(x_0\\)处的一阶导数(梯度)和二阶导数(Hessen矩阵)对目标函数进行二次函数(非线性)近 似,然后把二次模型的极小点作为新的迭代点,并不断重复这一过程,直至求得满足精度的近似极小值. 原理是利用泰勒公式展开. 在\\(x_0\\)处展开: \\[ f(x) = f(x_0) + f&#39;(x_0)(x - x_0) + \\dfrac{f&#39;&#39;(x_0)(x - x_0)^2}{2!} + \\cdots + \\dfrac{f^{(n)}(x_0)(x -x_0)^n}{n!} + R_n(x) \\label{Newton_Taylor} \\tag{1} \\] 2 Applications 2.1 求方程的根 取公式(\\(\\ref{Newton_Taylor}\\))前两项(线性部分), 并令其等于0: \\[ f(x) \\approx f(x_0) + f&#39;(x_0) (x - x_0) = 0 \\tag{2} \\] 求解: \\(f&#39;(x_0) \\neq 0\\) and \\(x = x_0 - \\dfrac{f(x_0)}{f&#39;(x_0)}\\) 2.2 求最优解 取公式(\\(\\ref{Newton_Taylor}\\))前三项: \\[ f(x) \\approx f(x_0) + f&#39;(x_0) (x - x_0) + \\dfrac{f&#39;&#39;(x_0)(x - x_0)^2}{2!} \\tag{3} \\] 则\\(min\\{f(x)\\}\\) 转化为: \\(min\\{f(x_0) + f&#39;(x_0) (x - x_0) + \\dfrac{f&#39;&#39;(x_0)(x - x_0)^2}{2!}\\} \\label{4} \\tag{4}\\) 即对(\\(\\ref{4}\\))二次函数(抛物线函数)求最小值, 对(\\(\\ref{4}\\))求导, 并另其等于0(切线斜率为0, 函数的极值点): \\[ f&#39;(x_0) + f&#39;&#39;(x_0)(x-x_0) = 0 \\Rightarrow x = x_0 - \\dfrac{1}{f&#39;&#39;(x_0)} f&#39;(x_0) \\label{5} \\tag{5} \\] 上面公式中\\(\\dfrac{1}{f&#39;&#39;(x_0)}\\)为牛顿迭代每次的步长. 3 迭代图 4 References https://en.wikipedia.org/wiki/Newton%27s_method https://zh.wikipedia.org/zh-hans/%E7%89%9B%E9%A1%BF%E6%B3%95 https://blog.csdn.net/qq_36330643/article/details/78003952 https://blog.csdn.net/google19890102/article/details/41087931","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)梯度下降算法","date":"2019-09-20T02:18:25.000Z","path":"2019/09/20/ML/Guide/optimizing_gradient_descent/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ RAWCODE Keys Newton Method Defination Draft Gradient descent BGD (batch gradient descent) SGD (stochastic gradient descent) MGD (mini-batch gradient descent) Algorithms Momentum NAG (Nesterov's accelerated gradient) Adagrad Adadelta Accumulate Over Window Correct Units with Hessian Approximation RMSprop Adam AdaMax Nadam AMSGrad Compare References 1 Keys 损坏函数(误差函数), 凸误差函数, 非凸误差函数, 学习率, 鞍点, 参数更新, 海瑟矩阵, 指数衰减, 泰勒级数 1.1 Newton Method 牛顿法的基本思想是利用迭代点\\(x_k\\)处的一阶导数(梯度)和二阶导数(Hessen矩阵)对目标函数进行二次函数近似,然后把二次 模型的极小点作为新的迭代点,并不断重复这一过程,直至求得满足精度的近似极小值. 核心思想是对函数进行泰勒级数展开 2 Defination w.r.t. : with regard to dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Gradient descent is a way to minimize an objective function \\(J(\\theta)\\) parameterized by a model's parameters \\(\\theta \\in \\mathbb R^d\\) by updating the parameters in the opposite direction of the gradient of the objective function \\(\\nabla_\\theta J(\\theta)\\) w.r.t. to the parameters. The learning rate \\(\\eta\\) determines the size of the steps we take to reach a (local) minimum. ruder.ioAn overview of gradient descent optimization algorithms 3 Draft 优化计算目标函数的梯度需要根据使用的数据的量的多少进行在精度和时间上权衡去择取合适的算法. 对于凸误差函数,批梯度下降法能够保证收敛到全局最小值,对于非凸函数,则收敛到一个局部最小值. 4 Gradient descent 代码实现(old) 代码实现(new) 4.1 BGD (batch gradient descent) 批量梯度下降 Defination: Vanilla gradient descent computes the gradient of the cost function w.r.t. to the parameters \\(\\theta\\) for the entire training dataset: \\[ \\theta = \\theta - \\eta \\nabla_\\theta J(\\theta) \\] 对全部训练数据进行依次更新, 如果数据集比较大, 造成冗余计算. Code: for i in range(nb_epochs): params_grad = evaluate_gradient(loss_function, data, params) params = params - learning_rate * params_grad 4.2 SGD (stochastic gradient descent) 随机梯度下降法, 有时也叫on-linegradient descent, 对每一条训练数据进行一次更新. Defination: Stochastic gradient descent (SGD) performs a parameter update for each training example \\(x^{(i)}\\) and label \\(y^{(i)}\\): \\[ \\theta = \\theta - \\eta \\nabla_\\theta J(\\theta; x^{(i)}; y^{(i)}) \\] 对每条训练数据进行一次更新, 更新频繁会出现\\(J\\)值的上下波动, 反而可能跳到新的,潜在的更好的局部最优 上. Codes: for i in range(nb_epochs): np.random.shuffle(data) for example in data: params_grad = evaluate_gradient(loss_function, example, params) params = params - learning_rate * params_grad 4.2.1 SGD with Gaussian Noise dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Results in Deep Learning never cease to surprise me. One ICLR 2016 paper from Google Brain team suggests a simple 1-line code change to improve your parameter estimation across the board — by adding a Gaussian noise to the computed gradients. Typical SGD updates parameters by taking a step in the direction of the gradient (simplified): \\[ \\mathbf{\\Theta}_{t+1} \\leftarrow \\mathbf{\\Theta}_{t} + \\alpha_{t}\\nabla\\mathbf{\\Theta} \\] Instead of doing that the suggestion is add a small random noise to the update: \\[ \\mathbf{\\Theta}_{t+1} \\leftarrow \\mathbf{\\Theta}_{t} + \\alpha_{t}(\\nabla\\mathbf{\\Theta} + N(0, \\sigma_t^2)) \\] Further, \\(\\sigma\\) is prescribed to be: \\[ \\sigma_t^2 = \\frac{\\eta}{(1 + t)^{0.55}} \\] and \\(\\eta\\) is one of \\(\\{0.01, 0.3, 1.0\\}\\)! Deplip RaoMake your Stochastic Gradient Descent more Stochastic 4.3 MGD (mini-batch gradient descent) 小批量梯度下降法 Defination: Mini-batch gradient descent finally takes the best of both worlds and performs an update for every mini-batch of n training examples: \\[ \\theta = \\theta - \\eta \\nabla_\\theta J(\\theta; x^{(i, i+n)}; y^{(i, i+n)}) \\] Codes: for i in range(nb_epochs): np.random.shuffle(data) for batch in get_batches(data, batch_size=50): params_grad = evaluate_gradient(loss_function, batch, params) params = params - learning_rate * params_grad 对一组训练数据进行一次更新, 解决了SGD的跳动带来的收敛不稳定的问题, 有时机器学习中SGD可能就是指的是MGD. 5 Algorithms 上面传统的梯度下降最优算法与将要介绍的下面的算法有些不同, 下面将要介绍的算法learning rate会变化, 传统的算 法则是单一的learning rate进行更新权重. 算法关系 5.1 Momentum 动量法 Defination: Momentum is a method that helps accelerate SGD in the relevant direction and dampens oscillations. It does this by adding a fraction \\(\\gamma\\) of the update vector of the past time step to the current update vector: \\[ \\begin{align} \\begin{split} v_t &amp;= \\gamma v_{t-1} + \\eta \\nabla_\\theta J( \\theta) \\\\ \\theta &amp;= \\theta - v_t \\end{split} \\end{align} \\] SGD波动最容易发生在局部最优处, 假设从山顶到山底通过一个斜坡滑下(最斜的一条), 则动量会累加, 即越靠近山底, 滑下的速度越快, SGD因为抖动做不到, 而动量法的原理就是在从山顶到山底滑下的通道上(梯度向量)加上一个累加 分量\\(\\gamma\\)(衰减因子), 如果滑下的过程中斜坡不变, \\(\\gamma\\)一直累加, 即参数更新的step变大, 收敛更快. dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} The momentum term increases for dimensions whose gradients point in the same directions and reduces updates for dimensions whose gradients change directions. As a result, we gain faster convergence and reduced oscillation. ruder.iomomentum Codes: for i in range(nb_epochs): np.random.shuffle(data) for batch in get_batches(data, batch_size=50): params_grad = evaluate_gradient(loss_function, batch, params) v[:] = momentum * v + learning_rate * params_grad params = params - v 5.2 NAG (Nesterov's accelerated gradient) 内斯特罗夫加速梯度(Look ahead) 动量法的高阶版本 Defination: Nesterov accelerated gradient (NAG) is a way to give our momentum term this kind of prescience, so we look ahead by calculating the gradient not w.r.t. to our current parameters \\(\\theta\\) but w.r.t. the approximate future position of our parameters: \\[ \\begin{align} \\begin{split} v_t &amp;= \\gamma v_{t-1} + \\eta \\nabla_\\theta J( \\theta - \\gamma v_{t-1} ) \\\\ \\theta &amp;= \\theta - v_t \\end{split} \\end{align} \\] 理解NAG, 关键要理解超前预知, 比如, 沿着斜坡下滑, 根据当前的下滑加速度(momentum), 提前预知下一时刻会到 达何处, 如果下一时刻到达的地方的斜率和当前不一样(eg.相反), 及时调整了加速度. 收敛速度比动量更新方法更快,收敛曲线更加稳定. Momentum vs NAG: 图片来自1 5.3 Adagrad 适应性梯度算法, 梯度二阶矩 Defination: Adagrad adapts the learning rate to the parameters, performing smaller updates (i.e. low learning rates) for parameters associated with frequently occurring features, and larger updates (i.e. high learning rates) for parameters associated with infrequent features. 单个参数更新形式1: \\[ \\begin{align*} g_{t, i} &amp;= \\nabla_\\theta J( \\theta_{t, i} ) \\\\ \\theta_{t+1, i} &amp;= \\theta_{t, i} - \\eta \\cdot g_{t, i} \\\\ \\theta_{t+1, i} &amp;= \\theta_{t, i} - \\dfrac{\\eta}{\\sqrt{G_{t, ii} + \\epsilon}} \\cdot g_{t, i} \\\\ \\end{align*} \\] \\(G_{t} \\in \\mathbb{R}^{d \\times d}\\) is a diagonal matrix. 矩阵向量更新形式2: \\[ \\theta_{t+1} = \\theta_{t} - \\dfrac{\\eta}{\\sqrt{G_{t} + \\epsilon}} \\odot g_{t} \\] 这个算法存在一个问题, \\(G_{t}\\)记载所有参数历史梯度累加平方和, 在整个训练过程中, 这个累加和不断增大, 这会导 致学习率变小, 无限变小时, 这个算法就会再也获取不到额外的信息. \\(G_{t}\\)可以表示为:\\(\\sum_{\\tau=1}^{t}(g_{\\tau})^{2}\\), 注意累加的是梯度(gradient),不是参数\\(\\theta\\). 由\\(\\Delta \\theta_{t} = - \\dfrac{\\eta}{\\sqrt{\\sum_{\\tau=1}^{t}(g_{\\tau})^{2} + \\epsilon}} \\odot g_{t}\\)得: 训练前期激励阶段: 累加梯度平方值小, 从而\\(\\Delta \\theta_{t}\\)值较大, 参数变化明显. 训练后期惩罚阶段: 累加梯度平方值大, 从而\\(\\Delta \\theta_{t}\\)值较小, 参数变化非常小 (缺点). 5.4 Adadelta 自适应学习率调整, 梯度二阶矩均值 Defination: Adadelta is an extension of Adagrad, Instead of accumulating all past squared gradients, Adadelta restricts the window of accumulated past gradients to some fixed size \\(w\\) 正如上面描述的Adagrad的缺点, 如果数据集很大, 会导致累加的梯度平方和很大, 导致继续训练很难得到额外的信 息. Adadelta试图寻找一个平衡, 不用计算所有的(时间序列)梯度平方和, Adagrad为了每次计算所有的梯度平方和, 需要额外保存历史梯度值的记录, Adadelta是将梯度的平方和递归的表示成所有历史梯度平方的衰减均值: the sum of gradients is recursively defined as a decaying average of all past squared gradients. 注意, 因为即使存放\\(w\\)个之前的梯度(对窗口w中的梯度求和), 这方法也是低效的, 所以最终采用的对所有梯度平方衰减 均值的方式实现. TODO 不明白什么是decaying average?, 为了继续下面的内容, 对decaying average的理解, 可以先用下面的例 子忽悠一下 (纯属自娱自乐): hypothesis data: \\(x_1, x_2, \\cdots, x_n\\) then: \\(E[x]_n = \\dfrac{1}{n}\\sum_{i}^{n} x_i \\label{adadelta_1} \\tag{1}\\) if we insert \\(x_{n+1}\\) into data: \\(x_1, x_2, \\cdots, x_n, x_{n+1}\\) then: \\(E[x]_{n+1} = \\dfrac{1}{n+1} \\sum_{i}^{n+1} x_i \\label{adadelta_2} \\tag{2}\\) from (\\(\\ref{adadelta_1}\\)) and (\\(\\ref{adadelta_2}\\)) we can get: \\[ \\begin{align*} E[x]_{n+1} &amp;= \\dfrac{nE[x]_n + x_{n+1}}{n+1} \\\\ &amp;= \\dfrac{n}{n+1}E[x]_n + \\dfrac{1}{n+1} x_{n+1} \\end{align*} \\] if let \\(\\gamma = \\dfrac{n}{n+1}\\) then: \\(1-\\gamma = \\dfrac{1}{n+1}\\) then: \\(E[x]_{n+1} = \\gamma E[x]_n + (1-\\gamma)x_{n+1}\\) 5.4.1 Accumulate Over Window 已知前面元素的均值, 在训练过程中不断加入新值, 再重新计算所有元素均值, 使用近似的方法(个人认为这也是why call decaying)求得, 忽略真实的训练次数, 使用\\(\\gamma\\)表示: \\[ E[g^2]_t = \\gamma E[g^2]_{t-1} + (1 - \\gamma) g^2_t \\] 使用(平方和)均值的方式可以杜绝(解决)Adagrad累加(平方和)渐进增大的问题. with the decaying average over past squared gradients: \\[ \\Delta \\theta_t = - \\dfrac{\\eta}{\\sqrt{E[g^2]_t + \\epsilon}} g_{t} = - \\dfrac{\\eta}{RMS[g]_{t}} g_t \\] 最终得到Accumulate Over Window的形式为: \\[ \\begin{align*} \\theta_{t+1} &amp;= \\theta_t + \\Delta \\theta_t \\\\ &amp;= \\theta_t - \\dfrac{\\eta}{RMS[g]_{t}} g_t \\end{align*} \\] 5.4.2 Correct Units with Hessian Approximation TODO 没明白, 后续补充, 先把公式列出: \\[ E[\\Delta \\theta^2]_t = \\gamma E[\\Delta \\theta^2]_{t-1} + (1 - \\gamma) \\Delta \\theta^2_t \\] \\[ RMS[\\Delta \\theta]_{t} = \\sqrt{E[\\Delta \\theta^2]_t + \\epsilon} \\] \\[ \\begin{align} \\begin{split} \\Delta \\theta_t &amp;= - \\dfrac{RMS[\\Delta \\theta]_{t-1}}{RMS[g]_{t}} g_{t} \\\\ \\theta_{t+1} &amp;= \\theta_t + \\Delta \\theta_t \\end{split} \\end{align} \\] 5.5 RMSprop 均方根传播, Adadelta的一个特殊情况 (Accumulate Over Window) RMSprop and Adadelta have both been developed independently around the same time stemming from the need to resolve Adagrad's radically diminishing learning rates. \\[ \\begin{align} \\begin{split} E[g^2]_t &amp;= 0.9 E[g^2]_{t-1} + 0.1 g^2_t \\\\ \\theta_{t+1} &amp;= \\theta_{t} - \\dfrac{\\eta}{\\sqrt{E[g^2]_t + \\epsilon}} g_{t} \\end{split} \\end{align} \\] 5.6 Adam Adaptive Moment Estimation 自适应矩估计 亚当 Adam可以看做是RMSprop和动量法的结合. 一阶矩(均值) with exponentially decaying average of past gradients \\(m_t\\): \\[m_t = \\beta_1 m_{t-1} + (1 - \\beta_1) g_t\\] like momentum. 二阶矩(非中心的方差) with exponentially decaying average of past squared gradients \\(v_t\\): \\[v_t = \\beta_2 v_{t-1} + (1 - \\beta_2) g_t^2\\] like Adadelta or RMSprop. 偏差校正: \\[ \\begin{align} \\begin{split} \\hat{m}_t &amp;= \\dfrac{m_t}{1 - \\beta^t_1} \\\\ \\hat{v}_t &amp;= \\dfrac{v_t}{1 - \\beta^t_2} \\end{split} \\end{align} \\] and last: \\[ \\theta_{t+1} = \\theta_{t} - \\dfrac{\\eta}{\\sqrt{\\hat{v}_t} + \\epsilon} \\hat{m}_t \\] 算法完美, 既使用到了momentum的动量特性(梯度方向不变, 越来越快), 同时具有RMSprop的自动更新学习速率. 5.7 AdaMax 亚当的变种, L范数 TODO \\[ \\begin{align} \\begin{split} u_t &amp;= \\beta_2^\\infty v_{t-1} + (1 - \\beta_2^\\infty) |g_t|^\\infty\\\\ &amp; = \\max(\\beta_2 \\cdot v_{t-1}, |g_t|) \\end{split} \\end{align} \\] \\(\\theta_{t+1} = \\theta_{t} - \\dfrac{\\eta}{u_t} \\hat{m}_t\\) 5.8 Nadam Nesterov-accelerated Adaptive Moment Estimation, 那达慕, 带有Nesterov动量项的亚当 Nadam (Nesterov-accelerated Adaptive Moment Estimation) thus combines Adam and NAG. 即它是Adam和NAG的组合 回顾一下Momentum动量formulas: \\[ \\begin{align*} g_t &amp;= \\nabla_{\\theta_t}J(\\theta_t)\\\\ m_t &amp;= \\gamma m_{t-1} + \\eta g_t\\\\ \\theta_{t+1} &amp;= \\theta_t - m_t \\end{align*} \\] 回顾一下NAG具有预测能力(先一步\\(J(\\theta_t - \\gamma m_{t-1})\\))的算法 formulas: \\[ \\begin{align*} g_t &amp;= \\nabla_{\\theta_t}J(\\theta_t - \\gamma m_{t-1}) \\\\ m_t &amp;= \\gamma m_{t-1} + \\eta g_t \\\\ \\theta_{t+1} &amp;= \\theta_t - m_t \\end{align*} \\] 从上面的公式会发现动量计算出现2处, 一处为了更新梯度\\(J(\\theta_t - \\gamma m_{t-1})\\), 另一处最后更新参数时, Dozat提出了一种方式修正NAG (look-ahead of weights, not gradient): \\[ \\begin{align*} g_t &amp;= \\nabla_{\\theta_t}J(\\theta_t) \\\\ m_t &amp;= \\gamma m_{t-1} + \\eta g_t \\\\ \\theta_{t+1} &amp;= \\theta_t - (\\gamma m_t + \\eta g_t) \\end{align*} \\] 回顾一下Adam: \\[ \\begin{align*} m_t &amp;= \\beta_1 m_{t-1} + (1 - \\beta_1) g_t \\\\ v_t &amp;= \\beta_2 v_{t-1} + (1 - \\beta_2) g_t^2 \\\\ \\hat{m}_t &amp; = \\frac{m_t}{1 - \\beta^t_1} \\\\ \\hat{v}_t &amp;= \\dfrac{v_t}{1 - \\beta^t_2} \\\\ \\theta_{t+1} &amp;= \\theta_{t} - \\frac{\\eta}{\\sqrt{\\hat{v}_t} + \\epsilon} \\hat{m}_t \\\\ \\theta_{t+1} &amp;= \\theta_{t} - \\frac{\\eta}{\\sqrt{\\hat{v}_t} + \\epsilon} (\\frac{\\beta_1 m_{t-1}}{1 - \\beta^t_1} + \\dfrac{(1 - \\beta_1) g_t}{1 - \\beta^t_1}) \\end{align*} \\] Nadam真容: \\[ \\theta_{t+1} = \\theta_{t} - \\dfrac{\\eta}{\\sqrt{\\hat{v}_t} + \\epsilon} (\\beta_1 \\hat{m}_t + \\dfrac{(1 - \\beta_1) g_t}{1 - \\beta^t_1}) \\] 把\\(\\dfrac{m_{t-1}}{1 - \\beta_1^t} = \\hat{m_{t-1}}\\)换成\\(\\hat{m_t}\\) ignore that the denominator is \\(1 - \\beta^t_1\\) and not \\(1 - \\beta^{t-1}_1\\) 5.9 AMSGrad TODO 6 Compare 算法 优点 缺点 适用情况 BGD 目标函数为凸函数时,可以找到全局最优值 收敛速度慢,需要用到全部数据,内存消耗大 不适用于大数据集,不能在线更新模型 SGD 避免冗余数据的干扰,收敛速度加快,能够在线学习 更新值的方差较大,收敛过程会产生波动,可能落入极小值(卡在鞍点),选择合适的学习率比较困难(需要不断减小学习率) 适用于需要在线更新的模型,适用于大规模训练样本情况 Momentum 能够在相关方向加速SGD,抑制振荡,从而加快收敛 需要人工设定学习率 适用于有可靠的初始化参数 Adagrad 实现学习率的自动更改 仍依赖于人工设置一个全局学习率,学习率设置过大,对梯度的调节太大.中后期,梯度接近于0,使得训练提前结束 需要快速收敛,训练复杂网络时;适合处理稀疏梯度1 Adadelta 不需要预设一个默认学习率,训练初中期,加速效果不错,很快,可以避免参数更新时两边单位不统一的问题 在局部最小值附近震荡,可能不收敛 需要快速收敛,训练复杂网络时 Adam 速度快,对内存需求较小,为不同的参数计算不同的自适应学习率 在局部最小值附近震荡,可能不收敛 需要快速收敛,训练复杂网络时;善于处理稀疏梯度和处理非平稳目标的优点,也适用于大多非凸优化 - 适用于大数据集和高维空间 7 References http://ruder.io/optimizing-gradient-descent/ https://blog.csdn.net/google19890102/article/details/69942970 https://blog.csdn.net/yzy_1996/article/details/84618536 http://louistiao.me/notes/visualizing-and-animating-optimization-algorithms-with-matplotlib/ https://towardsdatascience.com/10-gradient-descent-optimisation-algorithms-86989510b5e9 https://colab.research.google.com/drive/1Xsv6KtSwG5wD9oErEZerd2DZao8wiC6h https://mc.ai/learning-parameters-part-2-momentum-based-and-nesterov-accelerated-gradient-descent/ https://gist.github.com/akshaychandra21 https://blog.csdn.net/yzy_1996/article/details/84618536 https://www.cnblogs.com/neopenx/p/4768388.html https://mc.ai/learning-parameters-part-2-momentum-based-and-nesterov-accelerated-gradient-descent↩","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)LSTM算法numpy实现","date":"2019-09-19T09:11:22.000Z","path":"2019/09/19/ML/Scratch/rnn_lstm/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE W,U合并 Logits Codes References 1 W,U合并 在进入代码环节之前, 先介绍一下代码中出现的W,U参数的合并, 如下图 |&lt;---H----&gt;|&lt;---------K----------&gt;| ---+---------------------------------+ ^ | | | | | | | H | W | U | | | | | v | | | ---+---------------------------------+ Wh_{t-1} Ux_t 前: \\(s_t = \\phi(Wh_{t-1} + Ux_t + b)\\) 后: $s_t = (W' &lt;h_{t-1}, x_t&gt; + b) = (W' z_t + b) $ 从空间维度分析: \\(W \\in \\mathbf R^{H \\times H}\\), \\(U \\in \\mathbf R^{H \\times K}\\), \\(W&#39; \\in \\mathbf R^{H \\times (H+K)}\\) \\(h_{t-1} \\in \\mathbf R^{H \\times 1}\\), \\(x_t \\in \\mathbf R^{K \\times 1}\\), \\(z_t \\in \\mathbf R^{(H+K) \\times 1}\\) 2 Logits 在代码中出现, 把这个单词拆开log + it(它odds) + s(复数), 即对它们(odds)取log. odds是\"几率, 胜率\", 一个例子 搞定: assume: \\(\\text{ if } P = \\dfrac {1}{5}, 1-P = \\dfrac{4}{5} \\text { then } Odds(A) = log \\dfrac{1/5}{4/5}\\) logits (未归一化的概率)一般作为softmax的输入参数(归一化). 3 Codes 百度云盘Datasets","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"(draft)RNN代码实例(numpy)","date":"2019-09-18T11:51:24.000Z","path":"2019/09/18/ML/Scratch/rnn_builder/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE Formulas Notebook References 1 Formulas 1.1 符号 符号 解释 \\(K\\) 词汇表的大小 \\(T\\) 句子的长度 \\(H\\) 隐藏层单元数 \\(N\\) 训练数 \\(x \\in \\mathbb{R}^{T \\times 8000}\\) 输入 \\(o \\in \\mathbb{R}^{T \\times 8000}\\) 输出 \\(s \\in \\mathbb{R}^{T \\times 100}\\) 隐藏状态, 没算上\\(s_{-1}\\) \\(U \\in \\mathbb{R}^{100 \\times 8000}\\) 输入权重 \\(V \\in \\mathbb{R}^{8000 \\times 100}\\) 输出权重 \\(W \\in \\mathbb{R}^{100 \\times 100}\\) 隐藏状态转移权重 1.2 公式 \\[ \\begin{aligned} d_3 &amp; \\triangleq \\big(\\hat{y}_3 - y_3 \\big) \\cdot V \\cdot \\big(1 - s_3 ^ 2 \\big) \\\\ d_2 &amp; \\triangleq d_3 \\cdot W \\cdot \\big(1 - s_2 ^ 2 \\big) \\\\ d_1 &amp; \\triangleq d_2 \\cdot W \\cdot \\big(1 - s_1 ^ 2 \\big) \\\\ d_0 &amp; \\triangleq d_1 \\cdot W \\cdot \\big(1 - s_0 ^ 2 \\big) \\\\ \\\\ \\frac{\\partial{E_3}}{\\partial{V}} &amp;= \\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\frac{\\partial{z_3}}{\\partial{V}} \\\\ &amp;= (\\hat{y}_{3} - y_3) s_3 \\\\ \\\\ \\frac{\\partial{E_3}}{\\partial{W}} &amp;= \\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\frac{\\partial{z_3}}{\\partial{s_3}} \\frac{\\partial{s_3}}{\\partial{W}} \\\\ &amp; \\triangleq d_3 s_2 + d_2 s_1 + d_1 s_0 + d_0 \\cdot s_{-1} \\\\ \\\\ \\frac{\\partial{E_3}}{\\partial{U}} &amp;= \\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\frac{\\partial{z_3}}{\\partial{s_3}} \\frac{\\partial{s_3}}{\\partial{U}} \\\\ &amp; \\triangleq d_3 x_3 + d_2 x_2 + d_1 x_1 + d_0 \\cdot x_0 \\\\ \\end{aligned} \\] 2 Notebook 百度云盘Datasets","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"(drfat)矩阵求导","date":"2019-09-17T08:04:21.000Z","path":"2019/09/17/Note/Math/matrix_derivative/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 注解 一元微分: 导数 多元微分: 梯度 矩阵导数 References 1 注解 符号 表示 \\(x\\) 标量 \\(\\mathbf x\\) 粗体小写, 列向量 \\(X\\) 大些字母, 矩阵 2 一元微分: 导数 \\[ df = f&#39;(x)dx; \\] 3 多元微分: 梯度 \\[ \\begin{align*} df &amp;= \\sum_{i=1}^n \\dfrac{\\partial{f}}{\\partial{x_i}} dx_i \\\\ &amp;= {\\dfrac{\\partial{f}}{\\partial{\\mathbf x}}}^T d\\mathbf x \\end{align*} \\] 第一个等号是全微分形式; 第二个等号是梯度与微分的关系: \\(\\dfrac{\\partial{f}}{\\partial{\\mathbf x}}\\) (n x 1)梯度向量与微分向量\\(d\\mathbf x\\) (n x 1)的内积. 4 矩阵导数 \\[ \\begin{align*} df &amp;= \\sum_{i=1}^{m}\\sum_{j=1}^{n} \\dfrac{\\partial f}{\\partial X_{ij}} dX_{ij} \\\\ &amp;= tr \\bigg({\\dfrac{\\partial f}{\\partial X}}^T dX \\bigg) \\end{align*} \\] tr表示方阵的迹\\(tr(AB)=\\sum_{i,j}A_{i,j}B{ij}\\), 对角线元素的和, tr的性质: 标量的迹: \\(a = tr(a)\\) 转置: \\(tr(A^T) = tr(A)\\) 线性: \\(tr(A \\pm B) = tr(A) \\pm tr(B)\\) 乘法交换: \\(tr(AB) = tr(BA)\\) 逐元素乘法交换: \\(tr(A^T(B \\bigodot C)) = tr((A \\bigodot B)^TC)\\) 矩阵微分运算法则: 加减法: \\(d(X \\pm Y) = dX \\pm dY\\) 乘法: \\(d(XY) = (dX)Y + XdY\\) 转置: \\(d(X^T) = (dX)^T\\) 迹: \\(dtr(X) = tr(dX)\\) 逆: \\(dX^{-1} = -X^{-1}dX X^{-1}\\) 逐元素乘法: \\(d(X \\bigodot Y) = dX \\bigodot Y + X \\bigodot dY\\) 逐元素函数: \\(d\\sigma(X) = \\sigma&#39;(X) \\bigodot dX\\) 5 References 矩阵求导术1 矩阵求导术2","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"循环神经网络RNN介绍","date":"2019-09-12T05:52:48.000Z","path":"2019/09/12/ML/Guide/rnn_intro/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 符号注解 RNN(BPTT) 隐马尔可夫模型 BPTT 思考 梯度 计算例子 LSTM 长期依赖 梯度消失 与标准RNN对比 应用场景 语音识别 语言翻译 股票预测 图像识别(图里的内容) 其他 关键字 References 1 符号注解 符号 解释 \\(K\\) 词汇表的大小 \\(T\\) 句子的长度 \\(H\\) 隐藏层单元数 \\(\\mathbb{x}={x_1, x_2,...,x_T}\\) 句子的单词序列 \\(x_t\\in\\mathbb{R}^{K\\times 1}\\) t时刻RNN的输入,为one-hot vector,1表示一个单词的出现,0表示不出现 \\(x\\in \\mathbb{R}^{T \\times K}\\) 一个完整的句子, 句子的长度T \\(\\hat{y}_t\\in\\mathbb{R}^{K\\times 1}\\) t时刻softmax层的输出, 估计每个词出现的概率, 有时用\\(o_t\\) \\(y_t\\in\\mathbb{R}^{K\\times 1}\\) t时刻的label, 真实每个词出现的概率, one-hot vector. \\(E_t\\) 第t个时刻(第t个word)的损失函数,定义为交叉熵误差\\(E_t=−y_t^Tlog(\\hat{y}_t)\\) \\(E\\) 一个句子的损失函数,由各个时刻(即每个word)的损失函数组成,\\(E=\\sum\\limits_t^T E_t\\). \\(s_t\\in\\mathbb{R}^{H\\times 1}\\) t个时刻RNN隐藏层的输入 \\(h_t\\in\\mathbb{R}^{H\\times 1}\\) t个时刻RNN隐藏层的输出 \\(z_t\\in\\mathbb{R}^{K\\times 1}\\) 输出层的汇集输入 (空间映射:H到K) \\(r_t=\\hat{y}_t−y_t\\) 残差向量 \\(W\\in\\mathbb{R}^{H\\times K}\\) 从输入层到隐藏层的权值 \\(U\\in\\mathbb{R}^{H\\times H}\\) 隐藏层上一个时刻到当前时刻的权值 \\(V\\in\\mathbb{R}^{K\\times H}\\) 隐藏层到输出层的权值 函数关系: \\[ \\left\\{ \\begin{align*} s_t &amp;= Uh_{t-1} + Wx_t \\\\ h_t &amp;= tanh(s_t) \\\\ z_t &amp;= Vh_t \\\\ \\hat{y}_t &amp;= softmax(z_t) \\\\ E_t &amp;= -y_t^Tlog\\hat{y}_t \\\\ \\end{align*} \\right. \\] 由于\\(x_t, y_t\\)都是one-hot vector, 可以得出以下几点: \\(Wx_t\\) 如果是输入的是第j个词(对应j值1, 其余为0), 计算结果简化为将\\(W\\)的第j列取出. 当前时刻交叉熵\\(E_t=-y_t^Tlog(\\hat{y}_t) = -log(\\hat{y}_t,j\\), 即如果t时出现的是第j个词, 只需要看 \\(\\hat{y}_t\\)的第j个分量. 2 RNN(BPTT) 2.1 隐马尔可夫模型 Hidden Markov Model(HMM) dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 马尔科夫链的核心是说, 在给定当前知识或信息的情况下, 观察对象的过去的历史状态, 对于将来的预测来说预测是无关 的. 也可以说, 在观察一个系统变化的时候, 它下一个状态(n+1)如何的概率只需观察和统计当前状态(n). 隐马尔科夫链是个双重随机过程, 不仅状态转移之间是个随机过程, 状态和输出之间也是个随机过程. 高杨 隐马尔可夫链 状态的改变是使用虚线表示\\(X_1\\)到\\(X_T\\) (隐含状态链), 我们没法直接观察到, 而我们能够直接看到的是状态改变时带 来的观察值的变化\\(O_1\\)到\\(O_T\\) (可见状态链). 可见状态之间没有直接的转换概率, 隐含状态和可见状态之间存在一个 概率叫做输出概率 训练模型: 通过输入\\(X_i\\)和\\(O_i\\)两个序列, 经过统计学模型训练, 最后得到两个矩阵, 一个是\\(X\\)之间的隐含状态转移关系的矩阵, 一个是\\(X\\)到\\(O\\)之间的输出概率矩阵. RNN好的地方是它可以记住前面一段时间的输入信息,不好的地方是它只能记住某段时间的输入信息,虽然理论上RNN可以 处理长时间的信息,但是实际上它却不能很好的学习这些信息.对于长时间的输入信息它无能为力. 2.2 BPTT Backpropagation Through Time(时序反向传播算法): The parameters are shared by all times in the rnn network, the gradient at each output depends not only the current time steps but also the previous time steps. For example, in order to calculate the gradient at \\(t=4\\), we would need to backpropagate 3 steps and sum up the gradients. A recurrent neural network and the unfolding in time of the computation involved in its forward computation Formulas: \\(x_t\\): one-hot vector, t时刻的输入. \\(s_t\\): hidden state, t时候的隐藏状态, 通过前一个隐藏状态和当前输入计算出来的, \\(s_t = f(Ux_t + Ws_{t-1})\\), f可以是tanh或relu. \\(o_t\\): output, \\(o_t = softmax(Vs_t)\\) 注意, 有的地方还加了一个非线性变换: \\(h_t\\): hidden output, \\(h_t = tanh(s_t)\\) \\(z_t\\): output, \\(z_t = Vh_t = V tanh(s_t)\\) \\(\\hat{y}_t = softmax(z_t) = softmax(Vtanh(s_t))\\) 模型里是蕴含着这样的逻辑的, 那就是前一次输入的向量\\(x_{t-1}\\)所产生的结果对于本次输出的结果是有一定的影响的, 甚至更远期的\\(x_{t-2}, x_{t-3} ··· ···\\)都\"潜移默化\"地在影响本次输出的结果. 2.2.1 思考 为什么隐藏层的输出需要\\(V\\),即\\(\\hat{y}_t = softmax(Vz_t)\\), 不能直接\\(\\hat{y}_t = softmax(h_t)\\) ? 从变量的类型分析, \\(\\hat{y}_t \\in \\mathbb{R}^{K\\times 1}, h_t \\in \\mathbb{R}^{H\\times 1}, V \\in \\mathbb{R}^{K\\times H}\\), \\(V\\)矩阵可以把H空间映射到K空间. \\(U\\), \\(V\\), \\(W\\)分别有什么意义? RNN神经网络和传统的神经网络一样由输入层, 隐藏层,输出层组成, 不同的是RNN网络中超参数是共享的, \\(W\\)将输入层的词向量映射到隐藏层的空间中, \\(U\\)是自身状态的映射, 结合上下文进行记忆的取舍, \\(W\\)结合\\(U\\)形成当前时刻的隐藏层的知识状态, \\(V\\)是隐藏层到输出层的映射. \\(U\\)为输入权重, \\(W\\)为递归权重; \\(V\\)为输出权重 There are a few things to note here: dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} You can think of the hidden state s_t as the memory of the network. s_t captures information about what happened in all the previous time steps. The output at step o_t is calculated solely based on the memory at time t. As briefly mentioned above, it's a bit more complicated in practice because s_t typically can't capture information from too many time steps ago. Unlike a traditional deep neural network, which uses different parameters at each layer, a RNN shares the same parameters (U, V, W above) across all steps. This reflects the fact that we are performing the same task at each step, just with different inputs. This greatly reduces the total number of parameters we need to learn. The above diagram has outputs at each time step, but depending on the task this may not be necessary. For example, when predicting the sentiment of a sentence we may only care about the final output, not the sentiment after each word. Similarly, we may not need inputs at each time step. The main feature of an RNN is its hidden state, which captures some information about a sequence. wildmlrecurrent-neural-networks-tutorial-part-1-introduction-to-rnns 2.2.2 梯度 完整图: BPTT横向与纵向求导图 从上图可以看到, 梯度不仅从空间结构上传播(纵向), 而且从时间结构上传播(横向), 这也是BPTT名字的由来. if: \\(\\phi\\) is \\(tanh()\\) \\(\\psi\\) is \\(softmax()\\) 损失函数使用CEE(cross entropy loss), 总误差(所有输出节点的误差总和): \\[ \\begin{align*} E_t(y_t, \\hat{y}_t) &amp;= -\\dfrac{1}{n}y_tlog\\hat{y}_t \\\\ E(y, \\hat{y}) &amp;= \\sum_t E_t(y_t, \\hat{y}_t) \\\\ &amp;= - \\sum_t y_tlog\\hat{y}_t \\end{align*} \\] then: \\[ \\begin{align*} \\dfrac{\\partial E_t}{\\partial z_t} &amp;= \\dfrac{\\partial E_t}{\\partial \\hat{y}_t} \\psi&#39;(z_t) \\\\ &amp;= \\hat{y}_t - y_t \\qquad \\text{ if } \\psi \\text { is softmax() } \\tag{1} \\end{align*} \\] 很多公式某些地方没考虑矩阵或向量不同维度相乘的情况, 不是很严谨(严格说是错误的), 仅供参考. 对\\(V\\)梯度 \\[ \\begin{align*} \\dfrac{\\partial E_t}{\\partial V} &amp;= \\dfrac{\\partial E_t}{\\partial z_t} \\dfrac{\\partial z_t}{\\partial V} \\\\ &amp;= \\dfrac{\\partial E_t}{\\partial \\hat{y}_t} \\psi&#39;(z_t) \\otimes h_t \\\\ &amp;= (\\hat{y} - y_t) {h_t}^T \\tag{2} \\\\ \\end{align*} \\] \\[ \\dfrac{\\partial E}{\\partial V} = \\sum_{k=0}{t} (\\hat{y}_k - y_k) \\otimes h_k \\] 只和当前状态的输出有关. 对\\(U\\)求梯度 \\[ \\begin{align*} \\dfrac{\\partial E_t}{\\partial U} &amp;= \\dfrac{\\partial E_t}{\\partial z_t} \\dfrac{\\partial z_t}{\\partial h_t} \\phi&#39;(s_t) \\dfrac{\\partial s_t}{\\partial U} \\dfrac{\\partial s_t}{\\partial h_{t-1}} \\phi&#39;(s_{t-1}) \\dfrac{\\partial s_{t-1}}{\\partial U}\\cdots \\\\ &amp;= \\dfrac{\\partial E_t}{\\partial z_t} V^T \\phi&#39;(s_t) \\dfrac{\\partial s_t}{\\partial U} W^T \\phi&#39;(s_{t-1}) \\dfrac{\\partial s_{t-1}}{\\partial U}\\cdots \\\\ &amp;= \\sum_{k=1}^{t} \\dfrac{\\partial E_t}{\\partial z_t}\\dfrac{\\partial z_t}{\\partial h_t} \\dfrac{\\partial h_t}{\\partial h_k} \\dfrac{\\partial h_k}{\\partial s_k} \\dfrac{\\partial s_k}{\\partial U} \\\\ &amp;= \\sum_{k=1}^{t} \\dfrac{\\partial E_t}{\\partial h_k} \\dfrac{\\partial h_k}{\\partial s_k} {x_k}^T \\tag {3} \\end{align*} \\] 由于\\(s_t\\)的上一个状态输出\\(h_{t-1}\\)依然含有\\(U\\)的分量, 形式变为: 对\\(W\\)求梯度 \\[ \\begin{align*} \\dfrac{\\partial E_t}{\\partial W} &amp;= \\dfrac{\\partial E_t}{\\partial z_t} \\dfrac{\\partial z_t}{\\partial h_t} \\phi&#39;(s_t) \\dfrac{\\partial s_t}{\\partial W} \\dfrac{\\partial s_t}{\\partial h_{t-1}} \\phi&#39;(s_{t-1}) \\dfrac{\\partial s_{t-1}}{\\partial W}\\cdots \\\\ &amp;= \\dfrac{\\partial E_t}{\\partial z_t} V^T \\phi&#39;(s_t) \\dfrac{\\partial s_t}{\\partial W} W^T \\phi&#39;(s_{t-1}) \\dfrac{\\partial s_{t-1}}{\\partial W}\\cdots \\\\ &amp;= \\sum_{k=1}^{t} \\dfrac{\\partial E_t}{\\partial z_t}\\dfrac{\\partial z_t}{\\partial h_t} \\dfrac{\\partial h_t}{\\partial h_k} \\dfrac{\\partial h_k}{\\partial s_k} \\dfrac{\\partial s_k}{\\partial W} \\\\ &amp;= \\sum_{k=1}^{t} \\dfrac{\\partial E_t}{\\partial h_k} \\dfrac{\\partial h_k}{\\partial s_k} {h_{k-1}}^T \\tag {4} \\end{align*} \\] 另\\(h_0\\)全0向量. 2.2.3 计算例子 形式和上面的有些不同, 隐藏层输入和隐藏层输出合成一个\\(s_t = tanh(Ux_t + Ws_{t-1})\\). let: formulas \\[ \\begin{aligned} &amp; s_0 = tanh(U x_0 + W s_{-1}) \\\\ &amp; z_0 = V s_0 \\\\ &amp; o_0 \\triangleq \\hat{y}_{0} = sigmoid(z_0) \\\\\\\\ &amp; s_1 = tanh(U x_1 + W s_0) \\\\ &amp; z_1 = V s_1 \\\\ &amp; o_1 \\triangleq \\hat{y}_{1} = sigmoid(z_1) \\\\\\\\ &amp; s_2 = tanh(U x_2 + W s_1) \\\\ &amp; z_2 = V s_2 \\\\ &amp; o_2 \\triangleq \\hat{y}_{2} = sigmoid(z_2) \\\\\\\\ &amp; s_3 = tanh(U x_3 + W s_2) \\\\ &amp; z_3 = V s_3 \\\\ &amp; o_3 \\triangleq \\hat{y}_{3} = sigmoid(z_3) \\\\ \\end{aligned} \\] loss \\[ \\begin{aligned} L(y, o) = - \\frac{1}{N}\\sum_{n \\in N}y_n \\log o_n \\end{aligned} \\] partial derivative if: \\(d_t \\triangleq \\dfrac{\\partial E_t}{\\partial s_t}\\) then: \\[ \\begin{aligned} &amp; d_3 \\triangleq \\big(\\hat{y}_3 - y_3 \\big) \\cdot V \\cdot \\big(1 - s_3 ^ 2 \\big) \\\\ &amp; d_2 \\triangleq d_3 \\cdot W \\cdot \\big(1 - s_2 ^ 2 \\big) \\\\ &amp; d_1 \\triangleq d_2 \\cdot W \\cdot \\big(1 - s_1 ^ 2 \\big) \\\\ &amp; d_0 \\triangleq d_1 \\cdot W \\cdot \\big(1 - s_0 ^ 2 \\big) \\\\ \\end{aligned} \\] so calculate dLdV, dLdU, dLdW: \\(\\frac{\\partial{L}}{\\partial{V}}\\) \\[ \\begin{aligned} \\frac{\\partial{E_3}}{\\partial{V}} &amp;= \\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\frac{\\partial{z_3}}{\\partial{V}} \\\\ &amp;= (\\hat{y}_{3} - y_3) s_3 \\end{aligned} \\] \\(\\frac{\\partial{L}}{\\partial{U}}\\) \\[ \\begin{aligned} \\frac{\\partial{s_0}}{\\partial{U}} &amp;= \\big(1 - s_0 ^ 2 \\big) \\left(x_0 + \\frac{\\partial{s_{-1}}}{\\partial{U}} \\right) \\\\ &amp;= \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\\\\\\\ \\frac{\\partial{s_1}}{\\partial{U}} &amp;= \\big(1 - s_1 ^ 2 \\big) \\left(x_1 + W \\cdot \\frac{\\partial{s_{0}}}{\\partial{U}} \\right) \\\\ &amp;= \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\\\\\\\ \\frac{\\partial{s_2}}{\\partial{U}} &amp;= \\big(1 - s_2 ^ 2 \\big) \\left(x_2 + W \\cdot \\frac{\\partial{s_{1}}}{\\partial{U}} \\right) \\\\ &amp;= \\big(1 - s_2 ^ 2 \\big) \\Big(x_2 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\Big)\\\\\\\\ \\frac{\\partial{s_3}}{\\partial{U}} &amp;= \\big(1 - s_3 ^ 2 \\big) \\left(x_3 + W \\cdot \\frac{\\partial{s_{2}}}{\\partial{U}} \\right) \\\\ &amp;= \\big(1 - s_3 ^ 2 \\big) \\\\ &amp; \\bigg(x_3 + W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(x_2 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\Big) \\bigg)\\\\\\\\ \\end{aligned} \\] \\[ \\begin{aligned} \\frac{\\partial{E_3}}{\\partial{U}} &amp;= \\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\frac{\\partial{z_3}}{\\partial{s_3}} \\frac{\\partial{s_3}}{\\partial{U}} \\\\ &amp;= \\left(\\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\right) \\cdot \\frac{\\partial{z_3}}{\\partial{s_3}} \\cdot \\frac{\\partial{s_3}}{\\partial{U}} \\\\ &amp;= \\big(\\hat{y}_3 - y_3 \\big) \\cdot V \\cdot \\frac{\\partial{s_3}}{\\partial{U}} \\\\ &amp;= \\big(\\hat{y}_3 - y_3 \\big) \\cdot V \\cdot \\big(1 - s_3 ^ 2 \\big) \\bigg(x_3 + W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(x_2 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\Big) \\bigg)\\\\ &amp; \\triangleq d_3 \\big[x_3 + W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(x_2 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\Big) \\big]\\\\ &amp;= d_3 x_3 + d_3 W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(x_2 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\Big) \\\\ &amp; \\triangleq d_3 x_3 + d_2 \\Big(x_2 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big)\\Big) \\\\ &amp;= d_3 x_3 + d_2 x_2 + d_2 W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\\\ &amp; \\triangleq d_3 x_3 + d_2 x_2 + d_1 \\big(x_1 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\big) \\\\ &amp;= d_3 x_3 + d_2 x_2 + d_1 x_1 + d_1 W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot x_0 \\\\ &amp; \\triangleq d_3 x_3 + d_2 x_2 + d_1 x_1 + d_0 \\cdot x_0 \\\\ \\end{aligned} \\] \\(\\frac{\\partial{L}}{\\partial{W}}\\) \\[ \\begin{aligned} \\frac{\\partial{s_0}}{\\partial{W}} &amp;= \\big(1 - s_0 ^ 2 \\big) \\left(s_{-1} + \\frac{\\partial{s_{-1}}}{\\partial{W}} \\right) \\\\ &amp;= \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\\\\\\\ \\frac{\\partial{s_1}}{\\partial{W}} &amp;= \\big(1 - s_1 ^ 2 \\big) \\left(s_0 + W \\cdot \\frac{\\partial{s_{0}}}{\\partial{W}} \\right) \\\\ &amp;= \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\\\\\\\ \\frac{\\partial{s_2}}{\\partial{W}} &amp;= \\big(1 - s_2 ^ 2 \\big) \\left(s_1 + W \\cdot \\frac{\\partial{s_{1}}}{\\partial{W}} \\right) \\\\ &amp;= \\big(1 - s_2 ^ 2 \\big) \\Big(s_1 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\Big)\\\\\\\\ \\frac{\\partial{s_3}}{\\partial{W}} &amp;= \\big(1 - s_3 ^ 2 \\big) \\left(s_2 + W \\cdot \\frac{\\partial{s_{2}}}{\\partial{W}} \\right) \\\\ &amp;= \\big(1 - s_3 ^ 2 \\big) \\bigg(s_2 + W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(s_1 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\Big) \\bigg)\\\\\\\\ \\end{aligned} \\] \\[ \\begin{aligned} \\frac{\\partial{E_3}}{\\partial{W}} &amp;= \\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\frac{\\partial{z_3}}{\\partial{s_3}} \\frac{\\partial{s_3}}{\\partial{W}} \\\\ &amp;= \\left(\\frac{\\partial{E_3}}{\\partial{\\hat{y}_3}} \\frac{\\partial{\\hat{y}_3}}{\\partial{z_3}} \\right) \\cdot \\frac{\\partial{z_3}}{\\partial{s_3}} \\cdot \\frac{\\partial{s_3}}{\\partial{W}} \\\\ &amp;= \\big(\\hat{y}_3 - y_3 \\big) \\cdot V \\cdot \\frac{\\partial{s_3}}{\\partial{W}} \\\\ &amp;= \\big(\\hat{y}_3 - y_3 \\big) \\cdot V \\cdot \\big(1 - s_3 ^ 2 \\big) \\bigg(s_2 + W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(s_1 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\Big) \\bigg)\\\\ &amp; \\triangleq d_3 \\bigg(s_2 + W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(s_1 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\Big) \\bigg) \\\\ &amp;= d_3 s_2 + d_3 W \\cdot \\big(1 - s_2 ^ 2 \\big) \\Big(s_1 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\Big) \\\\ &amp; \\triangleq d_3 s_2 + d_2 \\Big(s_1 + W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\Big) \\\\ &amp;= d_3 s_2 + d_2 s_1 + d_2 W \\cdot \\big(1 - s_1 ^ 2 \\big) \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\\\ &amp; \\triangleq d_3 s_2 + d_2 s_1 + d_1 \\big(s_0 + W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\big) \\\\ &amp;= d_3 s_2 + d_2 s_1 + d_1 s_0 + d_1 W \\cdot \\big(1 - s_0 ^ 2 \\big) \\cdot s_{-1} \\\\ &amp; \\triangleq d_3 s_2 + d_2 s_1 + d_1 s_0 + d_0 \\cdot s_{-1} \\\\ \\end{aligned} \\] 3 LSTM 3.1 长期依赖 LSTM 解决避免长时期依赖(long-term dependency)的问题 3.2 梯度消失 LSTM 在某种程度上可以克服梯度消失问题. 传统后向传播 时间后向传播 图片来自1 3.3 与标准RNN对比 The repeating module in a standard RNN contains a single layer. VS The repeating module in an LSTM contains four interacting layers. 非常详细的介绍请点击这里 4 应用场景 4.1 语音识别 4.2 语言翻译 4.3 股票预测 4.4 图像识别(图里的内容) 5 其他 5.1 关键字 神经注意力模块(Attention) = 向前预测单元 + 后向回顾单元 6 References Understanding LSTM Networks 译 Understanding LSTM Networks Pytorch RNN 如何深度理解RNN?——看图就好! Attention Is All You Need recurrent-neural-networks-tutorial-part-1-introduction-to-rnns recurrent-neural-networks-tutorial-part-3-backpropagation-through-time-and-vanishing-gradients BTPP推导1 BTPP推导2 deriving-back-propagation-on-simple-rnn-lstm RNN-BPTT build-recurrent-neural-network-from-scratch https://baijiahao.baidu.com/s?id=1612358810937334377&amp;wfr=spider&amp;for=p↩","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"},{"name":"Graph","slug":"Graph","permalink":"https://qrsforever.github.io/tags/Graph/"}]},{"title":"Makefile模板","date":"2019-09-10T03:24:21.000Z","path":"2019/09/10/Note/C++/makefile/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ RAWCODE 通用 1 通用 # $(info &quot;######## Makefile #######&quot;) # PROJECT_ROOT_DIR := $(shell git worktree list | cut -d \\ -f1) # PROJECT_ROOT_DIR := $(shell dirname `git rev-parse --git-dir`) # 其他变量 OPTIMIZE := -O2 WARNINGS := -Wall -Wno-unused -Wno-format DEFS := -DDEBUG # 初始化编译工具以及编译选项 CROSS_COMPILE = GCC := $(CROSS_COMPILE)gcc CXX := $(CROSS_COMPILE)g++ CC := AR := $(CROSS_COMPILE)ar CFLAGS := $(OPTIMIZE) $(WARNINGS) $(DEFS) CPPFLAGS:= -std=c++11 LDFLAGS := -Wl,-rpath=. INCLUDE := # 源文件可能的后缀 SRCEXTS := c C cc cpp CPP c++ cxx cp HDREXTS := h H hh hpp HPP h++ hxx hp # 指定源文件目录, 以及目标文件生成目录 SRC_DIR = . src INC_DIR = . src OUT_DIR = output OBJ_DIR = $(OUT_DIR)/obj # 指定运行环境(-Wl,-rpath, 多个使用:) RPATH = &quot;.:$(OUT_DIR)&quot; # 额外增加的源文件或者排除不编译的源文件 SPECIAL_SRC := EXCLUDE_SRC := %UnitTest.cpp # 设置目标类型(exe, a, so), 及目标名字 TARGET_TYPE := exe TARGET_TYPE := $(strip $(TARGET_TYPE)) TARGET_NAME := ifeq ($(TARGET_NAME), ) TARGET_NAME := $(shell basename $(PWD)) endif ifneq ($(TARGET_TYPE), exe) TARGET_NAME := $(join $(OUT_DIR)/lib, $(TARGET_NAME)) TARGET_NAME := $(join $(TARGET_NAME), .$(TARGET_TYPE)) else TARGET_NAME := $(join $(OUT_DIR), /$(TARGET_NAME)) LDFLAGS += -L$(OUT_DIR) endif # 追加搜索目录 SRC_DIR += $(dir $(SPECIAL_SRC)) INC_DIR += $(SRC_DIR) # 源文件, 头文件, 链接文件 SOURCES = $(filter-out $(EXCLUDE_SRC), $(foreach d, $(SRC_DIR), $(wildcard $(addprefix $(d)/*., $(SRCEXTS))))) HEADERS = $(foreach d, $(INC_DIR), $(wildcard $(addprefix $(d)/*., $(HDREXTS)))) OBJECTS = $(addprefix $(OBJ_DIR)/, $(addsuffix .o, $(basename $(notdir $(SOURCES))))) # 配置编译选项 INCLUDE += $(foreach d, $(sort $(INC_DIR)), -I$d) ifeq ($(TARGET_TYPE), so) CFLAGS += -fpic -shared LDFLAGS += -shared endif # 定义伪目标 PHONY = all .mkdir clean all: .mkdir $(TARGET_NAME) # 函数: 添加%.x依赖文件的路径 define add_vpath $1 endef # 函数: 生成中间文件 define gen_o_cmd $2/%.o: %.$1 ifeq ($3 , $(GCC)) $(3) $(INCLUDE) -Wp,-MT,$$@ -Wp,-MMD,$$@.d $(CFLAGS) -c -o $$@ $$&lt; else $(3) $(INCLUDE) -Wp,-MT,$$@ -Wp,-MMD,$$@.d $(CFLAGS) $(CPPFLAGS) -c -o $$@ $$&lt; endif endef # 执行函数, make会将函数里的内容当Makefile解析, 注意$$符号 $(eval $(foreach i, $(SRCEXTS), $(foreach d, $(SRC_DIR), $(call add_vpath,vpath %.$i $d)))) $(eval $(foreach i, $(SRCEXTS), $(call gen_o_cmd,$i,$(OBJ_DIR),$(if $(filter-out c C, $(i)),$(CXX),$(GCC))))) # 静态, 动态, 可执行 ifeq ($(TARGET_TYPE), a) $(TARGET_NAME): .mkdir $(OBJECTS) rm -f $@ $(AR) rcvs $@ $(OBJECTS) else $(TARGET_NAME): LD=$(if $(filter-out %.c %.C, $(SOURCES)),$(CXX),$(GCC)) $(TARGET_NAME): .mkdir $(OBJECTS) $(LD) $(OBJECTS) -o $@ $(LDFLAGS) -Wl,-rpath=$(RPATH) endif .mkdir: @if [ ! -d $(OBJ_DIR) ]; then mkdir -p $(OBJ_DIR); fi clean: rm -rf $(OUT_DIR) run:$(TARGET_NAME) $(TARGET_NAME) .PHONY: $(PHONY)","tags":[{"name":"C++","slug":"C","permalink":"https://qrsforever.github.io/tags/C/"},{"name":"Template","slug":"Template","permalink":"https://qrsforever.github.io/tags/Template/"}]},{"title":"Hadoop配置xml文件模板","date":"2019-09-10T02:41:48.000Z","path":"2019/09/10/Note/Hadoop/hadoop_xml/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ RAWCODE XML core-site hdfs-site mapred-site yarn-site hdbase-site Default Ports 1 XML 1.1 core-site current: r3.1.1 core-default.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;!-- 指定hdfs的nameservice为bigha(hdfs-site.xml指定), 端口号默认9000 --&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://bigha&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定hadoop运行时产生文件的存储路径 --&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/opt/ws/hadoop/tmp&lt;/value&gt; &lt;/property&gt; &lt;!-- 删除的文件垃圾箱存放时间(以分钟为单位) --&gt; &lt;property&gt; &lt;name&gt;fs.trash.interval&lt;/name&gt; &lt;value&gt;1440&lt;/value&gt; &lt;/property&gt; &lt;!-- 来设置SequenceFile中用到的读/写缓存大小(一页4k的倍数, 字节为单位) --&gt; &lt;property&gt; &lt;name&gt;io.file.buffer.size&lt;/name&gt; &lt;value&gt;65536&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定zookeeper地址，多个用,分割 --&gt; &lt;property&gt; &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt; &lt;value&gt;node2:2181,node3:2181,node4:2181&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置zookeeper 心跳超时时间 --&gt; &lt;property&gt; &lt;name&gt;ha.zookeeper.session-timeout.ms&lt;/name&gt; &lt;value&gt;300000&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 1.2 hdfs-site current: r3.1.1 hdfs-default.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;!-- dfs.nameservices 命名空间的逻辑名称，多个用,分割 --&gt; &lt;property&gt; &lt;name&gt;dfs.nameservices&lt;/name&gt; &lt;value&gt;bigha&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定ns1下有两个namenode，分别是nn1,nn2 --&gt; &lt;property&gt; &lt;name&gt;dfs.ha.namenodes.bigha&lt;/name&gt; &lt;value&gt;nn1,nn2&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定nn1的RPC通信地址 --&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.rpc-address.bigha.nn1&lt;/name&gt; &lt;value&gt;node0:8020&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定nn1的HTTP通信地址 --&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.http-address.bigha.nn1&lt;/name&gt; &lt;value&gt;node0:50070&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定nn2的RPC通信地址 --&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.rpc-address.bigha.nn2&lt;/name&gt; &lt;value&gt;node1:8020&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定nn2的HTTP通信地址 --&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.http-address.bigha.nn2&lt;/name&gt; &lt;value&gt;node1:50070&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定namenode的元数据存放的Journal Node的地址，必须基数，至少三个 --&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt; &lt;value&gt;qjournal://node2:8485;node3:8485;node4:8485/bigha&lt;/value&gt; &lt;/property&gt; &lt;!--这是JournalNode进程保持逻辑状态的路径。这是在linux服务器文件的绝对路径--&gt; &lt;property&gt; &lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt; &lt;value&gt;/opt/ws/hadoop/journal/&lt;/value&gt; &lt;/property&gt; &lt;!-- 开启namenode失败后自动切换 --&gt; &lt;property&gt; &lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- 配置失败自动切换实现方式 --&gt; &lt;property&gt; &lt;name&gt;dfs.client.failover.proxy.provider.bigha&lt;/name&gt; &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt; &lt;/property&gt; &lt;!-- 配置隔离机制方法，多个机制用换行分割 --&gt; &lt;property&gt; &lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt; &lt;value&gt; sshfence shell(/bin/true) &lt;/value&gt; &lt;/property&gt; &lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt; &lt;property&gt; &lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt; &lt;value&gt;/home/lidong/.ssh/id_rsa&lt;/value&gt; &lt;/property&gt; &lt;!-- 配置sshfence隔离机制超时时间30秒 --&gt; &lt;property&gt; &lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt; &lt;value&gt;30000&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定磁盘预留多少空间，防止磁盘被撑满用完，单位为bytes --&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.du.reserved&lt;/name&gt; &lt;value&gt;2147483648&lt;/value&gt; &lt;/property&gt; &lt;!--指定namenode名称空间的存储地址--&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;file:///opt/ws/hadoop/hdfs/name&lt;/value&gt; &lt;/property&gt; &lt;!--指定datanode数据存储地址--&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;file:///opt/ws/hadoop/hdfs/data&lt;/value&gt; &lt;/property&gt; &lt;!--指定数据冗余份数--&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;3&lt;/value&gt; &lt;/property&gt; &lt;!--指定可以通过web访问hdfs目录--&gt; &lt;property&gt; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- 处理namenode线程数 --&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.handler.count&lt;/name&gt; &lt;value&gt;200&lt;/value&gt; &lt;description&gt;The number of server threads for the namenode.&lt;/description&gt; &lt;/property&gt; &lt;!-- 处理datanode线程数 --&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.handler.count&lt;/name&gt; &lt;value&gt;200&lt;/value&gt; &lt;description&gt;The number of server threads for the datanode.&lt;/description&gt; &lt;/property&gt; &lt;!-- 数据传输最大线程数--&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.max.transfer.threads&lt;/name&gt; &lt;value&gt;1024&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置块大小 --&gt; &lt;property&gt; &lt;name&gt;dfs.blocksize&lt;/name&gt; &lt;value&gt;5242880&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置日志节点写入超时时间 --&gt; &lt;property&gt; &lt;name&gt;dfs.qjournal.write-txns.timeout.ms&lt;/name&gt; &lt;value&gt;300000&lt;/value&gt; &lt;/property&gt; &lt;!-- &lt;property&gt; - &lt;name&gt;dfs.namenode.fs-limits.min-block-size&lt;/name&gt; - &lt;value&gt;1048576&lt;/value&gt; - &lt;/property&gt; - - &lt;property&gt; - &lt;name&gt;dfs.namenode.fs-limits.max-blocks-per-file&lt;/name&gt; - &lt;value&gt;1048576&lt;/value&gt; - &lt;/property&gt; --&gt; &lt;/configuration&gt; 1.3 mapred-site current: r3.1.1 mapred-default.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;!-- 框架MR运行在YARN --&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置每个job的map任务数 --&gt; &lt;property&gt; &lt;name&gt;mapreduce.job.maps&lt;/name&gt; &lt;value&gt;4&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置每个job的reduce任务数 --&gt; &lt;property&gt; &lt;name&gt;mapreduce.job.reduces&lt;/name&gt; &lt;value&gt;4&lt;/value&gt; &lt;/property&gt; &lt;!-- 实际物理内存量，默认是1024 --&gt; &lt;property&gt; &lt;name&gt;mapreduce.map.memory.mb&lt;/name&gt; &lt;value&gt;1024&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.reduce.memory.mb&lt;/name&gt; &lt;value&gt;1024&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置每个任务的JVM参数, 默认是-Xmx200m (80% of memory.mb) --&gt; &lt;property&gt; &lt;name&gt;mapreduce.map.java.opts&lt;/name&gt; &lt;value&gt;-Xmx200m&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.reduce.java.opts&lt;/name&gt; &lt;value&gt;-Xmx200m&lt;/value&gt; &lt;/property&gt; &lt;!-- CPU数目，默认是1 --&gt; &lt;!-- &lt;property&gt; - &lt;name&gt;mapreduce.map.cpu.vcores&lt;/name&gt; - &lt;value&gt;1&lt;/value&gt; - &lt;/property&gt; --&gt; &lt;!-- &lt;property&gt; - &lt;name&gt;mapreduce.reduce.cpu.vcores&lt;/name&gt; - &lt;value&gt;1&lt;/value&gt; - &lt;/property&gt; --&gt; &lt;!-- 设置AppMaster内存 --&gt; &lt;property&gt; &lt;name&gt;yarn.app.mapreduce.am.resource.mb&lt;/name&gt; &lt;value&gt;512&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; &lt;value&gt;node0:10020&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置WEB访问jobhistory --&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;node0:19888&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 1.4 yarn-site current: r3.1.1 yarn-default.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;!-- 使能日志聚合 --&gt; &lt;property&gt; &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- 聚合日志在DFS文件系统保留时间 --&gt; &lt;property&gt; &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt; &lt;value&gt;4320&lt;/value&gt; &lt;/property&gt; &lt;!-- Aggregate log (bigha fs) --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.remote-app-log-dir&lt;/name&gt; &lt;value&gt;/tmp/logs&lt;/value&gt; &lt;/property&gt; &lt;!--RM失联后重新链接的时间--&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.connect.retry-interval.ms&lt;/name&gt; &lt;value&gt;2000&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置zookeeper服务器地址 --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt; &lt;value&gt;node2:2181,node3:2181,node4:2181&lt;/value&gt; &lt;/property&gt; &lt;!-- 不太懂: 集群ID, 确保RM不会作为其他集群的active --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt; &lt;value&gt;bigcluster&lt;/value&gt; &lt;/property&gt; &lt;!--开启RM HA --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- RM的逻辑id列表 --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt; &lt;value&gt;rm1,rm2&lt;/value&gt; &lt;/property&gt; &lt;!-- 每个rm-id的主机名 --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt; &lt;value&gt;node0&lt;/value&gt; &lt;/property&gt; &lt;!-- 每个rm-id的主机名 --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt; &lt;value&gt;node5&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.address.rm1&lt;/name&gt; &lt;value&gt;node0:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.address.rm2&lt;/name&gt; &lt;value&gt;node5:8032&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address.rm1&lt;/name&gt; &lt;value&gt;node0:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.scheduler.address.rm2&lt;/name&gt; &lt;value&gt;node5:8030&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address.rm1&lt;/name&gt; &lt;value&gt;node0:8031&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.resource-tracker.address.rm2&lt;/name&gt; &lt;value&gt;node5:8031&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt; &lt;value&gt;node0:8088&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt; &lt;value&gt;node5:8088&lt;/value&gt; &lt;/property&gt; &lt;!--开启故障自动切换--&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.ha.automatic-failover.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.ha.automatic-failover.embedded&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.ha.automatic-failover.zk-base-path&lt;/name&gt; &lt;value&gt;/yarn-leader-election&lt;/value&gt; &lt;/property&gt; &lt;!--开启自动恢复功能--&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.recovery.enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- AM启动任务不会继承父进程的classpath, 可以通过该属性告知, 或者运行jar包 -libjar指定 --&gt; &lt;property&gt; &lt;name&gt;yarn.application.classpath&lt;/name&gt; &lt;value&gt; /opt/hadoop/, /opt/hadoop/etc/hadoop/*, /opt/hadoop/share/hadoop/common/*,/opt/hadoop/share/hadoop/common/lib/*, /opt/hadoop/share/hadoop/hdfs/*,/opt/hadoop/share/hadoop/hdfs/lib/*, /opt/hadoop/share/hadoop/mapreduce/*,/opt/hadoop/share/hadoop/mapreduce/lib/*, /opt/hadoop/share/hadoop/yarn/*,/opt/hadoop/share/hadoop/yarn/lib/*, /opt/hadoop/share/hadoop/tools/lib/*, /opt/hbase/conf/,/opt/hbase/lib/* &lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.store.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置zookeeper中数据存储目录 --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.zk-state-store.parent-path&lt;/name&gt; &lt;value&gt;/rmstore&lt;/value&gt; &lt;/property&gt; &lt;!-- Reducer取数据的方式是mapreduce_shuffle --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;!-- &lt;property&gt; - &lt;name&gt;yarn.nodemanager.aux-services.mapreduce_shuffle.class&lt;/name&gt; - &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt; - &lt;/property&gt; --&gt; &lt;!-- 总的可用物理内存量，默认是8096 --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt; &lt;value&gt;1024&lt;/value&gt; &lt;/property&gt; &lt;!-- 总的可用CPU数目，默认是8 --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;!-- 最小可申请内存量，默认是1024 --&gt; &lt;property&gt; &lt;name&gt;yarn.scheduler.minimum-allocation-mb&lt;/name&gt; &lt;value&gt;256&lt;/value&gt; &lt;/property&gt; &lt;!-- 最小可申请CPU数，默认是1 --&gt; &lt;property&gt; &lt;name&gt;yarn.scheduler.minimum-allocation-vcores&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;!-- 最大可申请内存量，默认是8096 --&gt; &lt;property&gt; &lt;name&gt;yarn.scheduler.maximum-allocation-mb&lt;/name&gt; &lt;value&gt;1024&lt;/value&gt; &lt;/property&gt; &lt;!-- 最大可申请CPU数，默认是4 --&gt; &lt;property&gt; &lt;name&gt;yarn.scheduler.maximum-allocation-vcores&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt; &lt;!-- 使能物理内存限制, 当大于mapreduce.reduce|map.memory.mb抛异常&quot; --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- 使能虚拟内存限制, 当大于yarn.nodemanager.vmem-pmem-ratio倍mapreduce.reduce|map.memory.mb抛异常 --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置虚拟内存与物理内存的倍数, 默认2.1 --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;/name&gt; &lt;value&gt;6.0&lt;/value&gt; &lt;/property&gt; &lt;!-- YARN 日志 --&gt; &lt;property&gt; &lt;name&gt;yarn.log.server.url&lt;/name&gt; &lt;value&gt;http://node0:19888/jobhistory/logs&lt;/value&gt; &lt;/property&gt; &lt;/configuration&gt; 1.5 hdbase-site &lt;?xml version=&quot;1.0&quot;?&gt; &lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt; &lt;configuration&gt; &lt;!-- 存储在HADOOP HDFS上文件根目录路径, 如果不是HA集群, 必须与core-site.xml文件配置保持完全一致 --&gt; &lt;property&gt; &lt;name&gt;hbase.rootdir&lt;/name&gt; &lt;value&gt;hdfs://bigha/hbase&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;zookeeper.znode.parent&lt;/name&gt; &lt;value&gt;/hbase&lt;/value&gt; &lt;/property&gt; &lt;!-- 采用分布式模式 --&gt; &lt;property&gt; &lt;name&gt;hbase.cluster.distributed&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- zookeeper地址，端口(默认为2181) --&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt; &lt;value&gt;node2,node3,node4&lt;/value&gt; &lt;/property&gt; &lt;!-- hbase临时文件存储目录，比如一些数据表的预分区信息等等 --&gt; &lt;property&gt; &lt;name&gt;hbase.tmp.dir&lt;/name&gt; &lt;value&gt;/opt/ws/hbase/tmp&lt;/value&gt; &lt;/property&gt; &lt;!-- zookeeper存储数据位置(与zoo.cfg保持一致) --&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt; &lt;value&gt;/opt/ws/zookeeper/data&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定zk的连接端口 --&gt; &lt;property&gt; &lt;name&gt;hbase.zookeeper.property.clientPort&lt;/name&gt; &lt;value&gt;2181&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置Master并发最大线程数 --&gt; &lt;property&gt; &lt;name&gt;hbase.regionserver.handler.count&lt;/name&gt; &lt;value&gt;10&lt;/value&gt; &lt;/property&gt; &lt;!-- RegionServer与Zookeeper间的连接超时时间。 当超时时间到后，ReigonServer会被Zookeeper从RS集群清单中移除，HMaster收到移除通知后， 会对这台server负责的regions重新balance，让其他存活的RegionServer接管. --&gt; &lt;property&gt; &lt;name&gt;zookeeper.session.timeout&lt;/name&gt; &lt;value&gt;30000&lt;/value&gt; &lt;/property&gt; &lt;!--一个edit版本在内存中的cache时长，默认3600000毫秒--&gt; &lt;property&gt; &lt;name&gt;hbase.regionserver.optionalcacheflushinterval&lt;/name&gt; &lt;value&gt;7200000&lt;/value&gt; &lt;/property&gt; &lt;!--分配给HFile/StoreFile的block cache占最大堆(-Xmx setting)的比例。默认0.4意思是分配40%，设置为0就是禁用，但不推荐。--&gt; &lt;property&gt; &lt;name&gt;hfile.block.cache.size&lt;/name&gt; &lt;value&gt;0.3&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置HStoreFile的大小，当大于这个数时，就会split 成两个文件 --&gt; &lt;property&gt; &lt;name&gt;hbase.hregion.max.filesize&lt;/name&gt; &lt;value&gt;134217728&lt;/value&gt; &lt;/property&gt; &lt;!--设置memstore的大小，当大于这个值时，写入磁盘--&gt; &lt;property&gt; &lt;name&gt;hbase.hregion.memstore.flush.size&lt;/name&gt; &lt;value&gt;134217728&lt;/value&gt; &lt;/property&gt; &lt;!-- 设置HDFS客户端最大超时时间，尽量改大 --&gt; &lt;property&gt; &lt;name&gt;dfs.client.socket-timeout&lt;/name&gt; &lt;value&gt;60000 &lt;/value&gt; &lt;/property&gt; &lt;!-- 端口默认: - &lt;property &gt; - &lt;name&gt;hbase.master.port&lt;/name&gt; - &lt;value&gt;60000&lt;/value&gt; - &lt;/property&gt; - - &lt;property&gt; - &lt;name&gt;hbase.master.info.port&lt;/name&gt; - &lt;value&gt;60010&lt;/value&gt; - &lt;/property&gt; - - &lt;property&gt; - &lt;name&gt;hbase.regionserver.port&lt;/name&gt; - &lt;value&gt;60020&lt;/value&gt; - &lt;/property&gt; - - &lt;property&gt; - &lt;name&gt;hbase.regionserver.info.port&lt;/name&gt; - &lt;value&gt;60030&lt;/value&gt; - &lt;/property&gt; - --&gt; &lt;/configuration&gt; 2 Default Ports PORT CONFIG NAME CONFIG VALUE 0 dfs.balancer.address 0.0.0.0:0 9866 dfs.datanode.address 0.0.0.0:9866 9864 dfs.datanode.http.address 0.0.0.0:9864 9865 dfs.datanode.https.address 0.0.0.0:9865 9867 dfs.datanode.ipc.address 0.0.0.0:9867 8111 dfs.federation.router.admin-address 0.0.0.0:8111 50071 dfs.federation.router.http-address 0.0.0.0:50071 50072 dfs.federation.router.https-address 0.0.0.0:50072 8888 dfs.federation.router.rpc-address 0.0.0.0:8888 8480 dfs.journalnode.http-address 0.0.0.0:8480 8481 dfs.journalnode.https-address 0.0.0.0:8481 8485 dfs.journalnode.rpc-address 0.0.0.0:8485 0 dfs.mover.address 0.0.0.0:0 50100 dfs.namenode.backup.address 0.0.0.0:50100 50105 dfs.namenode.backup.http-address 0.0.0.0:50105 9870 dfs.namenode.http-address 0.0.0.0:9870 9871 dfs.namenode.https-address 0.0.0.0:9871 9868 dfs.namenode.secondary.http-address 0.0.0.0:9868 9869 dfs.namenode.secondary.https-address 0.0.0.0:9869 50200 dfs.provided.aliasmap.inmemory.dnrpc-address 0.0.0.0:50200 2181 hadoop.registry.zk.quorum localhost:2181 10020 mapreduce.jobhistory.address 0.0.0.0:10020 10033 mapreduce.jobhistory.admin.address 0.0.0.0:10033 19888 mapreduce.jobhistory.webapp.address 0.0.0.0:19888 19890 mapreduce.jobhistory.webapp.https.address 0.0.0.0:19890 0 yarn.nodemanager.address ${yarn.nodemanager.hostname}:0 8049 yarn.nodemanager.amrmproxy.address 0.0.0.0:8049 8048 yarn.nodemanager.collector-service.address ${yarn.nodemanager.hostname}:8048 8040 yarn.nodemanager.localizer.address ${yarn.nodemanager.hostname}:8040 8042 yarn.nodemanager.webapp.address ${yarn.nodemanager.hostname}:8042 8044 yarn.nodemanager.webapp.https.address 0.0.0.0:8044 8032 yarn.resourcemanager.address ${yarn.resourcemanager.hostname}:8032 8033 yarn.resourcemanager.admin.address ${yarn.resourcemanager.hostname}:8033 8031 yarn.resourcemanager.resource-tracker.address ${yarn.resourcemanager.hostname}:8031 8030 yarn.resourcemanager.scheduler.address ${yarn.resourcemanager.hostname}:8030 8088 yarn.resourcemanager.webapp.address ${yarn.resourcemanager.hostname}:8088 8090 yarn.resourcemanager.webapp.https.address ${yarn.resourcemanager.hostname}:8090 8089 yarn.router.webapp.address 0.0.0.0:8089 8091 yarn.router.webapp.https.address 0.0.0.0:8091 8047 yarn.sharedcache.admin.address 0.0.0.0:8047 8045 yarn.sharedcache.client-server.address 0.0.0.0:8045 8046 yarn.sharedcache.uploader.server.address 0.0.0.0:8046 8788 yarn.sharedcache.webapp.address 0.0.0.0:8788 10200 yarn.timeline-service.address ${yarn.timeline-service.hostname}:10200 8188 yarn.timeline-service.webapp.address ${yarn.timeline-service.hostname}:8188 8190 yarn.timeline-service.webapp.https.address ${yarn.timeline-service.hostname}:8190","tags":[{"name":"Template","slug":"Template","permalink":"https://qrsforever.github.io/tags/Template/"},{"name":"Hadoop","slug":"Hadoop","permalink":"https://qrsforever.github.io/tags/Hadoop/"}]},{"title":"改进visdom来适应项目","date":"2019-09-04T12:48:29.000Z","path":"2019/09/04/Company/Cauthy/ex_visdom/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 当前现状 改进方案 代码 Visdom Client WebSocket Client Visdom Server 测试 1 当前现状 当前Web和Cauchy框架的交互逻辑为: Web PHP Framework | | | parameters --------&gt;| | | | | | train --------&gt;| | | | freeport | (8140-8199) | |---------------&gt;| | | | free_port | | |-----------------&gt;| start visdom.server process | | vis.port vis.pid | | |&lt;-----------------| (每一个user会对应一个visdom进程) | | | | start_monitor , connnect visdom | |----------------------------------&gt;| | | | | starttrain | | |---------------&gt;| | | | train | | |-----------------&gt;| start train task process | | | | | | | | | stop --------&gt;| | | | stroptrain | | |---------------&gt;| | | | stop_train | | |-----------------&gt;| kill train task and visdom.server | | | 每个user对应一个visdom.server进程 唯一停止train进程的只有页面上的停止按钮 页面刷新或者退出重新登陆, 虽然后台框架仍在训练, 但页面没有记忆, 回复如初. 2 改进方案 启动一个visdom.server进程来管理多个后端(框架训练任务产出)和多个前端(数据传到UI显示), 即多用户共享一个 visdom.server进程, 假设端口为固定8186. 框架服务对多用户的任务进程进行维护, 当然每个用户实际上也可以启动多个训练任务, 所以框架管理进程最小单位不是 针对一个用户, 而是任务(包括测试/评估任务), 框架同时需要提供获取每个用户下的仍在继续训练的任务信息 taskinfo, 例如: project_id, task_pid, task_id等等 Web通过获取到当前用户下仍在训练任务信息taskinfo. 可以方便展示出来, 及时提醒用户, 比如, 用户刷新了页面 或者重新登陆了, 立刻提示仍在训练的任务, 并可以直接跳转到这些任务的训练情况页面, 跳转到这个页面后, 直接去连 接visdom.server:8186, 因为训练还在进行, 一旦连接上, 就会有数据继续显示. 改进后的交互逻辑 +-------------+ |visdom.server| | | Web PHP | Framework | PHP Web +-------------+ login | | | | | refresh ----&gt;| | | | | (USER-2) | gettaskinfo | | | | (USER-1) |------------&gt;| | | gettaskinfo |&lt;-------login | | get_task_info | |&lt;--------------| | |-------------------&gt;| get_task_info | | | | |&lt;-------------------| | display | |&lt;-------------------| | | taskinfo |&lt;------------| |-------------------&gt;| | display | | | |--------------&gt;| taskinfo | | | | | goto ----&gt;| | | | |(没有运行的任务) tabpage | connect to visdom.server | | | |---------------------------------&gt;| connect to visdom.server |&lt;-----train | | |&lt;-----------------------------------| | the newer trainning data | | starttrain | monitor |&lt;-------------------------------- | train |&lt;--------------| trainning | | |&lt;-------------------| | | | | | | monitor | | | the newer trainning data | monitor | | |-----------------------------------&gt;| trainning | | | | | | | | | | 3 代码 每个任务分配一个task_id, 唯一的标示任务, 在页面上我的项目里面可以创建多个项目每个项目对应一个 project_id, 简单设计的话, task_id等于project_id, 意味着同一个项目不能同时启动两个不同的任务, 即不能 一边训练,一边测试/评估, 保险一些的话, 让task_id = user_id + project_id, 保证全局(all users)唯一. 用户项目创建之后, task_id唯一定了, 在启动任务连接visdom.server时, 创建socket就将这个task_id传递到 visdom.server中, 取代原有的sid. 同时, task_id也会下发到framework中, framework启动train, 建立visdom客户端, 将task_id作为参数去 构造vimsdom, 那么这个task_id就是纽带一样将后端(visdom客户端)和前端(websocket客户端)联系在一起. 3.1 Visdom Client py/visdom/__init__.py: class Visdom(object): def __init__( self, server=&#39;http://localhost&#39;, endpoint=&#39;events&#39;, port=8097, base_url=&#39;/&#39;, ipv6=True, http_proxy_host=None, http_proxy_port=None, env=&#39;main&#39;, send=True, raise_exceptions=None, use_incoming_socket=True, log_to_filename=None, username=None, password=None, proxies=None, task_id=None, # qrs: 增加一个task_id参数 ): ... # Utils def _send(self, msg, endpoint=&#39;events&#39;, quiet=False, from_log=False): ... # qrs: 框架使用所有的绘制api最终都这, 所以消息中加个task_id(传到visdom.server) if self.task_id is not None: msg[&#39;task_id&#39;] = self.task_id try: r = self.session.post( &quot;{0}:{1}{2}/{3}&quot;.format(self.server, self.port, self.base_url, endpoint), data=json.dumps(msg), ) ... return r.text except requests.RequestException: ... 3.2 WebSocket Client basic/views/cauchy/train.php: function initsocket(type,ip,port,task_id){ try { # qrs: 与visdom.server建立连接时将task_id传递到visdom.server中 socket = new WebSocket(&#39;ws://&#39; + ip + &#39;:&#39;+port+&#39;/socket?task_id=&#39;+task_id); ... socket.onopen = function(evt) { }; socket.onerror = function(evt){ }; socket.onmessage = function(evt){ }; } ... 3.3 Visdom Server py/visdom/server.py: # Websocket客户端connect visdom.server class SocketHandler(BaseWebSocketHandler): ... def open(self): if self.login_enabled and not self.current_user: print(&quot;AUTH Failed in SocketHandler&quot;) self.close() return # qrs: Web连接时, 传递`task_id`作为sid, 最终放到全局subs列表中 sid_ = self.get_arguments(&#39;task_id&#39;) if sid_ is None: self.sid = str(hex(int(time.time() * 10000000))[2:]) else: self.sid = sid_[0] if self not in list(self.subs.values()): self.eid = &#39;main&#39; self.subs[self.sid] = self logging.info( &#39;Opened new socket from ip: {}&#39;.format(self.request.remote_ip)) ... # visdom客户端post训练数据时到visdom.server class PostHandler(BaseHandler): class UpdateHandler(BaseHandler): ... @check_auth def post(self): ... args = tornado.escape.json_decode( tornado.escape.to_basestring(self.request.body) ) # qrs: /events,/update的消息 self.task_id = req.get(&#39;task_id&#39;) ... # 广播数据到WebSocket客户端, Cauchy是一对一没必要广播, 转发到对应的task_id端 def broadcast(self, msg, eid): # qrs: self是PostHandler,UpdateHandler, 判断是否含有task_id task_id = getattr(self, &#39;task_id&#39;, None) if task_id is None: for s in self.subs: if type(self.subs[s].eid) is list: if eid in self.subs[s].eid: self.subs[s].write_message(msg) else: if self.subs[s].eid == eid: self.subs[s].write_message(msg) else: # qrs: 如果有task_id, 将数据转发到web端. if task_id in self.subs: if type(self.subs[task_id].eid) is list: if eid in self.subs[task_id].eid: self.subs[task_id].write_message(msg) else: if self.subs[task_id].eid == eid: self.subs[task_id].write_message(msg) 4 测试 在测试服务器上测试, 方案可行.","tags":[{"name":"Cauchy","slug":"Cauchy","permalink":"https://qrsforever.github.io/tags/Cauchy/"}]},{"title":"Visdom原理","date":"2019-09-03T05:20:08.000Z","path":"2019/09/03/Note/AI/visdom/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ Visdom How to Talk with DrawIt Conclution 1 Visdom Visdom aims to facilitate visualization of (remote) data with an emphasis on supporting scientific experimentation. 基本使用介绍可以到官网查看, 本文主要重点放在解决以下疑惑: Backend产生的数据(json)如何提供给Frontend ? 如何支持多个Backend和多个Frontend之间的交互? Frontend收到的数据(json)如何以窗格(pane)形式展示出? Frontend: 前端UI对数据展示, Backend: 生产数据的一端, 比如机器学习过程中产生的数据, loss, acc等. 2 How to Talk with 下载Visdom源码之后, 粗略看了一下文件, Visdom完成可视化的方式由三部分组成, 分别为: js: 前端app客户端, visdom/js目录下(注意这些文件最后安装时会meld到一个main.js里) visdom/js/ ├── EmbeddingsPane.js ├── EventSystem.js ├── ImagePane.js ├── lasso.js ├── main.js ├── Pane.js ├── PlotPane.js ├── PropertiesPane.js ├── TextPane.js └── Width.js Pane翻译为\"窗格\", UI展示都是一个一个小方格形式, 内容都在方格内体现, 从文件名可以大概知道支持 embeddings(词向量), image, plot, text等组件类型. 每个pane类型都是使用react组件化渲染, 关于react可到官网了解更多, 我们暂且简单认为, 每个组 件都有rander()方法用来接受输入的数据和返回需要展示的内容, 例如main.js: const PANES = { image: ImagePane, image_history: ImagePane, plot: PlotPane, text: TextPane, properties: PropertiesPane, embeddings: EmbeddingsPane, }; class App extends React.Component { ... ... render() { let panes = Object.keys(this.state.panes).map(id =&gt; { let pane = this.state.panes[id]; ... let Comp = PANES[pane.type]; ... return ( &lt;div key={pane.id} className={isVisible ? &#39;&#39; : &#39;hidden-window&#39;}&gt; &lt;ReactResizeDetector handleWidth handleHeight&gt; &lt;Comp {...pane} key={pane.id} ... /&gt; &lt;/ReactResizeDetector&gt; &lt;/div&gt; ); ... } 上面的代码意思是从state.panes中获取到一个pane, 根据pane类型选择对应的pane组件, 且把pane参数传入组件. visdom: 后端visdom客户端, visdom/py/visdom/__init__.py提供各种绘制API以及与visdom.server连接建立等. 把visdom作为client类,在backend端使用, 与visdom.server建立连接, visdom实例通过绘制api将raw数据(json)封装 打包发到visdom.server中, 再由visdom.server进行转发. 列出一些方法: +text : function +matplot : function +embeddings : function +image : function +audio : function +video : function +scatter : function +line : function +heatmap : function +bar : function +histogram : function +boxplot : function +pie : function +mesh : function 这些方法封装了json原始数据结构,对外屏蔽细节, 这些json数据转发到js端, 需要被js认得, 其实js使用到了 plot.ly. visdom.server: 中转服务端, visdom/py/visdom/server.py, 接收并转发数据, js客户端和visdom客户端的转接桥梁. 基于tornadowebweb框架, 维护所有client端的状态信息, 服务初始化的过程中注册了与client端交互 (uri)的所有handlers, 这些handlers分为两大类,一类给visdom client端使用, 一类给js client端使用, 并且所有 visdom client的连接记录在Application.sources, 所有js client的连接记录在Application.subs, 有了这两个记 录数据从哪到哪转发就容易做到了. 列出handlers: class Application(tornado.web.Application): ... self.state = self.load_state() self.layouts = self.load_layouts() self.subs = {} self.sources = {} self.port = port ... handlers = [ (r&quot;%s/events&quot; % self.base_url, PostHandler, {&#39;app&#39;: self}), (r&quot;%s/update&quot; % self.base_url, UpdateHandler, {&#39;app&#39;: self}), (r&quot;%s/close&quot; % self.base_url, CloseHandler, {&#39;app&#39;: self}), (r&quot;%s/socket&quot; % self.base_url, SocketHandler, {&#39;app&#39;: self}), (r&quot;%s/socket_wrap&quot; % self.base_url, SocketWrap, {&#39;app&#39;: self}), (r&quot;%s/vis_socket&quot; % self.base_url, VisSocketHandler, {&#39;app&#39;: self}), (r&quot;%s/vis_socket_wrap&quot; % self.base_url, VisSocketWrap, {&#39;app&#39;: self}), (r&quot;%s/env/(.*)&quot; % self.base_url, EnvHandler, {&#39;app&#39;: self}), (r&quot;%s/compare/(.*)&quot; % self.base_url, CompareHandler, {&#39;app&#39;: self}), (r&quot;%s/save&quot; % self.base_url, SaveHandler, {&#39;app&#39;: self}), (r&quot;%s/error/(.*)&quot; % self.base_url, ErrorHandler, {&#39;app&#39;: self}), (r&quot;%s/win_exists&quot; % self.base_url, ExistsHandler, {&#39;app&#39;: self}), (r&quot;%s/win_data&quot; % self.base_url, DataHandler, {&#39;app&#39;: self}), (r&quot;%s/delete_env&quot; % self.base_url, DeleteEnvHandler, {&#39;app&#39;: self}), (r&quot;%s/win_hash&quot; % self.base_url, HashHandler, {&#39;app&#39;: self}), (r&quot;%s/env_state&quot; % self.base_url, EnvStateHandler, {&#39;app&#39;: self}), (r&quot;%s/fork_env&quot; % self.base_url, ForkEnvHandler, {&#39;app&#39;: self}), (r&quot;%s(.*)&quot; % self.base_url, IndexHandler, {&#39;app&#39;: self}), ] 3 DrawIt server端: souces(数据源)记录所有visdom clients, subs(订阅者)记录所有js clients +------------------------------------------------------------------------------+ | | 处 | state | 处 | | layouts | | 理 | | | | SocketHandler | 理 | VisSocketHandler | | | SocketWrap | Backend | VisSocketWrap | &lt;---- visdom.server ----&gt; | SaveHandler | Frontend | PostHandler | / \\ | DataHandler | | UpdateHandler | / \\ | EnvStateHandler | | / \\ IndexHandler | | sources &lt;--- ---&gt; subs | | | | port | +------------------------------------------------------------------------------+ ^ ^ / \\ / \\ / \\ / /vis_socket[_wrap] /socket[_wrap] \\ / \\ /update /events / \\ / \\ / \\ / /update /env_state \\ +--------------------+ +-------------------+ | visdom client | | js client | |--------------------| | ------------------| | text | | TextPane | | image | | ImagePane | | matplot | | PlotPane | | scatter | | EmbeddingsPane | +--------------------+ +-------------------+ 4 Conclution Frontend, Backend, 以及visdom.server之间通过socket通讯, visdom.server作为他们的中转管理者. Backend的json数据到了Frontend能够以panes展示出来是靠plot.ly库, json数据结构很重要. 最新visdom源码加了polling机制.","tags":[{"name":"AI","slug":"AI","permalink":"https://qrsforever.github.io/tags/AI/"}]},{"title":"框架运行docker设计","date":"2019-08-31T05:53:32.000Z","path":"2019/08/31/Company/Cauthy/how_run/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 如何启动框架 三层镜像 制作镜像 制作第二层 制作第三层 简单总结 补充 1 如何启动框架 框架的部署使用docker, docker依赖镜像, 从缩短部署时间和减少带宽浪费的角度设计, 我们的框架使用三层镜像, 未来 框架足够稳定, 可以做一个完整的镜像\"pull\"镜像服务器上, 先介绍三层镜像构建和启动. 在介绍之前先把常用的docker命令做个Alias, 后面一些例子会用到. alias di=&#39;docker images&#39; alias dri=&#39;docker rmi&#39; # $(docker images -q)&#39; alias dc=&#39;docker container ls -a&#39; alias drc=&#39;docker container rm&#39; alias dsc=&#39;docker container stop&#39; alias dv=&#39;docker volume ls&#39; alias drv=&#39;docker volume rm&#39; alias dip=&#39;docker inspect --format=&quot;\\{\\{range .NetworkSettings.Networks\\}\\}\\{\\{.IPAddress\\}\\}\\{\\{end\\}\\}&quot;&#39; alias dit=&#39;docker run -it&#39; alias din=&#39;docker inspect&#39; alias dlg=&#39;docker logs --follow&#39; dsh() { args=($@) container=$1 bashcmd=${args[@]: 1:$# } docker exec $container bash -c &quot;$bashcmd&quot; } 2 三层镜像 cmd: colorai@10-255-0-185:~$ di output: 第三层: 咱们框架自身,排除三方库, 可以认为就是框架代码自身安装, 可能更新会频繁. ^ | | REPOSITORY | TAG IMAGE ID CREATED SIZE colorai/cauchycv_visdom | | 0.2.7 5d3ab89af6d4 15 hours ago 6.3GB colorai/cauchycv_visdom |----+ 0.2.6 98a757ed7816 16 hours ago 6.3GB colorai/cauchycv_visdom | 0.2.5 7148c78368fb 20 hours ago 6.3GB colorai/cauchycv_base latest 83c5742fc484 22 hours ago 6.06GB ufoym/deepo | pytorch-py36-cu90 242fdb23e0b0 5 months ago 4.53GB | | | +-----&gt; 第二层: 框架运行时依赖的第三方软件和必要工具, 基于第一层又加了不少, 更新不频繁 | | +---&gt; 第一层: 包含机器学习框架pytorch需要必要软件工具, 几乎不更新 有了第二层(本地镜像)的出现, 在更新第三层时, 就会少很多三方软件的安装, 节省时间和带宽. 3 制作镜像 先介绍一下, 版本信息的设计和存储方案, 为以后定位问题提供帮助. CauchyCV框架代码使用git管理, 所以很多信息是从git命令中获取. 例如: build_docker.sh中的部分代码: DATE=$(date -u +&#39;%Y-%m-%dT%H:%M:%SZ&#39;) VERSION=$(git describe --tags --always) URL=$(git config --get remote.origin.url) COMMIT=$(git rev-parse HEAD | cut -c 1-7) BRANCH=$(git rev-parse --abbrev-ref HEAD) TAG=&quot;0.2.$(git rev-list HEAD | wc -l | awk &#39;{print $1}&#39;)&quot; 分别提取出: 当前时间, 版本, 代码URL, 最后一次提交commit-id, 以及分支号, 还有TAG作为镜像的版本, 如0.2.7, 其中后面的7是代码所有提交的总个数, 是一个递增的数字. 所有这些变量会在build docker时传入到镜像的labels中. 3.1 制作第二层 比较简单, 基于第一层ufoym/deepo, 然后apt install 和 pip install安装框架需要的软件, 同时也安装咱们自 己维护的外部库, 这些外部库因为github上更新较为频繁, 对我 们调试开发会带来不可知的影响, 所以单独管理起来, 其中还包括vulcan. 提供了一个DockerFile.base文件, 构建第二层镜像直接指定这个文件即可, 不要忘了外部库要提前下载. 例如: build_docker.sh中的部分代码: base_image=colorai/cauchycv_base if [ ! -d external ] then git clone git@gitee.com:colorai/sig_cauchy_external.git external fi base_tag=`docker images -q $base_image:latest` if [[ x$base_tag == x ]] then echo &quot;build $base_image&quot; docker build --tag $base_image:latest \\ --build-arg DATE=$DATE \\ --file Dockerfile.base . fi 值得注意的是Base镜像指定的TAG版本固定为\"latest\", 即本地只会(或者要保证)有一个. 详细信息可查看DockerFile.base 3.2 制作第三层 框架层镜像一个重点就是描述好本镜像自身, 然后安装框架到镜像中即可, 如何把上面提到的版本信息保存在镜像中? Docker提供LABEL命令, 可以实现该功能, 先看看下面的实例(Dockerfile部分代码): LABEL maintainer=&quot;colorai@colorai.com&quot; ARG VENDOR=&quot;ColorAI&quot; ARG REPOSITORY ARG TAG ARG DATE ARG VERSION ARG URL ARG COMMIT ARG BRANCH LABEL org.label-schema.schema-version=&quot;1.0&quot; \\ org.label-schema.build-date=$DATE \\ org.label-schema.name=$REPOSITORY \\ org.label-schema.description=&quot;Computer Vision Backend for Cauchy&quot; \\ org.label-schema.url=https://www.colorai.com/index.php?r=front \\ org.label-schema.vcs-url=$URL \\ org.label-schema.vcs-ref=$COMMIT \\ org.label-schema.vcs-branch=$BRANCH \\ org.label-schema.vendor=$VENDOR \\ org.label-schema.version=$VERSION \\ org.label-schema.docker.cmd=&quot;docker run -d --name framework \\ --restart unless-stopped --volume /data:/data --network host --hostname colorai \\ --runtime nvidia --shm-size=2g --ulimit memlock=-1 --ulimit stack=67108864 \\ $REPOSITORY:$TAG python cauchy_services.py --port 8339&quot; ARG这一堆的变量是在build镜像时传递过来的, build_docker.sh中的部分代码: docker build --tag $REPOSITORY:$TAG \\ --build-arg REPOSITORY=$REPOSITORY \\ --build-arg TAG=$TAG \\ --build-arg DATE=$DATE \\ --build-arg VERSION=$VERSION \\ --build-arg URL=$URL \\ --build-arg COMMIT=$COMMIT \\ --build-arg BRANCH=$BRANCH \\ . 需要对org.label-schema.docker.cmd这个label说明一下, 镜像建立好之后, 需要在该镜像的Container上运行咱们 的框架, 如何运行呢, 不同的框架版本是不是运行的命令和参数不一样, 如果框架版本越来越多, 我如何快速的知道如何 运行指定版本的框架(执行的命令和参数是什么), 当然我们可以通过org.label-schema.version和 org.label-schema.vcs-ref确定如何执行该container. 为了更简单快捷, 加了一个org.label-schema.docker.cmd 参数,它的值表示为推荐执行该container的命令, 这里用推荐二字, 是因为不是必须的. 建立好镜像后, 如何查看: command: din 5d3ab89af6d4 --format '\\{\\{json .ContainerConfig.Labels\\}\\}' | python -m json.tool output: { &quot;com.nvidia.cuda.version&quot;: &quot;9.0.176&quot;, &quot;com.nvidia.cudnn.version&quot;: &quot;7.4.2.24&quot;, &quot;com.nvidia.volumes.needed&quot;: &quot;nvidia_driver&quot;, &quot;maintainer&quot;: &quot;colorai@colorai.com&quot;, &quot;org.label-schema.build-date&quot;: &quot;2019-08-30T14:46:20Z&quot;, &quot;org.label-schema.description&quot;: &quot;Computer Vision Backend for Cauchy&quot;, &quot;org.label-schema.docker.cmd&quot;: &quot;docker run -d --name cauchy_service --restart unless-stopped --volume /data:/data --network host --hostname colorai --runtime nvidia --shm-size=2g --ulimit memlock=-1 --ulimit stack=67108864 colorai/cauchycv_visdom:0.2.7 python cauchy_services.py --port 8339&quot;, &quot;org.label-schema.name&quot;: &quot;colorai/cauchycv_visdom&quot;, &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;, &quot;org.label-schema.url&quot;: &quot;https://www.colorai.com/index.php?r=front&quot;, &quot;org.label-schema.vcs-branch&quot;: &quot;master&quot;, &quot;org.label-schema.vcs-ref&quot;: &quot;bbe9a6a&quot;, &quot;org.label-schema.vcs-url&quot;: &quot;git@gitee.com:colorai/sig_cauchy_cv.git&quot;, &quot;org.label-schema.vendor&quot;: &quot;ColorAI&quot;, &quot;org.label-schema.version&quot;: &quot;bbe9a6a&quot; } 另外提供了一个start_docker.sh脚本用来启动container, 脚本中我会提取出org.label-schema.docker.cmd直 接执行. 例如: start_docker.sh中的部分代码: cmd=$(docker inspect ${items[$select]} --format &#39;\\{\\{index .ContainerConfig.Labels &quot;org.label-schema.docker.cmd&quot;\\}\\}&#39;) if [[ x$cmd != x ]] then $cmd else echo &quot;not found command in org.label-schema.docker.cmd&quot; fi 详细信息可查看DockerFile 4 简单总结 创建镜像build_docker.sh 先判断是否已经创建了cauchycv_base(第二层镜像), 如果已经创建了, 直接创建colorai/cauchycv_xxx(第三 层镜像). 运行镜像start_docker.sh 先获取docker中有多少个Cauchy框架镜像, 如果有多个, 提示选择使用哪个版本, 然后判断该版本的cauchy服务是否 已经启动, 如果已经启动则直接退出, 接着判断是否已经启动了其他版本的cauchy服务, 如果启动了, 停止掉他们, 因为启动的服务现在使用的network为host, 已启动的cauchy服务器已经把端口暂用了, 最后从对应版本的label中获 取到推荐用的org.label-schema.docker.cmd执行服务器的命令, 直接执行. 5 补充 启动cauchy服务(container)命令参数的介绍: docker run -d \\ # d: 后台运行 --name cauchy_service \\ # container 名字, 可用于display和filter --restart unless-stopped \\ # 重启机制: unless-stopped, 只要不是手动停止, 无论服务怎么退出的, 都会重新启动, 即使host系统reboot --volume /data:/data \\ # 共享文件, 将host机的/data/映射到container中/data目录 --network host --hostname colorai \\ # 采用host方式的网络, 即使用host机的网络栈, 主机名为colorai --runtime nvidia \\ # 运行时状态为GPU容器, GPU程序可以执行 --shm-size=2g \\ # 共享内存2GB --ulimit memlock=-1 \\ # 进程资源限制: 最大锁定内存地址空间，-1表示不限制 --ulimit stack=67108864 \\ # 进程资源限制: 栈最大64MB colorai/cauchycv_visdom:0.2.7 \\ # 容器运行在哪个镜像里 python cauchy_services.py --port 8339 # 在容器里执行的程序 共享目录/data,这也是重启容器时不会影响到的目录: /data ├── aicron.sh # 定时check任务脚本, 由/etc/crontab驱动, 目前只有启动&quot;预置权重http服务&quot; ├── checkpoints # 客户训练模型时checkpoints目录 ├── datasets # 常用的数据集 ├── pretrained_models # Internet上已经训练好的模型参数 └── projects # 客户训练模型时产生的中间文件,如log 6 附件: build_docker.sh #!/bin/bash base_image=colorai/cauchycv_base export LANG=&quot;en_US.utf8&quot; DATE=$(date -u +&#39;%Y-%m-%dT%H:%M:%SZ&#39;) VERSION=$(git describe --tags --always) URL=$(git config --get remote.origin.url) COMMIT=$(git rev-parse HEAD | cut -c 1-7) BRANCH=$(git rev-parse --abbrev-ref HEAD) REPOSITORY=&quot;colorai/cauchycv_visdom&quot; TAG=&quot;0.2.$(git rev-list HEAD | wc -l | awk &#39;{print $1}&#39;)&quot; echo &quot;DATE: $DATE&quot; echo &quot;VERSION: $VERSION&quot; echo &quot;URL: $URL&quot; echo &quot;COMMIT: $COMMIT&quot; echo &quot;BRANCH: $BRANCH&quot; echo &quot;IMAGE: $REPOSITORY:$TAG&quot; if [ ! -d external ] then git clone git@gitee.com:colorai/sig_cauchy_external.git external fi base_tag=`docker images -q $base_image:latest` if [[ x$base_tag == x ]] then echo &quot;build $base_image&quot; docker build --tag $base_image:latest \\ --build-arg DATE=$DATE \\ --file Dockerfile.base . fi docker build --tag $REPOSITORY:$TAG \\ --build-arg REPOSITORY=$REPOSITORY \\ --build-arg TAG=$TAG \\ --build-arg DATE=$DATE \\ --build-arg VERSION=$VERSION \\ --build-arg URL=$URL \\ --build-arg COMMIT=$COMMIT \\ --build-arg BRANCH=$BRANCH \\ start_docker.sh #!/bin/bash items=($(docker images --filter &quot;label=org.label-schema.vendor=ColorAI&quot; --format &quot;\\{\\{.Repository\\}\\}:\\{\\{.Tag\\}\\}&quot;)) count=$\\{\\#items[@]} if (( $count == 0 )) then echo &quot;not found correct image!&quot; exit 0 fi if (( $count &gt; 1 )) then i=0 while (( i &lt; $count )) do echo &quot;$i. ${items[$i]}&quot; (( i = i + 1 )) done echo -n &quot;Select: &quot; read select else select=0 fi echo &quot;use image: ${items[$select]}&quot; container=`docker container ls --filter ancestor=${items[$select]} --filter status=running -q` if [[ x$container != x ]] then echo &quot;${items[$select]}: $container already start, you can stop/remove it before start&quot; exit 0 fi containers=(`docker container ls --filter name=cauchy_service --filter status=running -q`) for c in $containers do echo &quot;stop $c&quot; docker container stop $c done docker inspect ${items[$select]} --format &#39;\\{\\{json .ContainerConfig.Labels\\}\\}&#39; | python -m json.tool cmd=$(docker inspect ${items[$select]} --format &#39;\\{\\{index .ContainerConfig.Labels &quot;org.label-schema.docker.cmd&quot;\\}\\}&#39;) if [[ x$cmd != x ]] then $cmd else echo &quot;not found command in org.label-schema.docker.cmd&quot; fi","tags":[{"name":"Cauchy","slug":"Cauchy","permalink":"https://qrsforever.github.io/tags/Cauchy/"}]},{"title":"Dorcker","date":"2019-08-28T13:23:39.000Z","path":"2019/08/28/Tutorial/docker/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ Install What Dockerfile Containers Networks Restart Policy Alias Command Search image Download image Rename image name Display image or container information Display information using index Filter label and format it Display container running state Display container by image, tag and status Display the command in runtime Remove all containers with status=exited Stop all containers Run and attach to container Pass environment variables to docker Remove all docker images Bind local folder the docker folder on docker run See logs in container Backup/Restore of container Copy and paste files Binding ports Adding Metadata Named/Path Based Volumes Named Volumn Path Volumn Expose port Composer install yaml TODO References 1 Install docker-ce: 官网 command: wget -qO- https://get.docker.com/ | sh # without sudo run sudo usermod -aG docker $USER # or sudo gpasswd -a $USER docker newgrp docker # 当前终端有效, reboot可以解决 nvidia-docker: 官网 command: curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\ sudo apt-key add - distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\ sudo tee /etc/apt/sources.list.d/nvidia-docker.list sudo apt-get update sudo apt-get install nvidia-docker2 sudo pkill -SIGHUP dockerd sudo /etc/init.d/docker restart 2 What 2.1 Dockerfile A Dockerfile is a file that you create which in turn produces a Docker image when you build it. A Dockerfile is a recipe for building Docker images, and the act of running a separate build command produces the Docker image from that recipe. In the world of object oriented programming, you often deal with classes. You can think of a Docker image as a class, where as a Docker container is an instance of that class. 1 将docker image比作class, container比作instance不准确, 但足够理解 2.2 Containers A Docker container is just a process / service that runs directly on your machine. It is slightly different than a regular process because the Docker daemon along with the Linux kernel do a few things to ensure it runs in total isolation. A virtual machine is typically used to isolate an entire system. 2 2.3 Networks Display docker networks supported now: docker network ls NETWORK ID NAME DRIVER SCOPE 69dc7a923543 bridge bridge local ad480746c437 host host local a5eec5e58ba1 none null local none 没有网络,挂在这个网络下的容器除了lo,没有其他任何网卡, 用于隔离. host 共享Docker宿主机的网络栈,即容器的网络配置与host宿主机完全一样, 如果容器对网络传输效率有较高要求即性 能高,则可以选择host网络, 但需要注意端口冲突问题 bridge Docker默认方式 Docker在安装时会在宿主机上创建名为docker0的网桥,所谓网桥相当于一个虚拟交换机.容器和docker0之间通过 veth进行连接,veth相当于一根虚拟网线,连接容器和虚拟交换机,这样就使得docker0与容器连通了. 例子: docker run --rm -d --network host --name my_nginx nginx 自定义网络 官网 2.4 Restart Policy 有时开机自动启动container, 或者某个container挂掉之后能够自动重启. 如何选择最好的重启策略 Policy Descriptor none 不自动重启(默认) on-failures 当错误退出时重启 always container停止时就重启, 系统reboot也会启动 unless-stopped 手动stop后, 系统reboot不会启动, 其他和always一样 有时我们停止container或者docker,或者reboot系统是为了某些更新, 所以不需要重启container,此时unless-stopped 很有用 例如: docker run -dit --restart unless-stopped redis docker run --restart on-failure:10 redis 10: 尝试重启最大次数10次 更多 官网 3 Alias alias di=&#39;docker images&#39; dirm() { if [[ x$1 == x ]] then docker images echo -ne &quot;\\n[RM] Input ID: &quot; read image else image=$@ fi docker rmi $image } alias dc=&#39;docker container ls -a&#39; dcrm() { if [[ x$1 == x ]] then docker container ls -a echo -ne &quot;\\n[RM] Input ID: &quot; read container else container=$@ fi docker container stop $container docker container rm $container } alias dcrma=&#39;docker container prune&#39; alias dcstart=&#39;docker container start&#39; alias dcstop=&#39;docker container stop&#39; alias dv=&#39;docker volume ls&#39; alias dvrm=&#39;docker volume rm&#39; drun() { args=($@) image=$1 if [[ x$image == x ]] || [[ x$image != x &amp;&amp; &quot;$\\{\\#image}&quot; -ne &quot;12&quot; then bashcmd=$image docker images echo -ne &quot;\\n[RUN] Input ID: &quot; read image else bashcmd=${args[@]: 1:$\\#\\} fi docker run -it -d $image $bashcmd } dsh() { if [[ x$1 == x ]] then docker container ls echo -ne &quot;\\n[SH] Input ID: &quot; read container else container=$1 fi docker exec -it $container bash } dlog() { if [[ x$1 == x ]] then docker container ls echo -ne &quot;\\n[LOG] Input ID: &quot; read container else container=$1 fi docker logs --timestamps --follow $container } dexe() { args=($@) container=$1 if [ &quot;$\\{\\#container}&quot; -eq &quot;12&quot; ] then bashcmd=${args[@]: 1:$\\#\\} docker exec $container bash -c &quot;$bashcmd&quot; else docker container ls echo -ne &quot;\\n[SH] Input ID: &quot; read container echo &quot;&quot; docker exec $container bash -c &quot;$@&quot; fi } dip() { container=$1 if [ &quot;$\\{\\#container}&quot; -ne &quot;12&quot; ] then docker container ls echo -ne &quot;\\n[IP] Input ID: &quot; read container fi docker inspect --format=&quot;\\{\\{range .NetworkSettings.Networks\\}\\}\\{\\{.IPAddress\\}\\}\\{\\{end\\}\\}&quot; $container } 4 Command 4.1 Search image cmd: docker search hadoop 4.2 Download image cmd: docker pull debian 4.3 Rename image name cmd: docker image tag &lt;source:tag&gt; &lt;target:tag&gt; 只是建立了软链接, 源image不会被删除, 如果强制(-f)删除source:tag源, target:tag也会删除 4.4 Display image or container information cmd: docker inspect 4cd81e734bd8 --format '\\{\\{json .ContainerConfig.Labels\\}\\}' | python -m json.tool cmd: docker inspect 4cd81e734bd8 --format '\\{\\{json .ContainerConfig.Labels\\}\\}' | jq output: { &quot;com.nvidia.cuda.version&quot;: &quot;9.0.176&quot;, &quot;com.nvidia.cudnn.version&quot;: &quot;7.4.2.24&quot;, &quot;com.nvidia.volumes.needed&quot;: &quot;nvidia_driver&quot;, &quot;maintainer&quot;: &quot;colorai@colorai.com&quot;, &quot;org.label-schema.build-date&quot;: &quot;2019-08-30T13:46:14Z&quot;, &quot;org.label-schema.description&quot;: &quot;Computer Vision Backend for Cauchy&quot;, &quot;org.label-schema.docker.cmd&quot;: &quot;docker run -d --name colorai/cauchycv_visdom --restart unless-stopped --volume /data:/data --network host --hostname colorai--runtime nvidia -shm-size=2g --ulimit memlock=-1 --ulimit stack=67108864 colorai/cauchycv_visdom:0.2.6 python cauchy_services.py --port 8339&quot;, &quot;org.label-schema.name&quot;: &quot;colorai/cauchycv_visdom&quot;, &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;, &quot;org.label-schema.url&quot;: &quot;https://www.colorai.com/index.php?r=front&quot;, &quot;org.label-schema.vcs-branch&quot;: &quot;master&quot;, &quot;org.label-schema.vcs-ref&quot;: &quot;1efa1f1&quot;, &quot;org.label-schema.vcs-url&quot;: &quot;git@gitee.com:colorai/sig_cauchy_cv.git&quot;, &quot;org.label-schema.vendor&quot;: &quot;ColorAI&quot;, &quot;org.label-schema.version&quot;: &quot;1efa1f1&quot; } 4.5 Display information using index cmd: docker inspect 98a757ed7816 --format '\\{\\{index .ContainerConfig.Labels \"org.label-schema.docker.cmd\"\\}\\}' 如果读取的key有'.'等复杂的情况, 可使用'index'命令 4.6 Filter label and format it cmd: docker images --filter \"label=org.label-schema.vendor=ColorAI\" --format \"\\{\\{.Repository\\}\\}:\\{\\{.Tag\\}\\}\" output: colorai/cauchycv_visdom:0.2.6 colorai/cauchycv_visdom:0.2.5 4.7 Display container running state cmd: docker inspect 3dd6dccbce14 --format '\\{\\{json .State\\}\\}' | python -m json.tool { &quot;Dead&quot;: false, &quot;Error&quot;: &quot;&quot;, &quot;ExitCode&quot;: 0, &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;, &quot;OOMKilled&quot;: false, &quot;Paused&quot;: false, &quot;Pid&quot;: 27140, &quot;Restarting&quot;: false, &quot;Running&quot;: true, &quot;StartedAt&quot;: &quot;2019-08-30T14:38:14.321067445Z&quot;, &quot;Status&quot;: &quot;running&quot; } 4.8 Display container by image, tag and status cmd: docker container ls --filter ancestor=colorai/cauchycv_visdom:0.2.6 --filter status=running 4.9 Display the command in runtime cmd: docker container ls --format \"\\{\\{.ID\\}\\}: \\{\\{.Command\\}\\}\" --no-trunc cmd: docker container ls --format \"table \\{\\{.ID\\}\\}\\t\\{\\{.Labels\\}\\}\" 4.10 Remove all containers with status=exited cmd: docker rm $(docker ps -q -f status=exited) 4.11 Stop all containers cmd: docker stop $(docker ps -aq) 4.12 Run and attach to container Every time with using docker run will create new container with specified image. Use option --rm so container will removed after it finishes. cmd: docker run -it --rm &lt;image_name&gt; &lt;commoand&gt; 4.13 Pass environment variables to docker cmd: docker run -it -e TEST=1234 --env TEST1=3456 --rm alpine /bin/ash cmd: docker run -it --env-file ./env.list alpine /bin/ash evn.file: TEST=1234 TEST1=5678 4.14 Remove all docker images cmd: docker rmi $(docker images -q) 4.15 Bind local folder the docker folder on docker run cmd: docker run -it -v /LOCAL_PATH:/CONTAINER_PATH &lt;container_image&gt; 4.16 See logs in container cmd: docker logs --follow &lt;CONTAINER&gt; cmd: docker logs --timestamps --tail 1000 &lt;CONTAINER&gt; 2&gt;&amp;1 | grep -i error cmd: docker inspect --format='\\{\\{.LogPath\\}\\}' &lt;CONTAINER&gt; 4.17 Backup/Restore of container cmd: docker commit -p &lt;CONTAINER_ID&gt; &lt;YOUR_BACKUP_NAME&gt; docker save -o &lt;CONTAINER_FILE&gt;.tar &lt;YOUR_BACKUP_NAME&gt; docker load -i &lt;CONTAINER_FILE&gt;.tar 4.18 Copy and paste files at compile(build) time Dockerfile COPY script.sh /tmp ADD script.sh /tmp ADD scripts.tar.gz /tmp ADD http://www.example.com/script.sh /tmp at runtime # from host docker cp script.sh container_name:/tmp/ docker exec -it container_name bash -c &#39;tree -a /tmp&#39; # to host docker cp container_name:/tmp/. . 4.19 Binding ports host port: 8080 container port: 80 cmd: sudo docker run --name docker-nginx -p 8080:80 -d -v /docker-nginx/html:/usr/share/nginx/html nginx 4.20 Adding Metadata Docker Labels allow you to specify metadata for Docker objects such as Images, Containers, Volumes etc, that will be packaged in to their specific formats. We are interested in how we can leverage Labels for Docker Images. # Dockerfile LABEL version=&quot;1.0&quot; maintainer=&quot;colorai &lt;colorai@colorai.com&gt;&quot; LABEL build_date=&quot;2017-09-05&quot; # Command docker build . --label &quot;version=1.0&quot; --label &quot;maintaner=colorai &lt;colorai@colorai.com&gt;&quot; 使用docker inspect可查看metadata 实例: 标准形式label-schema DATE=$(date -u +&#39;%Y-%m-%dT%H:%M:%SZ&#39;) VERSION=$(git describe --tags --always) URL=$(git config --get remote.origin.url) COMMIT=$(git rev-parse HEAD | cut -c 1-7) BRANCH=$(git rev-parse --abbrev-ref HEAD) REPOSITORY=&quot;test&quot; TAG=&quot;0.2.$(git rev-list HEAD | wc -l | awk &#39;{print $1}&#39;)&quot; docker build --tag $REPOSITORY:$TAG \\ --build-arg REPOSITORY=$REPOSITORY \\ --build-arg TAG=$TAG \\ --build-arg DATE=$DATE \\ --build-arg VERSION=$VERSION \\ --build-arg URL=$URL \\ --build-arg COMMIT=$COMMIT \\ --build-arg BRANCH=$BRANCH \\ Dockerfile: LABEL maintainer=&quot;colorai@colorai.com&quot; ARG VENDOR=&quot;ColorAI&quot; ARG REPOSITORY ARG TAG ARG DATE ARG VERSION ARG URL ARG COMMIT ARG BRANCH LABEL org.label-schema.schema-version=&quot;1.0&quot; \\ org.label-schema.build-date=$DATE \\ org.label-schema.name=$REPOSITORY \\ org.label-schema.description=&quot;Computer Vision Backend for Cauchy&quot; \\ org.label-schema.url=https://www.colorai.com/index.php?r=front \\ org.label-schema.vcs-url=$URL \\ org.label-schema.vcs-ref=$COMMIT \\ org.label-schema.vcs-branch=$BRANCH \\ org.label-schema.vendor=$VENDOR \\ org.label-schema.version=$VERSION \\ org.label-schema.docker.cmd=&quot;docker run -d --name framework \\ --restart unless-stopped --volume /data:/data --network host --hostname colorai \\ --runtime nvidia --shm-size=2g --ulimit memlock=-1 --ulimit stack=67108864 \\ $REPOSITORY:$TAG python cauchy_services.py --port 8339&quot; 4.21 Named/Path Based Volumes 用于实现容器与host共享数据, volume数据可以被永久的保存,即使使用它的容器已经销毁. list: docker volume ls [-q] delete: docker volume rm mydata delete all: docker volume prune 4.21.1 Named Volumn cmd: docker run -it -v mydata:/data debian, docker volume inspect mydata output: [ { &quot;CreatedAt&quot;: &quot;2019-08-29T14:42:54+08:00&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Labels&quot;: null, &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/mydata/_data&quot;, &quot;Name&quot;: &quot;mydata&quot;, &quot;Options&quot;: null, &quot;Scope&quot;: &quot;local&quot; } ] 4.21.2 Path Volumn (Mount) cmd: docker run -it -v /hostdata:/targetdata debian 参考 简书 5 Expose port 非常详细的讲解 推荐直接使用手动映射, 清晰明了. 参数: -P: 自动映射 -p: 手动映射, -p host_port:container_port 场景: (假设端口80) 情况一:暴露端口80,不使用映射 [ ] 主机地址:端口80 [x] 容器地址:端口80 情况二:暴露端口80,使用自动映射-P (假设随机映射的端口为8000) [ ] 主机地址:端口80 [x] 主机地址:端口8000 [x] 容器地址:端口80 情况三:暴露端口80,使用手动映射-p (假设手动映射的端口为8888:80) [x] 主机地址:端口8888 [x] 容器地址:端口80 情况四:不暴露端口,不使用映射 [ ] 主机地址:端口80 [x] 容器地址:端口80 情况五:不暴露端口,使用自动映射-P (无自动映射的端口) [ ] 主机地址:端口80 [x] 容器地址:端口80 情况六:不暴露端口,使用手动映射-p (假设手动映射的端口为8888:80) [x] 主机地址:端口8888 [x] 容器地址:端口80 6 Composer 6.1 install see docs.docker.com 6.2 yaml version # 指定 compose 文件的版本 services # 定义所有的 service 信息, services 下面的第一级别的 key 是一个 service 的名称 build # 指定包含构建上下文的路径, 或作为一个对象,该对象具有 context 和指定的 dockerfile 文件以及 args 参数值 context # context: 指定 Dockerfile 文件所在的路径 dockerfile # dockerfile: 指定 context 指定的目录下面的 Dockerfile 的名称(默认为 Dockerfile) args # args: Dockerfile 在 build 过程中需要的参数 (等同于 docker container build --build-arg 的作用) - xxx=xxx cache_from # v3.2中新增的参数, 指定缓存的镜像列表 (等同于 docker container build --cache_from 的作用) labels # v3.3中新增的参数, 设置镜像的元数据 (等同于 docker container build --labels 的作用) shm_size # v3.5中新增的参数, 设置容器 /dev/shm 分区的大小 (等同于 docker container build --shm-size 的作用) command # 覆盖容器启动后默认执行的命令, 支持 shell 格式和 [] 格式 configs # TODO cgroup_parent # TODO container_name # 指定容器的名称 (等同于 docker run --name 的作用) credential_spec # TODO deploy # v3 版本以上, 指定与部署和运行服务相关的配置, deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm endpoint_mode # v3.3 版本中新增的功能, 指定服务暴露的方式 vip # Docker 为该服务分配了一个虚拟 IP(VIP), 作为客户端的访问服务的地址 dnsrr # DNS轮询, Docker 为该服务设置 DNS 条目, 使得服务名称的 DNS 查询返回一个 IP 地址列表, 客户端直接访问其中的一个地址 labels # 指定服务的标签,这些标签仅在服务上设置 mode # 指定 deploy 的模式 global # 每个集群节点都只有一个容器 replicated # 用户可以指定集群中容器的数量(默认) placement # 不知道怎么用 replicas # deploy 的 mode 为 replicated 时, 指定容器副本的数量 resources # 资源限制 limits # 设置容器的资源限制 cpus: &quot;0.5&quot; # 设置该容器最多只能使用 50% 的 CPU memory: 50M # 设置该容器最多只能使用 50M 的内存空间 reservations # 设置为容器预留的系统资源(随时可用) cpus: &quot;0.2&quot; # 为该容器保留 20% 的 CPU memory: 20M # 为该容器保留 20M 的内存空间 restart_policy # 定义容器重启策略, 用于代替 restart 参数 condition # 定义容器重启策略(接受三个参数) none # 不尝试重启 on-failure # 只有当容器内部应用程序出现问题才会重启 any # 无论如何都会尝试重启(默认) delay # 尝试重启的间隔时间(默认为 0s) max_attempts # 尝试重启次数(默认一直尝试重启) window # 检查重启是否成功之前的等待时间(即如果容器启动了, 隔多少秒之后去检测容器是否正常, 默认 0s) update_config # 用于配置滚动更新配置 parallelism # 一次性更新的容器数量 delay # 更新一组容器之间的间隔时间 failure_action # 定义更新失败的策略 continue # 继续更新 rollback # 回滚更新 pause # 暂停更新(默认) monitor # 每次更新后的持续时间以监视更新是否失败(单位: ns|us|ms|s|m|h) (默认为0) max_failure_ratio # 回滚期间容忍的失败率(默认值为0) order # v3.4 版本中新增的参数, 回滚期间的操作顺序 stop-first # 旧任务在启动新任务之前停止(默认) start-first # 首先启动新任务, 并且正在运行的任务暂时重叠 rollback_config # v3.7 版本中新增的参数, 用于定义在 update_config 更新失败的回滚策略 parallelism # 一次回滚的容器数, 如果设置为0, 则所有容器同时回滚 delay # 每个组回滚之间的时间间隔(默认为0) failure_action # 定义回滚失败的策略 continue # 继续回滚 pause # 暂停回滚 monitor # 每次回滚任务后的持续时间以监视失败(单位: ns|us|ms|s|m|h) (默认为0) max_failure_ratio # 回滚期间容忍的失败率(默认值0) order # 回滚期间的操作顺序 stop-first # 旧任务在启动新任务之前停止(默认) start-first # 首先启动新任务, 并且正在运行的任务暂时重叠 devices # 指定设备映射列表 (等同于 docker run --device 的作用) depends_on # 定义容器启动顺序 (此选项解决了容器之间的依赖关系, 此选项在 v3 版本中 使用 swarm 部署时将忽略该选项) ##################################################################### # 示例: # 默认情况下使用 docker-compose up web 这样的方式启动 web 服务时,也会启动 redis 和 db 两个服务. # version: &#39;3&#39; # services: # web: # build: . # depends_on: # - db # - redis # redis: # image: redis # db: # image: postgres ##################################################################### dns # 设置 DNS 地址(等同于 docker run --dns 的作用) dns_search # 设置 DNS 搜索域(等同于 docker run --dns-search 的作用) tmpfs # v2 版本以上, 挂载目录到容器中, 作为容器的临时文件系统(等同于 docker run --tmpfs 的作用, 在使用 swarm 部署时将忽略该选项) entrypoint # 覆盖容器的默认 entrypoint 指令 (等同于 docker run --entrypoint 的作用) env_file # 从指定文件中读取变量设置为容器中的环境变量, 可以是单个值或者一个文件列表, 如果多个文件中的变量重名则后面的变量覆盖前面的变量, environment 的值覆盖 env_file 的值 - ./xxx.env environment # 设置环境变量, environment 的值可以覆盖 env_file 的值 (等同于 docker run --env 的作用) - xxx_env=xxx_val expose # 暴露端口, 但是不能和宿主机建立映射关系, 类似于 Dockerfile 的 EXPOSE 指令 external_links # 连接不在 docker-compose.yml 中定义的容器或者不在 compose 管理的容器(docker run 启动的容器, 在 v3 版本中使用 swarm 部署时将忽略该选项) extra_hosts # 添加 host 记录到容器中的 /etc/hosts 中 (等同于 docker run --add-host 的作用) healthcheck # v2.1 以上版本, 定义容器健康状态检查, 类似于 Dockerfile 的 HEALTHCHECK 指令 test # 检查容器检查状态的命令, 该选项必须是一个字符串或者列表, 第一项必须是 NONE, CMD 或 CMD-SHELL, 如果其是一个字符串则相当于 CMD-SHELL 加该字符串 NONE # 禁用容器的健康状态检测 CMD # test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;] CMD-SHELL # test: [&quot;CMD-SHELL&quot;, &quot;curl -f http://localhost || exit 1&quot;] 或者 test: curl -f https://localhost || exit 1 interval: 1m30s # 每次检查之间的间隔时间 timeout: 10s # 运行命令的超时时间 retries: 3 # 重试次数 start_period: 40s # v3.4 以上新增的选项, 定义容器启动时间间隔 disable: true # true 或 false, 表示是否禁用健康状态检测和 test: NONE 相同 image # 指定 docker 镜像, 可以是远程仓库镜像 本地镜像 init # v3.7 中新增的参数, true 或 false 表示是否在容器中运行一个 init, 它接收信号并传递给进程 isolation # 隔离容器技术, 在 Linux 中仅支持 default 值 labels # 使用 Docker 标签将元数据添加到容器, 与 Dockerfile 中的 LABELS 类似 links # 链接到其它服务中的容器, 该选项是 docker 历史遗留的选项, 目前已被用户自定义网络名称空间取代, 最终有可能被废弃 (在使用 swarm 部署时将忽略该选项) logging # 设置容器日志服务 driver # 指定日志记录驱动程序, 默认 json-file (等同于 docker run --log-driver 的作用) options # 指定日志的相关参数 (等同于 docker run --log-opt 的作用) max-size # 设置单个日志文件的大小, 当到达这个值后会进行日志滚动操作 max-file # 日志文件保留的数量 network_mode # 指定网络模式 (等同于 docker run --net 的作用, 在使用 swarm 部署时将忽略该选项) networks # 将容器加入指定网络 (等同于 docker network connect 的作用), networks 可以位于 compose 文件顶级键和 services 键的二级键 aliases # 同一网络上的容器可以使用服务名称或别名连接到其中一个服务的容器 ipv4_address # IP V4 格式 ipv6_address # IP V6 格式 ##################################################################### # 示例: # version: &#39;3.7&#39; # services: # test: # image: nginx:1.14-alpine # container_name: mynginx # command: ifconfig # networks: # app_net: # ipv4_address: 172.16.238.10 # networks: # app_net: # driver: bridge # ipam: # driver: default # config: # - subnet: 172.16.238.0/24 ##################################################################### pid: &#39;host&#39; # 共享宿主机的 进程空间(PID) ports # 建立宿主机和容器之间的端口映射关系, ports 支持两种语法格式 ##################################################################### # SHORT 语法格式示例: # - &quot;3000&quot; # 暴露容器的 3000 端口, 宿主机的端口由 docker 随机映射一个没有被占用的端口 # - &quot;3000-3005&quot; # 暴露容器的 3000 到 3005 端口, 宿主机的端口由 docker 随机映射没有被占用的端口 # - &quot;8000:8000&quot; # 容器的 8000 端口和宿主机的 8000 端口建立映射关系 # - &quot;9090-9091:8080-8081&quot; # - &quot;127.0.0.1:8001:8001&quot; # 指定映射宿主机的指定地址的 # - &quot;127.0.0.1:5000-5010:5000-5010&quot; # - &quot;6060:6060/udp&quot; # 指定协议 # LONG 语法格式示例:(v3.2) # ports: # target: 80 # 容器端口 # published: 8080 # 宿主机端口 # protocol: tcp # 协议类型 # mode: host # host 在每个节点上发布主机端口, ingress 对于群模式端口进行负载均衡 ##################################################################### secrets # 不知道怎么用 security_opt # 为每个容器覆盖默认的标签 (在使用 swarm 部署时将忽略该选项) stop_grace_period # 指定在发送了 SIGTERM 信号之后, 容器等待多少秒之后退出(默认 10s) stop_signal # 指定停止容器发送的信号 (默认为 SIGTERM 相当于 kill PID; SIGKILL 相当于 kill -9 PID; 在使用 swarm 部署时将忽略该选项) sysctls # 设置容器中的内核参数 (在使用 swarm 部署时将忽略该选项) ulimits # 设置容器的 limit userns_mode # 如果Docker守护程序配置了用户名称空间, 则禁用此服务的用户名称空间 (在使用 swarm 部署时将忽略该选项) volumes # 定义容器和宿主机的卷映射关系, 其和 networks 一样可以位于 services 键的二级键和 compose 顶级键, 如果需要跨服务间使用则在顶级键定义, 在 services 中引用 ##################################################################### # SHORT 语法格式示例: # volumes: # - /var/lib/mysql # 映射容器内的 /var/lib/mysql 到宿主机的一个随机目录中 # - /opt/data:/var/lib/mysql # 映射容器内的 /var/lib/mysql 到宿主机的 /opt/data # - ./cache:/tmp/cache # 映射容器内的 /var/lib/mysql 到宿主机 compose 文件所在的位置 # - ~/configs:/etc/configs/:ro # 映射容器宿主机的目录到容器中去, 权限只读 # - datavolume:/var/lib/mysql # datavolume 为 volumes 顶级键定义的目录, 在此处直接调用 # LONG 语法格式示例:(v3.2) # version: &quot;3.2&quot; # services: # web: # image: nginx:alpine # ports: # - &quot;80:80&quot; # volumes: # - type: volume # mount 的类型, 必须是 bind volume 或 tmpfs # source: mydata # 宿主机目录 # target: /data # 容器目录 # volume: # 配置额外的选项, 其 key 必须和 type 的值相同 # nocopy: true # volume 额外的选项, 在创建卷时禁用从容器复制数据 # - type: bind # volume 模式只指定容器路径即可, 宿主机路径随机生成; bind 需要指定容器和数据机的映射路径 # source: ./static # target: /opt/app/static # read_only: true # 设置文件系统为只读文件系统 ##################################################################### volumes: mydata: # 定义在 volume, 可在所有服务中调用 restart # 定义容器重启策略(在使用 swarm 部署时将忽略该选项, 在 swarm 使用 restart_policy 代替 restart) no # 禁止自动重启容器(默认) always # 无论如何容器都会重启 on-failure # 当出现 on-failure 报错时, 容器重新启动 domainname # TODO hostname # TODO ipc # TODO mac_address # TODO privileged # TODO read_only # TODO stdin_open # TODO tty # TODO user # TODO working_dir # TODO shm_size # TODO ##################################################################### # 对于值为时间的可接受的值(单位: us, ms, s, m, h): # 2.5s # 10s # 1m30s # 2h32m # 5h34m56s # 对于值为大小的可接受的值(单位: b, k, m, g 或者 kb, mb, gb): # 2b # 1024kb # 2048k # 300m # 1gb ##################################################################### networks # 定义 networks 信息 driver # 指定网络模式, 大多数情况下, 它 bridge 于单个主机和 overlay Swarm 上 bridge # Docker 默认使用 bridge 连接单个主机上的网络 overlay # overlay 驱动程序创建一个跨多个节点命名的网络 host # 共享主机网络名称空间(等同于 docker run --net=host) none # 等同于 docker run --net=none driver_opts # v3.2以上版本, 传递给驱动程序的参数, 这些参数取决于驱动程序 attachable # driver 为 overlay 时使用, 如果设置为 true 则除了服务之外,独立容器也可以附加到该网络; 如果独立容器连接到该网络,则它可以与其他 Docker 守护进程连接到的该网络的服务和独立容器进行通信 ipam # 自定义 IPAM 配置. 这是一个具有多个属性的对象, 每个属性都是可选的 driver # IPAM 驱动程序, bridge 或者 default config # 配置项 subnet # CIDR格式的子网,表示该网络的网段 external # 外部网络, 如果设置为 true 则 docker-compose up 不会尝试创建它, 如果它不存在则引发错误 name # v3.5 以上版本, 为此网络设置名称 7 TODO permissions: --user 8 References https://nickjanetakis.com/blog/tag/docker-tips-tricks-and-tutorials https://blog.codeship.com/ensuring-containers-are-always-running-with-dockers-restart-policy https://www.mankier.com/1/docker-container-ls https://www.centos.bz/2017/01/docker-ps-list-containers https://blog.csdn.net/u010918487/article/details/89452230 https://takacsmark.com/docker-compose-tutorial-beginners-by-example-basics https://www.cnblogs.com/hongdada/p/9488349.html https://nickjanetakis.com/blog/differences-between-a-dockerfile-docker-image-and-docker-container↩ https://nickjanetakis.com/blog/docker-tip-1-docker-containers-are-isolated-processes-not-virtual-machines↩","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"梯度消失,梯度爆炸","date":"2019-08-27T05:29:56.000Z","path":"2019/08/27/ML/Guide/vanishing_exploding_gradients/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 梯度不稳定 梯度消失 梯度爆炸 实例 解决办法 References 1 梯度不稳定 前面层上的梯度是来自于后面层上梯度的乘乘积.当存在过多的层次时,就出现了内在本质上的不稳定场景,如梯度消失和梯度爆炸. 1.1 梯度消失 vanishing gradient 当前面层的梯度比后面层的梯度变化更小, 会引起vanishing gradient. 1.2 梯度爆炸 exploding gradient 当前面层的梯度比后面层的梯度变化更大, 会引起exploding gradient. 2 实例 1个输入层, 3个隐藏层, 1个输出层, 激活函数为\\(\\sigma = sigmoid()\\) 为例: 简单神经元网络 \\[ \\begin{align*} a_1 &amp;= \\sigma(z_1 = w_1 x_0 + b_1) \\\\ a_2 &amp;= \\sigma(z_2 = w_2 a_1 + b_2) \\\\ a_3 &amp;= \\sigma(z_3 = w_3 a_2 + b_3) \\\\ a_4 &amp;= \\sigma(z_4 = w_4 a_3 + b_4) \\\\ C &amp;= Cost(a_4, y) \\end{align*} \\] 给出sigmoid函数以及导函数图: 然后计算梯度: \\[ \\begin{align*} \\dfrac{\\partial{C}}{\\partial{b_1}} &amp;= \\sigma(z_1)&#39; w_2 \\sigma(z_2)&#39; w_2 \\sigma(z_3)&#39; w_3 \\sigma(z_4)&#39; w_4 \\dfrac{\\partial{C}}{\\partial{a_4}} \\\\ \\dfrac{\\partial{C}}{\\partial{b_3}} &amp;= \\sigma(z_3)&#39; w_3 \\sigma(z_4)&#39; w_4 \\dfrac{\\partial{C}}{\\partial{a_4}} \\end{align*} \\] 从sigmoid的导函数看大于4或小于-4时, 值变得接近于0, 而且导函数的最大值为0.25, 如果权重初始化时值比较小, 上 面的计算公式可以看出, 最后计算出的梯度, 是非常小的, 且越靠前面的层的梯度越小(一直连乘一个小于1的数), 所以 会出现梯度消失的情况. 同样道理, 如果权重值初始化值很大(或者过程中计算出的值大于1), 经过连乘之后会发现前面层的值越来越大, 引起梯 度爆炸. 3 解决办法 使用ReLU,maxout等替代sigmoid. 3.1 clip gradients 首先设置一个梯度阈值：clip_gradient 在后向传播中求出各参数的梯度，这里我们不直接使用梯度进去参数更新，我们求这些梯度的l2范数 然后比较梯度的l2范数||g||与clip_gradient的大小 如果前者大，求缩放因子clip_gradient/||g||, 由缩放因子可以看出梯度越大，则缩放因子越小，这样便很好地控制了梯度的范围 最后将梯度乘上缩放因子便得到最后所需的梯度 draft: 常见的 gradient clipping 有两种做法 根据参数的 gradient 的值直接进行裁剪 根据若干参数的 gradient 组成的 vector 的 L2 norm 进行裁剪 第一种做法很容易理解，就是先设定一个 gradient 的范围如 (-1, 1), 小于 -1 的 gradient 设为 -1， 大于这个 1 的 gradient 设为 1. 第二种方法则更为常见，先设定一个 clip_norm, 然后在某一次反向传播后，通过各个参数的 gradient 构成一个 vector，计算这个 vector 的 L2 norm（平方和后开根号）记为 LNorm，然后比较 LNorm 和 clip_norm 的值，若 LNorm &lt;= clip_norm 不做处理，否则计算缩放因子 scale_factor = clip_norm/LNorm ，然后令原来的梯度乘上这个缩放因子 。这样做是为了让 gradient vector 的 L2 norm 小于预设的 clip_norm。 4 References https://www.cnblogs.com/DjangoBlog/p/7699664.html https://blog.csdn.net/u010814042/article/details/76154391 https://machinelearningmastery.com/how-to-avoid-exploding-gradients-in-neural-networks-with-gradient-clipping https://blog.floydhub.com/gru-with-pytorch/","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"},{"name":"Graph","slug":"Graph","permalink":"https://qrsforever.github.io/tags/Graph/"}]},{"title":"丢弃法","date":"2019-08-27T05:28:58.000Z","path":"2019/08/27/ML/Guide/dropout/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE What DrawIt References 1 What Co-Adaptation: dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} In such a network, if all the weights are learned together it is common that some of the connections will have more predictive capability than the others. In such a scenario, as the network is trained iteratively these powerful connections are learned more while the weaker ones are ignored. Over many iterations, only a fraction of the node connections is trained. And the rest stop participating. This phenomenon is called co-adaptation. Chitta RanjanUnderstanding Dropout with the Simplified Math behind it Ensemble Average: dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Ensemble average is properties of stochastic processes, which are like random variables but take the form of waveforms. Ensemble average is analogous to expected value or mean, in that it represents a sort of \"average\" for the stochastic process. It is a function of the same variable as the stochastic process, and when evaluated at a particular value denotes the average value that the waveforms will have at that same value. stackexchangewhat does ensemble average mean? Dropout: dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} When a large feedforward neural network is trained on a small training set, it typically performs poorly on held-out test data. This \"overfitting\" is greatly reduced by randomly omitting half of the feature detectors on each training case. This prevents complex co-adaptations in which a feature detector is only helpful in the context of several other specific feature detectors. Instead, each neuron learns to detect a feature that is generally helpful for producing the correct answer given the combinatorially large variety of internal contexts in which it must operate. Random \"dropout\" gives big improvements on many benchmark tasks and sets new records for speech and object recognition. HintonImproving neural networks by preventing co-adaptation of feature detectors 当一个复杂的前馈神经网络被训练在小的数据集时,容易造成过拟合.为了防止过拟合,可以通过阻止特征检测器的共同作 用来提高神经网络的性能. 大规模的神经网络中的两个难题:(1)过拟合; (2)费时 解决第一个过拟合问题可以采用模型组合(ensemble)方式, 这样就会带来第二个费时问题, 在这种背景下 Dropout被提出来了. Dropout强迫一个神经单元,和随机挑选出来的其他神经单元共同工作,达到好的效果.消除减弱了神经元节点间的联合 适应性,增强了泛化能力. 2 DrawIt Network with Bernoulli gate: Dropout train with probability 0.5: Dropout training in a simple network. For each training example, feature detector units are dropped with probability 0.5. The weights are trained by backpropagation (BP) and shared with all the other examples. Dropout test: Dropout prediction in a simple network. At prediction time, all the weights from the feature detectors to the output units are halved. 未完!!! 3 References https://towardsdatascience.com/simplified-math-behind-dropout-in-deep-learning-6d50f3f47275 https://www.sciencedirect.com/science/article/pii/S0004370214000216 https://blog.csdn.net/stdcoutzyx/article/details/49022443 https://www.cnblogs.com/bonelee/p/8127451.html https://papers.nips.cc/paper/4878-understanding-dropout.pdf http://www.jmlr.org/papers/volume15/srivastava14a/srivastava14a.pdf","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"正则化","date":"2019-08-27T02:24:46.000Z","path":"2019/08/27/ML/Guide/regularization/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE What Cost L1正则化项 L2正则化项 可视化 1 What dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 模型越简洁(抽象)泛化性越好 正则化过程就是帮助我们找到更为简洁的描述方式的量化过程. 正则化项的加入会帮助模型找到描述更为简洁的方式从而提高模型的泛化能力, 一定程度上避免过拟合. 高扬白话深度学习与TensorFlow 2 Cost 损失函数的改造 \\(C = C_0 + R\\) 经验损失(\\(C_0\\)): 模型拟合结果与标签之间的参差总和, 结果越大, 越欠拟合 结构损失(\\(R\\)惩罚因子): 保证模型的泛化性良好, 防止过拟合. 拟合程度好不代表泛化性能就一定好 2.1 L1正则化项 \\[ \\begin{align*} C &amp;= C_0 + \\dfrac{\\lambda}{n}\\sum_{\\omega}|\\omega| \\\\ \\dfrac{\\partial{C}}{\\partial{\\omega}} &amp;= \\dfrac{\\partial{C_0}}{\\partial{\\omega}} + \\dfrac{\\lambda}{n}sign(\\omega) \\\\ \\omega&#39; &amp;= \\omega - \\eta \\dfrac{\\partial{C_0}}{\\partial{\\omega}} - \\eta \\dfrac{\\lambda}{n}sign(\\omega) \\end{align*} \\] 其中\\(\\lambda\\)是正则化系数或惩罚系数,表示对这个部分(结构损失)有多\"重视\", 如果我们很重视结构风险,或者说很不 希望结构风险太大,那我们就加大\\(\\lamdba\\),迫使整个损失函数向着权值\\(\\omega\\)减小的方向快速移动 . 2.2 L2正则化项 \\[ \\begin{align*} C &amp;= C_0 + \\dfrac{\\lambda}{2n}\\sum_{\\omega}\\omega^2 \\\\ \\dfrac{\\partial{C}}{\\partial{\\omega}} &amp;= \\dfrac{\\partial{C_0}}{\\partial{\\omega}} + \\dfrac{\\lambda}{n}\\omega \\\\ \\omega&#39; &amp;= \\omega - \\eta \\dfrac{\\partial{C_0}}{\\partial{\\omega}} - \\eta \\dfrac{\\lambda}{n}\\omega \\end{align*} \\] 2.3 可视化 dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 假设在一个模型中只有两个维度\\(\\omega_1\\)和\\(\\omega_2\\)作为待定系数,最终的理想解在圆心的位置,当然这里画出来的是 在第一象限,但是实际上它也会出现在别的位置.由于初始化的时候\\(\\omega_1\\)和\\(\\omega_2\\)可能会在别的位置,当然也会 在二 三 四象限中.在训练的过程中会逐步从这个初始化的位置向圆心靠拢. 圆心周围的一圈一圈的线其实是损失 函数等高线,也就是说当\\(\\omega_1\\)和\\(\\omega_2\\)所组成的坐标点\\((\\omega_1,\\omega_2)\\)在这一圈上的任意位置都会产 生同样大小的损失函数,而由于初始化位置不确定,所以可能会出现在一圈上的任意位置,那么显然远离坐标系圆点(0,0)的 \\((\\omega_1,\\omega_2)\\)点会产生更大 的结构风险,因为其拥有更大的\\(\\omega_1\\)和\\(\\omega_2\\)值,更为不简洁. 高扬白话深度学习与TensorFlow 2.4 Dropout pass","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"归一化","date":"2019-08-27T01:58:25.000Z","path":"2019/08/27/ML/Guide/normalization/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE Why Method 0-1标准化 z-score标准化 sigmoid函数 References TODO 1 Why 为什么需要归一化 dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 在机器学习的过程中, 一个由于计数单位的影响导致分布范围较宽广的值和 一个分布范围较窄小的值会在训练过程中有 着不同的影响能力,结果主要是会引起模型对某些值过于敏感或者不敏感,而这种情况其实是我 们不愿看到的一种天然由 外界强加给系统的“不公平”的情况。克服的办法也是有的,那就是使用归一化这样一个操作过程:把数据的大小分布 压缩或框定在一个比例协调的范围之内。 高扬白话深度学习与TensorFlow 国家收入: 人民币, 韩币, 美元 2 Method 2.1 0-1标准化 max-min scale \\[ x_{normalization} = \\dfrac{x - x_{min}}{x_{max} - x_{min}} \\] 转化后: 0 &lt;= x &lt;= 1 2.2 z-score标准化 z-score scale \\[ x_{normalization} = \\dfrac{x - \\mu}{\\sigma} \\] 转化后: x ~ (0, 1) 2.3 sigmoid函数 \\[ x_{normalization} = \\dfrac{1}{1 + e^{-x}} \\] 2.4 References https://www.cnblogs.com/yhll/p/9857274.html 转化后: 0 &lt; x &lt; 1, 集中在0.5附近 3 TODO 每层网络都可以进行归一化","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)机器学习算法汇总","date":"2019-08-26T11:55:07.000Z","path":"2019/08/26/ML/Guide/models_tree/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ AlphaTree Object Classification LeNet AlexNet VGG Object Detection Object Segmentation 1 AlphaTree 很多论文对算法模型的描述都有自己的风格, 对于我们这些刚入门的小生算是一个大大的挑战, 而我们希望有个大牛能用 一种绘图描绘方式统一描述这些模型, 这个希望被深度神经网络(DNN)与对抗神经网络(GAN)模型总览图示实现了. 这个AlphaTree可贵之处是定义了一套图标, 如下: Conv + Max: . 止于重复造轮子, 详细的算法模式可以直接进入here. 如果图上再标上所使用的激活函数就更美了 1.1 Object Classification cls 1.1.1 LeNet 论文\"Gradient-based learning applied to document recognition\" 模型结构(激活函数From Sigmoid to ReLU) 数据变化 see more for details. 1.1.2 AlexNet 论文\"Imagenet classification with deep convolutional neural networks\" 模型结构(移除LRN层, 激活函数ReLU) 数据变化 see more for details. 参考代码: class AlexNet(nn.Module): def __init__(self, num_classes=1000): super(AlexNet, self).__init__() self.features = nn.Sequential( nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2), nn.ReLU(inplace=True), nn.MaxPool2d(kernel_size=3, stride=2), nn.Conv2d(64, 192, kernel_size=5, padding=2), nn.ReLU(inplace=True), nn.MaxPool2d(kernel_size=3, stride=2), nn.Conv2d(192, 384, kernel_size=3, padding=1), nn.ReLU(inplace=True), nn.Conv2d(384, 256, kernel_size=3, padding=1), nn.ReLU(inplace=True), nn.Conv2d(256, 256, kernel_size=3, padding=1), nn.ReLU(inplace=True), nn.MaxPool2d(kernel_size=3, stride=2), ) self.avgpool = nn.AdaptiveAvgPool2d((6, 6)) self.classifier = nn.Sequential( nn.Dropout(), nn.Linear(256 * 6 * 6, 4096), nn.ReLU(inplace=True), nn.Dropout(), nn.Linear(4096, 4096), nn.ReLU(inplace=True), nn.Linear(4096, num_classes), ) def forward(self, x): x = self.features(x) x = self.avgpool(x) x = x.view(x.size(0), 256 * 6 * 6) x = self.classifier(x) return x 注意: Here the output channel is 64 not 96, and using zero-padding(2) 1.1.3 VGG 论文\"Very deep convolutional networks for large-scale image recognition\" VGG配置表 VGG19模型结构 see more for details. 参考代码: cfg = { &quot;E&quot;: [ 64, 64, &quot;M&quot;, 128, 128, &quot;M&quot;, 256, 256, 256, 256, &quot;M&quot;, 512, 512, 512, 512, &quot;M&quot;, 512, 512, 512, 512, &quot;M&quot;, ], } class VGG(nn.Module): def __init__(self, features, num_classes=1000, init_weights=True): super(VGG, self).__init__() self.features = features self.avgpool = nn.AdaptiveAvgPool2d((7, 7)) self.classifier = nn.Sequential( nn.Linear(512 * 7 * 7, 4096), nn.ReLU(True), nn.Dropout(), nn.Linear(4096, 4096), nn.ReLU(True), nn.Dropout(), nn.Linear(4096, num_classes), ) if init_weights: self._initialize_weights() def forward(self, x): x = self.features(x) x = self.avgpool(x) x = x.view(x.size(0), -1) x = self.classifier(x) return x def make_layers(cfg): layers = [] in_channels = 3 for v in cfg: if v == &quot;M&quot;: layers += [nn.MaxPool2d(kernel_size=2, stride=2)] else: conv2d = nn.Conv2d(in_channels, v, kernel_size=3, padding=1) layers += [conv2d, nn.ReLU(inplace=True)] in_channels = v return nn.Sequential(*layers) def vgg19(**kwargs): return VGG(make_layers(cfg[&quot;E&quot;]), **kwargs) 1.2 Object Detection det 1.3 Object Segmentation seg","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)ConvNet平移不变性","date":"2019-08-26T05:46:56.000Z","path":"2019/08/26/ML/Guide/cnn_translation_invariance/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Introduction Translation Picture Invariance vs. Equivariance Why and how References 不理解的地方比较多, 后续整理. 1 Introduction Invariance means that you can recognize an object as an object, even when its appearance varies in some way. Translation means that each point/pixel in the image has been moved the same amount in the same direction. Alternately, you can think of the origin as having been shifted an equal amount in the opposite direction. 2 Translation Picture 3 Invariance vs. Equivariance Translation invariance means that the system produces exactly the same response, regardless of how its input is shifted. Equivariance means that the system works equally well across positions, but its response shifts with the position of the target. 4 Why and how dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Convolution + Max pooling \\(\\approx\\)translation invariance Convolution: provides equivariance to translation. Pooling: provides the real translation invariance but only approximately. Brando MirandaWhy and how are convolutional neural networks translation-invariant? dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} All this happens because of weight sharing (visualize the kernels as weight matrices; certain submatrices of the weight matrix share the weights) in Convolutional Nets, which inherently allow this invariance. Aditya Kumar PraharajWhy and how convolutional neural networks are translation-invariant? dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} After some thought, I do not believe that the pooling operation is the main reason for the translation invariant property in CNNs. I believe that invariance (at least to translation) is due to the convolution filters (not specifically the pooling) while the fully-connected layers at the end are “position-dependent”. Jean Da RoltHow is a convolutional neural network able to learn invariant features? 5 References https://www.quora.com/How-is-a-convolutional-neural-network-able-to-learn-invariant-features http://cs231n.github.io/convolutional-networks/ https://stats.stackexchange.com/questions/208936/what-is-translation-invariance-in-computer-vision-and-convolutional-neural-netwo https://www.quora.com/Why-and-how-are-convolutional-neural-networks-translation-invariant","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)Pytorch快速入门","date":"2019-08-25T09:42:56.000Z","path":"2019/08/25/ML/Pytorch/handbook/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 入门教程 重点 1 入门教程 学习Pytorch必先看此书GITHUB:zergtant/pytorch-handbook, 然后看官网文档 1.1 重点 为什么激活函数都是非线性的? dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 在神经网络的计算过程中，每层都相当于矩阵相乘，无论神经网络有多少层输出都是输入的线性组合，就算我们有几千层 的计算，无非还是个矩阵相乘，和一层矩阵相乘所获得的信息差距不大，所以需要激活函数来引入非线性因素，使得神经 网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中，增加了神经网络模型泛化的特性。 zergtant, https://github.com/zergtant神经网络简介","tags":[{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"SSH远端服务器使用GUI","date":"2019-08-22T11:44:47.000Z","path":"2019/08/22/Tools/How/ssh_x11/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} SSH设置 SSH多个连接共享 SSH远程GUI 本地操作远程文件 主机别名 xauth警告 完整的配置 安装中文字体 遇到的问题 1 SSH设置 modify ~/.ssh/config 1.1 SSH多个连接共享 ControlPersist 可以设置长连接的时间,即使所有的窗口退出, 连接仍保持. ControlPersist 4h ControlMaster auto ControlPath /tmp/ssh_mux_%h_%p_%r 1.2 SSH远程GUI ForwardX11 yes X11Forwarding yes 1.3 本地操作远程文件 sshfs user@ip:/path/to/remote_dir local_dir 1.4 主机别名 User指定默认用那个用户名进行操作 Host alias_name HostName real_host User dc2-user 1.5 xauth警告 生成文件, 如果有备份删除: touch ~/.Xauthority X11 display over ssh: xauth generate :0 . trusted (不需要)生成本地主机的Key: xauth add ${HOST}:0 . $(xxd -l 16 -p /dev/urandom) 2 完整的配置 KexAlgorithms=+diffie-hellman-group1-sha1 ControlMaster auto ControlPath /tmp/ssh_mux_%h_%p_%r ControlPersist 6h GSSAPIAuthentication no XAuthLocation /usr/bin/xauth Host * ForwardAgent yes ForwardX11 yes ForwardX11Trusted yes Host cauchy HostName xxx.xxx.xxx.xxx User xxx-user # mount: sshfs cauchy:work/code code Host github.com HostName github.com PreferredAuthentications publickey User git IdentityFile /home/lidong/.ssh/id_rsa_qrsblog 3 安装中文字体 sudo apt install -y --no-install-recommends fonts-wqy-microhei sudo apt install -y --no-install-recommends ttf-wqy-zenhei 4 遇到的问题 Ubuntu16.04系统下汉字显示为方框解决办法 Ubuntu添加中文字体 高效使用SSH的16个技巧 xauth not creating .Xauthority file","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"(draft)机器学习CV框架","date":"2019-08-21T09:23:32.000Z","path":"2019/08/21/Company/Cauthy/framework/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Introduction nginx yii Visdom torchcv Cauchy Architecture Start Servers Dynamic Process Project Directory References 1 Introduction 1.1 nginx Nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server. See more HOME PAGE 1.2 yii Yii is a fast, secure, and efficient PHP framework. The name Yii (pronounced Yee or [ji:]) means \"simple and evolutionary\" in Chinese. It can also be thought of as an acronym for Yes It Is! See more HOME PAGE, GITHUB 1.3 Visdom Visdom is a visualization tool that generates rich visualizations of live data to help researchers and developers stay on top of their scientific experiments that are run on remote servers. Visualizations in Visdom can be viewed in browsers and easily shared with others. See more HOME PAGE, GITHUB 1.4 torchcv A PyTorch-Based Framework for Deep Learning in Computer Vision. Implemented Papers Image Classification VGG: Very Deep Convolutional Networks for Large-Scale Image Recognition ResNet: Deep Residual Learning for Image Recognition DenseNet: Densely Connected Convolutional Networks ShuffleNet: An Extremely Efficient Convolutional Neural Network for Mobile Devices ShuffleNet V2: Practical Guidelines for Ecient CNN Architecture Design Semantic Segmentation DeepLabV3: Rethinking Atrous Convolution for Semantic Image Segmentation PSPNet: Pyramid Scene Parsing Network DenseASPP: DenseASPP for Semantic Segmentation in Street Scenes Object Detection SSD: Single Shot MultiBox Detector Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks YOLOv3: An Incremental Improvement FPN: Feature Pyramid Networks for Object Detection Pose Estimation CPM: Convolutional Pose Machines OpenPose: Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields Instance Segmentation Mask R-CNN Generative Adversarial Networks Pix2pix: Image-to-Image Translation with Conditional Adversarial Nets CycleGAN: Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks. See more GITHUB 2 Cauchy 2.1 Architecture http://117.51.150.168:80/index.php?r=cauchy/myproject +---------------+ | | +-----------------| Browser | | | UI | | +---------------+ | 80 ^ v \\ visdom +-------------+ \\ | Nginx Proxy | \\ 8141 ~ 8199 +-------------+ \\ | \\ +-------------------+ | 10081 \\ | | v \\ | weights host | +------------------------------+ index.php \\ | | | Web (enter) |------+ \\ | Http Server | +------------------------------| | \\ | | | Yii PHP Core | | \\ +-------------------+ +------------------------------+ | \\ 28889 | Controllers |&lt;-----+ \\ | ^ ^ | r=cauchy/action \\ | / \\ | v | v v | +------------------------+ | Views Models | | | Visdom Process | +------------------------------+ | +-----------------+ | | | | | /cauchy/train 8399 |Flask |Cauchy Framework | +-------------------------&gt; | | | /cauchy/free_port | +-----------------+ | | Task Process | +------+-----------------+ 2.2 Start Servers start the http server for downloading the pretrained models weights, listen 28889. python -m http.server --directory=/path/to/pretrained_models 28889 start the nginx proxy, listen 80, forword 80 to 10081(Yii). /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf start yii server for interaction with web page, and cauchy framework, listen 10081. php /path/to/basic/yii serve $hostip --port 10081 start flask server for listening the task from yii server, listen 8399. cd /path/to/test/flask_services; python cauchy_services.py --port 8339 2.3 Dynamic Process see test/flask_services/cauchy_services.py start the visdom process when flask server received the /cauchy/free_port command. python -m visdom.server -port 8140 start the task process (train/test) when flask server received the /cauchy/train[test] command python run_tasks.py --hypes /path/to/hypes.json --viz_pid 21995 --viz_port 8140 --tmp_dir /tmp/tmpcyj84t5t 页面上每启动一个训练或评估任务, 都会对应的启动这个两个进程, 所有他们可以存在多个 2.4 Project Directory ├── apis // │ └── cocoapi │ ├── common │ ├── LuaAPI │ ├── MatlabAPI │ └── PythonAPI ├── cauchy // 框架核心 │ ├── datasets // 数据集操作: \\ │ │ ├── automl 1. 数据集格式成框架可以识别的结构(独立于框架) \\ │ │ ├── cls 2. 迭代数据集 │ │ ├── det │ │ ├── ins │ │ ├── pose │ │ ├── seg │ │ ├── tools │ │ └── track │ ├── extensions // │ │ ├── ops │ │ └── tools │ ├── methods // 负责任务主逻辑, 如: 数据加载, 算法模型选择, 模型评估, 训练监控 │ │ ├── automl 1. 根据参数&quot;task&quot;进行任务类型的选择(cls, det..), 确定真正的runner执行体. \\ │ │ ├── cls 2. 根据参数&quot;method&quot;选择算法模型, 然后进行训练(forward/backword). \\ │ │ ├── det │ │ ├── pose │ │ ├── seg │ │ └── tools │ ├── metrics // 评估算法模型(针对val/test数据集) │ │ ├── cls │ │ ├── det │ │ ├── pose │ │ └── seg │ ├── models // 根据以有的papers实现好的神经网络模型以及提供了损失方法 │ │ ├── automl │ │ ├── backbones │ │ ├── cls │ │ ├── det │ │ ├── pose │ │ ├── rcnn │ │ ├── seg │ │ └── tools │ └── utils // │ ├── helpers │ ├── parser │ ├── tools │ └── visualizer ├── scripts // │ ├── cls │ │ └── cifar │ ├── det │ │ └── voc │ └── seg │ ├── ade20k │ └── cityscapes └── test ├── cauchy // 单独调试算法模型, 不依赖WEB控制及传参 │ ├── hypes │ └── proj1 └── flask_services // Flask服务启动脚本, 与框架交互的唯一入口 └── project 3 References https://www.cnblogs.com/jerehedu/p/7762046.html https://blog.csdn.net/fujian9544/article/details/79567090","tags":[{"name":"Cauchy","slug":"Cauchy","permalink":"https://qrsforever.github.io/tags/Cauchy/"}]},{"title":"(draft)数据集介绍","date":"2019-08-21T02:03:49.000Z","path":"2019/08/21/ML/Guide/datasets/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} CIFAR CIFAR10 CIFAR100 MNIST KMNIST FashionMNIST EMNIST Balanced Digits Letters MNIST Chars74k Dogs Animals Fruits360 Boats VOC 1 CIFAR INTRO The CIFAR-10 and CIFAR-100 are labeled subsets of the 80 million tiny images dataset. 1.1 CIFAR10 The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. 1.2 CIFAR100 This dataset is just like the CIFAR-10, except it has 100 classes containing 600 images each. There are 500 training images and 100 testing images per class. dataset: 10000 x 3072 = 10000(test images) x 32(width) x 32(height) x 3(channels:RGB) labels: a list of 10000 numbers in the range 0-9, labels_names in the batches.meta files. 2 MNIST INTRO The MNIST database of handwritten digits, available from this page, has a training set of 60,000 examples, and a test set of 10,000 examples. The digits have been size-normalized and centered in a fixed-size image of 28x28 pixels. The MNIST database is a subset of a much larger datasetknown as the NIST Special Database 19 which contains handwritten digits and characters collected from over 500 writers. The MNIST database was constructed from NIST's Special Database 3 and Special Database 1 which contain binary images of handwritten digits. NIST originally designated SD-3 as their training set and SD-1 as their test set. The MNIST training set is composed of 30,000 patterns from SD-3 and 30,000 patterns from SD-1. Our test set was composed of 5,000 patterns from SD-3 and 5,000 patterns from SD-1. The 60,000 pattern training set contained examples from approximately 250 writers. size: 28(width) x 28(height) In the original dataset each pixel of the image is represented by a value between 0 and 255, where 0 is black, 255 is white and anything in between is a different shade of grey. MNIST is often the first dataset researchers try, they said: dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} \" If it doesn't work on MNIST, it won't work at all, Well, if it does work on MNIST, it may still fail on others.\" 3 KMNIST INTRO The Kuzushiji-MNIST or KMNIST dataset contains 10 classes of hiragana(日语) characters with a resolution of 28x28 (grayscale) similar to MNIST. In total it contains 70000 images, 60000 for training and 10000 for testing. 4 FashionMNIST INTRO Fashion-MNIST is a dataset of Zalando's article images—consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes. We intend Fashion-MNIST to serve as a direct drop-in replacement for the original MNIST dataset for benchmarking machine learning algorithms. It shares the same image size and structure of training and testing splits. 5 EMNIST INTRO arxiv Extended Modified NIST (EMNIST). Structure and Organization of the EMNIST datasets: Name Classes No. Training No. Testing Validation Total ByClass 62 697,932 116,323 No 814,255 ByMerge 47 697,932 116,323 No 814,255 Balanced 47 112,800 18,800 Yes 131,600 Digits 10 240,000 40,000 Yes 280,000 Letters 37 88,800 14,800 Yes 103,600 MNIST 10 60,000 10,000 Yes 70,000 5.1 Balanced total 131600, 47 classes, 2400 train examples and 400 test examples for each classs 131600 = 47 x (2400 + 400) 5.2 Digits total 28000, 10 classes, 2400 train examples and 400 test examples for each classs 28000 = 10 x (2400 + 400) 5.3 Letters total 145600, 26 classes, 5600 train examples and 800 test examples for each classs 145600 = 26 x (5600 + 800) 5.4 MNIST total 70000, 10 classes, 6000 train examples and 1000 test examples for each classs 70000 = 10 x (6000 + 1000) 6 Chars74k INTRO Character recognition datasets which consisting of all English alphabet letters in uppercase as well as lowercase , along with the digits 0-9 The Chars74k dataset consists of: 64 classes (0-9, A-Z, a-z) 7705 characters obtained from natural images 3410 hand drawn characters using a tablet PC 62992 synthesised characters from computer fonts This gives a total of over 74K images. TODO 7 Dogs INTRO The Stanford Dogs dataset contains images of 120 breeds of dogs from around the world. This dataset has been built using images and annotation from ImageNet for the task of fine-grained image categorization. Contents of this dataset: Number of categories: 120 Number of images: 20,580 Annotations: Class labels, Bounding boxes TODO 8 Animals TODO 9 Fruits360 INTRO A dataset of images containing fruits. TODO 10 Boats TODO 11 VOC TODO 12 ADE20K INTRO-Full INTRO-Scene Contains more than 20K scene-centric images exhaustively annotated with objects and object parts. Specifically, the benchmark is divided into 20K images for training, 2K images for validation, and another batch of held-out images for testing. It has 20210 training images and 2000 validation images. 12.1 ADEChallengeData2016 INTRO 13 COCO TODO 14 References http://www.manongjc.com/article/27377.html https://github.com/chainer/chainercv/tree/master/chainercv/datasets","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)模型优化","date":"2019-08-19T09:41:12.000Z","path":"2019/08/19/ML/Guide/performance_optimization/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} pass GPU显存分析 GPU显存计算","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(draft)Transforms","date":"2019-08-19T07:14:09.000Z","path":"2019/08/19/ML/Pytorch/transforms/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} pass","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Pytorch","slug":"Pytorch","permalink":"https://qrsforever.github.io/tags/Pytorch/"}]},{"title":"(draft)机器学习术语","date":"2019-08-19T02:35:45.000Z","path":"2019/08/19/ML/Guide/ml_terms/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Gradient Descent Epoch Batch Size Iterations Optimization Algorithom Adam(Adaptive momentum algorithom) 1 Gradient Descent It is a iterative optimization algorithom. Gradient means the rate of inclination or declination of a slope. Descent means the instance of descenting. we also need terminologies like learning rate, cost function, and below: 1.1 Epoch One Epoch is when an ENTIRE dataset is passed forward and backward through the neural network only ONCE. So, what is the right numbers of epochs? No right answer to this question. The answer is different for different dataset. the numbers of epochs is related to how diverse your data is. 1.2 Batch Size The total number of tranning examples present in a signal batch. But what is a Batch? we can't pass the entire dataset into the nerual net at once, so we divide dataset tinto number of batches or sets or parts Note: Batch size and number of batches are two different things. 1.3 Iterations It is the number of batches need to complete once epoch. W and b update for one iteration Note: The number of batches is equal to number of iterations for one epoch. Examples: We can divide one dataset of 2000 examples into batches of 500 then it will take 4 iterations to complete 1 epoch. Where Batch size is 500 and iterations is 4, for 1 complete epoch. https://towardsdatascience.com/epoch-vs-iterations-vs-batch-size-4dfb9c7ce9c9 https://www.cnblogs.com/mstk/p/8214499.html 2 Optimization Algorithom 2.1 Adam(Adaptive momentum algorithom) pass","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"},{"name":"Terms","slug":"Terms","permalink":"https://qrsforever.github.io/tags/Terms/"}]},{"title":"Ubuntu系统软件必备","date":"2019-08-15T03:05:35.000Z","path":"2019/08/15/Story/System/ubuntu_apps/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ System Monitor GUI Command Line vmstat htop glances lm-sensors nvidia-smi gpustat 1 System Monitor 1.1 GUI pass 1.2 Command Line 1.2.1 vmstat reports information about processes, memory, paging, block IO, traps, disks and cpu activity. 1.2.2 htop htop is an interactive, commnad-line based system-monitor for viewing the running process on PC. sudo apt install htop 1.2.3 glances Glances is a free (LGPL) cross-platform curses-based system monitoring tool which aims to present a maximum of information in a minimum of space. This tool is written in Python and uses the psutil library to fetch the statistical values from key elements, like CPU, load average, memory, network, disks, file systems, pro‐cesses and so on. sudo apt-get install glances Usage: case1: glances --time 5 --process-filter python --disable-bold --disable-left-sidebar --process-short-name 10-255-20-131 (debian stretch/sid 64bit / Linux 4.4.0-157-generic) Uptime: 2:40:36 CPU 49.4% nice: 0.4% LOAD 4-core MEM 41.9% active: 3.50G SWAP 0.0% user: 31.1% irq: 0.0% 1 min: 2.03 total: 7.80G inactive: 1.71G total: 8.00G system: 17.5% iowait: 1.7% 5 min: 1.31 used: 3.27G buffers: 81.0M used: 0 idle: 48.9% steal: 0.0% 15 min: 1.02 free: 4.53G cached: 2.58G free: 8.00G Processes filter: python (press ENTER to edit) TASKS 9 (33 thr), 0 run, 9 slp, 0 oth sorted automatically by cpu_percent, flat view CPU% MEM% VIRT RES PID USER NI S TIME+ IOR/s IOW/s Command 89.6 30.6 19.9G 2.38G 20424 root 0 D 3:45.60 0 0 python 1.4 1.9 1.48G 155M 2023 root 0 S 36:46.18 0 0 python 1.0 25.9 19.8G 2.02G 22214 root 0 S 0:02.28 0 0 python 0.0 0.2 80.5M 16.2M 1922 root 0 S 0:02.16 0 0 python 0.0 1.9 1.42G 154M 1942 root 0 S 0:02.10 0 0 python 0.0 1.9 1.44G 148M 20399 root 0 S 0:02.14 0 0 python 0.0 0.1 53.5M 10.7M 20430 root 0 S 0:00.40 0 0 python 0.0 25.9 19.8G 2.02G 22212 root 0 S 0:02.22 0 0 python 0.0 25.9 19.8G 2.02G 22213 root 0 S 0:02.24 0 0 python 0.0 25.9 19.8G 2.02G 22215 root 0 S 0:02.22 0 0 python case2: glances --time 5 --percpu --hide-kernel-threads --disable-network 10-255-20-131 (debian stretch/sid 64bit / Linux 4.4.0-157-generic) Uptime: 2:50:22 PER CPU 50.0% 50.0% 50.0% 50.0% LOAD 4-core MEM 40.7% active: 3.40G SWAP 0.0% user: 2.0% 1.0% 1.0% 2.0% 1 min: 2.18 total: 7.80G inactive: 1.71G total: 8.00G system: 1.0% 2.0% 4.0% 0.0% 5 min: 2.06 used: 3.17G buffers: 81.8M used: 0 idle: 3.0% 3.0% 1.0% 2.0% 15 min: 1.57 free: 4.63G cached: 2.58G free: 8.00G DISK I/O R/s W/s TASKS 94 (220 thr), 1 run, 93 slp, 0 oth sorted automatically by cpu_percent, flat view loop0 0 0 loop1 0 0 CPU% MEM% VIRT RES PID USER NI S TIME+ IOR/s IOW/s Command loop2 0 0 76.7 0.3 108M 24.4M 30137 dc2-user 0 R 0:00.37 0 0 /usr/bin/python3 /usr/bin/glances --time 5 --percpu --hide-kernel-threads --disable-network loop3 0 0 76.1 30.6 19.9G 2.38G 20424 root 0 S 13:32.55 0 0 python run_tasks.py --hypes /tmp/tmpf7uyhjqd/hypes.json --viz_pid 20399 --viz_port 8140 --tmp_d loop4 0 0 30.2 1.9 1.48G 155M 2023 root 0 S 36:55.69 0 0 /usr/bin/python /home/dc2-user/work/qrs/torchcv-release/test/flask_services/cauchy_services.py loop5 0 0 0.0 0.1 37.1M 5.84M 1 root 0 S 0:39.44 0 0 /sbin/init loop6 0 0 0.0 0.0 34.6M 3.46M 661 root 0 S 0:02.57 0 0 /lib/systemd/systemd-journald loop7 0 0 0.0 0.0 92.6M 1.52M 705 root 0 S 0:00.00 0 0 /sbin/lvmetad -f vda 0 0 0.0 0.0 43.3M 3.77M 725 root 0 S 0:00.54 0 0 /lib/systemd/systemd-udevd vda1 0 0 0.0 0.0 98.0M 2.49M 976 systemd-t 0 S 0:00.30 0 0 /lib/systemd/systemd-timesyncd 0.0 0.2 333M 15.3M 1143 root 0 S 0:00.30 0 0 /usr/sbin/smbd -D FILE SYS Used Total 0.0 0.1 325M 5.71M 1145 root 0 S 0:00.00 0 0 /usr/sbin/smbd -D / (vda1) 62.9G 77.5G 0.0 0.1 333M 6.60M 1175 root 0 S 0:00.30 0 0 /usr/sbin/smbd -D 0.0 0.0 15.7M 868K 1177 root 0 S 0:00.00 0 0 /sbin/dhclient -1 -v -pf /run/dhclient.ens3.pid -lf /var/lib/dhcp/dhclient.ens3.leases -I -df / 0.0 0.0 5.10M 148K 1278 root 0 S 0:00.42 0 0 /sbin/iscsid 0.0 0.0 5.59M 3.43M 1279 root -10 S 0:02.30 0 0 /sbin/iscsid 0.0 0.0 4.29M 1.20M 1283 root 0 S 0:00.00 0 0 /usr/sbin/acpid 0.0 0.0 31.2M 2.93M 1285 root 0 S 0:04.63 0 0 /usr/sbin/cron -f 0.0 0.0 250M 3.23M 1287 syslog 0 S 0:01.00 0 0 /usr/sbin/rsyslogd -n 0.0 0.0 93.1M 1.35M 1289 root 0 S 0:00.00 0 0 /usr/bin/lxcfs /var/lib/lxcfs/ 0.0 0.0 25.4M 2.13M 1291 root 0 S 0:00.00 0 0 /usr/sbin/atd -f 1.2.4 lm-sensors detect each relevant device (processors, fans, etc) and prepare to measure the temperature. sudo apt-get install lm-sensors Usage: case: sudo sensors-detect sudo watch sensors 1.2.5 nvidia-smi GPU memory, power usage, temperature, fan speed and etc. Usage: case1: display a list of GPUs connected to the system nvidia-smi --list-gpus GPU 0: Tesla P4 (UUID: GPU-e9cdea1d-74a3-d355-9f98-42ddf83c1893) case2: device monitoring nvidia-smi dmon --id 0 --delay 3 --count 3 --select cpu c:Proc and Mem Clocks, p:Power Usage and Temperature, u:Utilization # gpu mclk pclk pwr gtemp mtemp sm mem enc dec # Idx MHz MHz W C C % % % % 0 2999 1531 33 73 - 0 0 0 0 0 2999 1531 33 72 - 0 0 0 0 0 2999 1518 34 72 - 79 79 0 0 case3: process monitoring nvidia-smi pmon --count 3 --select um # gpu pid type sm mem enc dec fb command # Idx # C/G % % % % MB name 0 5913 C 72 68 0 0 3225 python 0 5913 C 66 61 0 0 3225 python 0 5913 C 71 64 0 0 3225 python 参考1 参考2 1.2.6 gpustat : GPU info, fan, power, temperature, pid pip install gpustat Usage: case1: gpustat -cpu -F -P -i 3 --gpuname-width 12 --no-color --no-header [0] Tesla P4 | 44&#39;C, ?? %, 0 %, 28 / 75 W | 1059 / 7606 MB | root:python/7468(1049M) case2: json watch -n 3 gpustat -cpu -F -P --json { &quot;hostname&quot;: &quot;10-255-20-131&quot;, &quot;query_time&quot;: &quot;2019-08-23T11:28:42.900873&quot;, &quot;gpus&quot;: [ { &quot;index&quot;: 0, &quot;uuid&quot;: &quot;GPU-e9cdea1d-74a3-d355-9f98-42ddf83c1893&quot;, &quot;name&quot;: &quot;Tesla P4&quot;, &quot;temperature.gpu&quot;: 67, &quot;fan.speed&quot;: null, &quot;utilization.gpu&quot;: 0, &quot;power.draw&quot;: 32, &quot;enforced.power.limit&quot;: 75, &quot;memory.used&quot;: 3219, &quot;memory.total&quot;: 7606, &quot;processes&quot;: [ { &quot;username&quot;: &quot;root&quot;, &quot;command&quot;: &quot;python&quot;, &quot;gpu_memory_usage&quot;: 3209, &quot;pid&quot;: 7468 } ] } ] }","tags":[{"name":"System","slug":"System","permalink":"https://qrsforever.github.io/tags/System/"}]},{"title":"(draft)向量矩阵乘积","date":"2019-08-13T12:01:44.000Z","path":"2019/08/13/Note/Math/product/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"Doxygen文档生成","date":"2019-07-31T10:53:08.000Z","path":"2019/07/31/Tutorial/doxygen/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Tags References 1 Tags Tag Description @brief Brief description of class or function (fits a single line) @details about class or function @author Insert author name @param Function or method parameter description @param [in] Input parameter (C-function) @param [out] Output paramter of C-style function that returns multiple values @param [in, out] Parameter used for both input and output in a C-style function. @tparam Template type parameter @trhow Specify exceptions that a function can throw @pre Pre conditions @post Post conditions @return Description of return value or type. @code … &lt;C++-Code&gt;… @encode C++ code example. @remark Additional side-notes @note Insert additional note @warning @see SomeClass::Method Reference to some class, method, or web site @li Bullet point 2 References https://caiorss.github.io/C-Cpp-Notes/Doxygen-documentation.html http://www.doxygen.nl/manual/preprocessing.html","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"(原创)Graphviz绘图","date":"2019-07-24T06:00:24.000Z","path":"2019/07/24/Tutorial/graphviz/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ Requirements Graphviz 基本语法 构造边 属性 通用属性 图的属性 节点属性 边的属性 Demo docsG office example subgraph edge direction edge position prog rank label demo1 demo2 distance latex graph neural network simplest complicated case others 节点形状 标签 二分查找树 cluster matrix Blog pandoc config filter graphviz.py ladot References Graph Visualization Software 1 Requirements sudo apt install pandoc sudo apt install graphviz graphviz-dev sudo apt install dot2tex latex2html dvipng sudo pip3 install pygraphviz pandocfilters if need show latex equation in graphviz, also install latex. 2 Graphviz 官方文档 属性设置 节点形状 箭头形状 颜色配置 由图, 节点, 边组成. 2.1 基本语法 字符串 都要加双引号, 可以加\\n换行符 注释 双斜杠// 或 /* */ 有向图 digraph, 节点关系: 指向-&gt; 无向图 graph, 节点关系: 连通 -- 子图 subgraph, 子图必须以cluster做为名称的前缀 属性 node[attribute1=value1, attribute2=value2] 大小: size=\"2,2\"; 单位为英寸 标签: label=\"显示在图上的内容\" 边: edge [color=red,style=dotted] 节点: node [color=navy] 边方向: rankdir=参数值;LR,RL,BT,TB 节点形状: a[shape=box]; 默认是椭圆 边框大小: a[width=.1,height=2.5]; 单位为英寸 边框颜色: a[color=red]; 2.2 构造边 关系 有向图 无向图 一对一 a-&gt;b; a--b; 一对多 a-&gt;{b;c;d}; a--{b;c;d}; 多对一 {b;c;d}-&gt;a; {b;c;d}--a; 多对多 {m,n,p,q}-&gt;{b;c;d}; {m,n,p,q}--{b;c;d}; 2.3 属性 2.3.1 通用属性 属性名称 默认值 含义 color black 颜色,颜色设置支持形如red和#FF0000两种形式 fontcolor black 文字颜色 fontname Times-Roman 字体 fontsize 14 文字大小 label 显示的标签,支持''换行,对于节点默认为节点名称 penwidth 1.0 线条宽度 style 图形选项,例如 bold, dotted, filled 等 layer 覆盖范围 all id 或 id:id 2.3.2 图的属性 属性名称 默认值 含义 bgcolor 背景颜色 center false 在page的中心画图 clusterrank local global或none concentrate false 让多条边有公共部分 nodesep .25 节点之间的间隔(英寸) peripheries 1 边界数 rank same,min,source, max,sink,设置多个节点顺序 rankdir TB 排序方向, LR,RL,BT,TB ranksep .75 间隔,等级之间的间隔,英寸 size 图的大小(英寸) splines 控制边的形状 none labelloc 调整图或子图的标签的上下位置 labeljust 调整图或子图的标签的左右位置 compound false If true, allow edges between clusters. 配合lhead和ltail使用 margin .5 page的空白,英寸 mclimit 1.0 mincross的跌带比例因子 nslimit -- 如果设置了f,则使用网络界限迭代f(结点数)来设置x坐标 nslimit1 -- 如果设置了f,则使用网络界限迭代f(结点数)设置结点排名(rank) ordering -- 如果out则外部边缘顺序会保留 orientation portrait 如果没用rotate,而值为landscape,使用风景画定位 page -- 标记页,例如\"8.5,11\" pagedir BL 多页之间的横断 quantum -- 结点标签的尺寸根据quantum的量度 ratio -- 近似朝向approximate aspect ratio desired,fill或auto remincross -- 如果为true且有多个集群,重新运行crossing最小化 rotate -- 如果为90,设置朝向 samplepoints 8 输出时用以表现椭圆和圆所用的点数,参见附录C searchsize 30 切除的最大边缘,当用以寻找网络中的最小一个(完全没看懂?) 2.3.3 节点属性 属性名称 默认值 含义 shape ellipse 形状, ellipse sides 4 当shape=polygon时的边数 skew 0.0 当shape=polygon, [-1.0,1.0], 从上到下的倾斜度, 相位差, 矩形转换成平行四边形 distortion 0.0 当shape=polygon, 从上到下缩短多边形, 扭曲, 矩形变成梯形 orientation 0.0 多边形的曲线方向和角度, 旋转角度 peripheries 边界曲线数量, 双圆环peripheries=2 regular false 使多边形变得规则 fillcolor lightgrey/black 填充颜色 fixedsize false 标签是否影响节点的大小 group 节点所属的组 height .5 以英寸为单位的高度 width .75 以英寸为单位的宽度 2.3.4 边的属性 属性名称 默认值 含义 arrowhead normal 箭头头部形状 arrowsize 1.0 箭头大小 arrowtail normal 箭头尾部形状 constraint true 是否根据边来影响节点的排序 decorate 设置之后会用一条线来连接edge和label dir forward 设置方向:forward,back,both,none headclip true 是否到边界为止 headport n,ne,e,se,s,sw,w,nw tailclip true 与headclip类似 headlabel 边的头部显示的标签 taillabel 边的尾部显示的标签 tailport -- n,ne,e,se,s,sw,w,nw lhead 当compound为true时,lhead用于指定边指向的cluster ltail 与ltail类似 labelangle -25.0 边标签的旋转角度 labeldistance 1.0 边标签距离结点的比例因子 labelfloat false 边标签位置的强制约束 labelfontcolor black 标签字体颜色 labelfontname Times-Roman 标签字体族 labelfontsize 14 标签字体大小 weight 1 边的延伸花费整数 minlen 1 头尾间最小长度 samehead -- 头结点的tag,拥有相同头结点tag的边会使用统一端点 sametail -- 同上,尾结点 3 Demo 3.1 docsG dot guide 3.2 office example ```{.graph .center caption=&quot;Demo&quot; fileName=&quot;test&quot;} digraph G { bgcolor=&quot;#ffffff00&quot; subgraph cluster_0 { style=&quot;filled, rounded&quot;; color=&quot;#E6EAF2&quot; node [style=filled,color=white]; a0 -&gt; a1 -&gt; a2 -&gt; a3; a3 -&gt; a1 [label = &quot; -10&quot; color=red fontcolor=red]; label = &quot;System A&quot;; } subgraph cluster_1 { node [style=filled color=&quot;#E6EAF2&quot;]; b0 -&gt; b1 -&gt; b2 -&gt; b3; b0 -&gt; b2 [label = &quot; +12&quot; color=green fontcolor=green]; label = &quot;System B&quot;; style=&quot;dashed, rounded&quot; color=blue } start -&gt; a0; start -&gt; b0; a1 -&gt; b3; a3 -&gt; end; b3 -&gt; end; start [label=&quot;load&quot; shape=folder]; end [label=&quot;store&quot; shape=box3d]; } ``` output: Demo 3.3 subgraph ```{.graph .center caption=&quot;Subgraph Demo&quot; fileName=&quot;graphviz_subgraph_1&quot;} digraph G { compound=true; node [ shape = &quot;Mrecord&quot; ]; subgraph cluster_0 { style = rounded; label = &quot;Zero&quot;; Node_0_0 -&gt; Node_0_1; }; subgraph cluster_1 { style = rounded; label = &quot;One&quot;; Node_1_0 -&gt; Node_1_1; }; subgraph cluster_2 { style = rounded; label = &quot;Two&quot;; Node_2_0 -&gt; Node_2_1; }; NodeA [ style = rounded ]; NodeA -&gt; Node_0_0 [lhead = cluster_0]; NodeA -&gt; Node_1_0 [lhead = cluster_1]; NodeA -&gt; Node_2_0 [lhead = cluster_2]; } ``` output: Subgraph Demo 3.4 edge direction ```{.graph .center caption=&quot;Edge Direction Demo&quot; fileName=&quot;graphviz_edge_1&quot;} digraph G { A -&gt; B[dir = both] B -&gt; C[dir = nonc] C -&gt; D[dir = back] D -&gt; A[dir = forward] } ``` output: Edge Direction Demo 3.5 edge position ```{.graph .center caption=&quot;Edge Position Demo&quot; fileName=&quot;graphviz_edge_2&quot;} digraph G { node[shape = box] c:n -&gt; d[label = n] c1:ne -&gt; d1[label = ne] c2:e -&gt; d2[label = e] c3:se -&gt; d3[label = se] c4:s -&gt; d4[label = s] c5:sw -&gt; d5[label = sw] c6:w -&gt; d6[label = w] c7:nw -&gt; d7[label = nw] } ``` output: Edge Position Demo 3.6 prog 默认prog=dot, neato更适合画无向图 ```{.graph .center prog=neato fileName=&quot;graphviz_prog&quot; caption=&quot;Star network topology.&quot;} graph ER { bgcolor=&quot;#ffffff00&quot; A -- 1 A -- 2 A -- 3 A -- 4 A -- 5 } ``` output: Star network topology. 3.7 rank ```{.graph .center caption=&quot;Rank Demo&quot; fileName=&quot;graphviz_rank_1&quot;} digraph G { rankdir = LR { node[shape = plaintext] 1995 -&gt; 1996 -&gt; 1997 -&gt; 1998 -&gt; 1999 -&gt; 2000 -&gt; 2001 } { node[shape = box, style = filled] WAR3 -&gt; Xhero -&gt; Footman -&gt; DOTA WAR3 -&gt; Battleship } { {rank = same 1996 WAR3} {rank = same 1998 Xhero Battleship} {rank = same 1999 Footman} {rank = same 2001 DOTA} } } ``` output: Rank Demo 3.8 label 3.8.1 demo1 ```{.graph .center caption=&quot;Label Demo 1&quot; fileName=&quot;graphviz_label_1&quot;} graph G { label = &quot;我爱你&quot; /*为图设置标签*/ labelloc = b /*图标签的位置在底部，也可以设置为t到顶部*/ labeljust = l /*图标签的位置在左边，也可以设置为r到右边*/ edge[decorate = true] C -- D[label = &quot;s1&quot;] C -- E[label = &quot;s2&quot;] C -- F[label = &quot;s3&quot;] D -- E[label = &quot;s4&quot;] D -- F[label = &quot;s5&quot;] edge[decorate = false, labelfontcolor = blue, fontcolor = red] C1 -- D1[headlabel = &quot;d1&quot;, taillabel = &quot;c1&quot;, label = &quot;c1 - d1&quot;] } ``` output: Label Demo 1 3.8.2 demo2 ```{.graph .center caption=&quot;Label Demo 2&quot; fileName=&quot;graphviz_label_2&quot;} graph G2 { node [shape=box]; User; Object; Tag; node [shape=diamond,style=filled]; Triple; { User -- Triple [headlabel = &quot;1&quot;, labeldistance=2.5, labelangle=20]; // 逆时针20度 Object -- Triple [headlabel = &quot;1&quot;, labeldistance=1.5, labelangle=-20];// 顺时针20度 } { rank=same; User; Object; } Triple -- Tag [label=&quot;n&quot;, headlabel = &quot;2&quot;]; } ``` output: Label Demo 2 3.9 distance ```{.graph .center caption=&quot;Distance Demo&quot; fileName=&quot;graphviz_distance_1&quot;} digraph A { rankdir=LR; center=true; margin=1; // 居中, 空白地方的大小 nodesep=2.5; ranksep=1.5; // 如果 randir是LR, 左右用ranksep, 上下使用nodesep. size=&quot;3,3&quot;; node [shape=point, height=&quot;.2&quot;, width=&quot;.2&quot;]; a [xlabel=&quot;a&quot;]; b [xlabel=&quot;b&quot;]; c [xlabel=&quot;c&quot;]; a -&gt; b -&gt; c; a -&gt; c; } ``` output: Distance Demo 3.10 latex graph ```{.graph .center caption=&quot;Latex_Graph_Demo&quot; fileName=&quot;ladotdemo&quot; latex=&quot;true&quot; resolution=&quot;1080&quot; desity=&quot;100&quot;} digraph mydot { rankdir=LR node [shape=plaintext, width=0] $v_1$(2) $v_1$ -&gt; $v_2$(2) [label=$\\sqrt{2}+\\frac{1}{x+5}$(9)] $v_2$ -&gt; $v_3$(2) [label=$S \\subseteq \\{1,2,3\\}^4$(6)] $v_3$ -&gt; $v_1$ [label=$(f \\circ g)^{-1}$(7)] } ``` output: Latex_Graph_Demo 3.11 neural network 3.11.1 simplest ```{.graph .center caption=&quot;simplest&quot; fileName=&quot;graphviz_simplest&quot;} digraph G { rankdir=LR; /* makes the directed graphs drawn from left to right */ splines=line; /* force edges to be straight, no curves or angles */ nodesep=.05; /* forces edges to become invisible */ node [label=&quot;&quot;]; /* [ ] sets the default node property */ subgraph cluster_0 { color=white; node [style=solid,color=blue4, shape=circle]; x1 x2 x3; label = &quot;layer 1&quot;; } subgraph cluster_1 { color=white; node [style=solid,color=red2, shape=circle]; a12 a22 a32 a42 a52; label = &quot;layer 2&quot;; } subgraph cluster_2 { color=white; node [style=solid,color=red2, shape=circle]; a13 a23 a33 a43 a53; label = &quot;layer 3&quot;; } subgraph cluster_3 { color=white; node [style=solid,color=seagreen2, shape=circle]; O1 O2 O3 O4; label=&quot;layer 4&quot;; } x1 -&gt; a12; x1 -&gt; a22; x1 -&gt; a32; x1 -&gt; a42; x1 -&gt; a52; x2 -&gt; a12; x2 -&gt; a22; x2 -&gt; a32; x2 -&gt; a42; x2 -&gt; a52; x3 -&gt; a12; x3 -&gt; a22; x3 -&gt; a32; x3 -&gt; a42; x3 -&gt; a52; a12 -&gt; a13 a22 -&gt; a13 a32 -&gt; a13 a42 -&gt; a13 a52 -&gt; a13 a12 -&gt; a23 a22 -&gt; a23 a32 -&gt; a23 a42 -&gt; a23 a52 -&gt; a23 a12 -&gt; a33 a22 -&gt; a33 a32 -&gt; a33 a42 -&gt; a33 a52 -&gt; a33 a12 -&gt; a43 a22 -&gt; a43 a32 -&gt; a43 a42 -&gt; a43 a52 -&gt; a43 a12 -&gt; a53 a22 -&gt; a53 a32 -&gt; a53 a42 -&gt; a53 a52 -&gt; a53 a13 -&gt; O1 a23 -&gt; O1 a33 -&gt; O1 a43 -&gt; O1 a53 -&gt; O1 a13 -&gt; O2 a23 -&gt; O2 a33 -&gt; O2 a43 -&gt; O2 a53 -&gt; O2 a13 -&gt; O3 a23 -&gt; O3 a33 -&gt; O3 a43 -&gt; O3 a53 -&gt; O3 a13 -&gt; O4 a23 -&gt; O4 a33 -&gt; O4 a43 -&gt; O4 a53 -&gt; O4 } ``` output: simplest 3.11.2 complicated case ```{.graph .center caption=&quot;complicated&quot; fileName=&quot;graphviz_complicated&quot;} digraph G { rankdir = LR; splines=false; edge[style=invis]; /* hide the edges */ ranksep= 1.4; /* {...} specifies the scope of the node property */ { node [shape=circle, color=yellow, style=filled, fillcolor=yellow]; x0 [label=&lt;x&lt;sub&gt;0&lt;/sub&gt;&gt;]; a02 [label=&lt;a&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;(2)&lt;/sup&gt;&gt;]; a03 [label=&lt;a&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;(3)&lt;/sup&gt;&gt;]; } { node [shape=circle, color=chartreuse, style=filled, fillcolor=chartreuse]; x1 [label=&lt;x&lt;sub&gt;1&lt;/sub&gt;&gt;]; x2 [label=&lt;x&lt;sub&gt;2&lt;/sub&gt;&gt;]; x3 [label=&lt;x&lt;sub&gt;3&lt;/sub&gt;&gt;]; } { node [shape=circle, color=dodgerblue, style=filled, fillcolor=dodgerblue]; a12 [label=&lt;a&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;(2)&lt;/sup&gt;&gt;]; a22 [label=&lt;a&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;(2)&lt;/sup&gt;&gt;]; a32 [label=&lt;a&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;(2)&lt;/sup&gt;&gt;]; a42 [label=&lt;a&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;(2)&lt;/sup&gt;&gt;]; a52 [label=&lt;a&lt;sub&gt;5&lt;/sub&gt;&lt;sup&gt;(2)&lt;/sup&gt;&gt;]; a13 [label=&lt;a&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;(3)&lt;/sup&gt;&gt;]; a23 [label=&lt;a&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;(3)&lt;/sup&gt;&gt;]; a33 [label=&lt;a&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;(3)&lt;/sup&gt;&gt;]; a43 [label=&lt;a&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;(3)&lt;/sup&gt;&gt;]; a53 [label=&lt;a&lt;sub&gt;5&lt;/sub&gt;&lt;sup&gt;(3)&lt;/sup&gt;&gt;]; } { node [shape=circle, color=coral1, style=filled, fillcolor=coral1]; O1 [label=&lt;a&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;(4)&lt;/sup&gt;&gt;]; O2 [label=&lt;a&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;(4)&lt;/sup&gt;&gt;]; O3 [label=&lt;a&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;(4)&lt;/sup&gt;&gt;]; O4 [label=&lt;a&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;(4)&lt;/sup&gt;&gt;]; } { rank=same; /* Rank constraints on the nodes in a subgraph. */ x0-&gt;x1-&gt;x2-&gt;x3; /* specifies the relative position of the four nodes */ } { rank=same; a02-&gt;a12-&gt;a22-&gt;a32-&gt;a42-&gt;a52; } { rank=same; a03-&gt;a13-&gt;a23-&gt;a33-&gt;a43-&gt;a53; } { rank=same; O1-&gt;O2-&gt;O3-&gt;O4; } a02-&gt;a03; // prevent tilting l0 [shape=plaintext, label=&quot;layer 1 (input layer)&quot;]; l0-&gt;x0; {rank=same; l0;x0}; l1 [shape=plaintext, label=&quot;layer 2 (hidden layer)&quot;]; l1-&gt;a02; {rank=same; l1;a02}; l2 [shape=plaintext, label=&quot;layer 3 (hidden layer)&quot;]; l2-&gt;a03; {rank=same; l2;a03}; l3 [shape=plaintext, label=&quot;layer 4 (output layer)&quot;]; l3-&gt;O1; {rank=same; l3;O1}; edge[style=solid, tailport=e, headport=w]; /* let all the edges point to the same position. */ {x0; x1; x2; x3} -&gt; {a12;a22;a32;a42;a52}; {a02;a12;a22;a32;a42;a52} -&gt; {a13;a23;a33;a43;a53}; {a03;a13;a23;a33;a43;a53} -&gt; {O1,O2,O3,O4}; } ``` output: complicated 3.12 others 3.12.1 节点形状 ```{.graph .center caption=&quot;节点形状&quot; fileName=&quot;graphviz_demo_other_1&quot;} digraph G { size = &quot;4, 4&quot;; main [shape=box]; /* 这是注释 */ main -&gt; parse [weight=8]; parse -&gt; execute; main -&gt; init [style=dotted]; main -&gt; cleanup; execute -&gt; { make_string; printf} init -&gt; make_string; edge [color=red]; // 设置生效 main -&gt; printf [style=bold,label=&quot;100 times&quot;]; make_string [label=&quot;make a\\n字符串&quot;]; node [shape=box,style=filled,color=&quot;.7 .3 1.0&quot;]; execute -&gt; compare; } ``` output: 节点形状 3.12.2 标签 ```{.graph .center caption=&quot;标签实例&quot; fileName=&quot;graphviz_demo_other_2&quot;} digraph G { a -&gt; b -&gt; c; b -&gt; d; a [shape=polygon,sides=5,peripheries=3,color=lightblue,style=filled]; c [shape=polygon,sides=4,skew=.4,label=&quot;hello world&quot;] d [shape=invtriangle]; e [shape=polygon,sides=4,distortion=.7]; } ``` output: 标签实例 3.12.3 二分查找树 ```{.graph .center caption=&quot;二分查找树&quot; fileName=&quot;graphviz_demo_other_3&quot;} digraph g { node [shape = record,height=.1]; node0[label = &quot;&lt;f0&gt; |&lt;f1&gt; G|&lt;f2&gt; &quot;]; node1[label = &quot;&lt;f0&gt; |&lt;f1&gt; E|&lt;f2&gt; &quot;]; node2[label = &quot;&lt;f0&gt; |&lt;f1&gt; B|&lt;f2&gt; &quot;]; node3[label = &quot;&lt;f0&gt; |&lt;f1&gt; F|&lt;f2&gt; &quot;]; node4[label = &quot;&lt;f0&gt; |&lt;f1&gt; R|&lt;f2&gt; &quot;]; node5[label = &quot;&lt;f0&gt; |&lt;f1&gt; H|&lt;f2&gt; &quot;]; node6[label = &quot;&lt;f0&gt; |&lt;f1&gt; Y|&lt;f2&gt; &quot;]; node7[label = &quot;&lt;f0&gt; |&lt;f1&gt; A|&lt;f2&gt; &quot;]; node8[label = &quot;&lt;f0&gt; |&lt;f1&gt; C|&lt;f2&gt; &quot;]; &quot;node0&quot;:f2 -&gt; &quot;node4&quot;:f1; &quot;node0&quot;:f0 -&gt; &quot;node1&quot;:f1; &quot;node1&quot;:f0 -&gt; &quot;node2&quot;:f1; &quot;node1&quot;:f2 -&gt; &quot;node3&quot;:f1; &quot;node2&quot;:f2 -&gt; &quot;node8&quot;:f1; &quot;node2&quot;:f0 -&gt; &quot;node7&quot;:f1; &quot;node4&quot;:f2 -&gt; &quot;node6&quot;:f1; &quot;node4&quot;:f0 -&gt; &quot;node5&quot;:f1; } ``` output: 二分查找树 3.12.4 cluster ```{.graph .center caption=&quot;边直接指向cluster&quot; fileName=&quot;graphviz_demo_other_4&quot;} digraph G { compound=true; subgraph cluster0 { a; } subgraph cluster1 { b; } a -&gt; b [lhead=cluster1]; } ``` output: 边直接指向cluster 3.12.5 matrix ```{.graph .center caption=&quot;graphviz matrix&quot; .numberLines startFrom=&quot;1&quot; fileName=&quot;graphviz_matrix&quot;} digraph matrix { 723-&gt;722 505-&gt;732 729-&gt;732 731-&gt;730-&gt;729 726-&gt;729 730-&gt;726 726-&gt;810-&gt;725 729-&gt;810-&gt;725 729-&gt;733-&gt;792-&gt;793 722-&gt;731 732-&gt;737-&gt;736-&gt;733 733-&gt;810-&gt;725 729-&gt;505 736-&gt;506 505-&gt;506 179-&gt;759 759-&gt;725 759-&gt;737 759-&gt;769-&gt;768-&gt;778 768-&gt;303 737-&gt;739-&gt;736-&gt;778 736-&gt;769 778-&gt;303 506-&gt;303 769-&gt;506 769-&gt;780 778-&gt;779 736-&gt;773-&gt;774-&gt;779-&gt;780 779-&gt;303 780-&gt;303 506-&gt;780 505-&gt;724 } ``` output: graphviz matrix 4 Blog 结合hexo一起High. 4.1 pandoc config My Blog Config pandoc: extra: - standalone: - highlight-style: haddock - number-offset: 0 - columns: 200 - css: /css/pandoc.css - filter: graphviz.py mathEngine: mathjax 4.2 filter graphviz.py #!/usr/bin/python3 import os import sys import hashlib import pygraphviz from pandocfilters import toJSONFilter, Para, Image from pandocfilters import get_caption, get_extension, get_value tmp_path = &#39;/tmp/gitblog&#39; top_path = os.path.abspath(os.path.dirname(__file__)) dir_name = &#39;graph-image&#39; git_path = &#39;https://gitee.com/lidongai/assets_blog_post/raw/master/&#39; git_post = &#39;?sanitize=true&#39; doc_tmpl = r&quot;&quot;&quot;\\documentclass[12pt,border=5pt,varwidth=true]{standalone} \\usepackage{graphicx} \\usepackage[utf8]{inputenc} \\usepackage[T1]{fontenc} \\usepackage{psfrag} \\begin{document} \\input{%s} \\includegraphics{%s} \\end{document} &quot;&quot;&quot; def graphviz(key, value, format, meta): if key == &#39;CodeBlock&#39;: [[ident, classes, keyvals], code] = value if &quot;graph&quot; in classes: caption, typef, keyvals = get_caption(keyvals) prog, keyvals = get_value(keyvals, u&quot;prog&quot;, u&quot;dot&quot;) filetype = get_extension(format, &quot;svg&quot;, html=&quot;svg&quot;, latex=&quot;pdf&quot;) md5 = hashlib.sha1(code.encode(sys.getfilesystemencoding())).hexdigest() basename, _ = get_value(keyvals, u&quot;fileName&quot;) if basename is None: sys.stderr.write(&#39;not set filename in {}\\n&#39;) exit(-1) latex, _ = get_value(keyvals, u&quot;latex&quot;) if latex is not None: filetype = &#39;png&#39; filename = basename + &#39;.&#39; + filetype while True: try: datapath = meta[&#39;datapath&#39;][&#39;c&#39;] drafts_idx = datapath.find(&#39;_drafts&#39;) if drafts_idx &gt; 0: prefix = datapath[drafts_idx+8:-3] else: prefix = datapath[datapath.find(&#39;_posts&#39;)+7:-3] filepath = os.path.join(prefix, dir_name, filename) if drafts_idx &gt; 0: localpath = os.path.join(top_path, &quot;source/assets&quot;, filepath) remotepath = os.path.join(&quot;/assets&quot;, filepath) else: localpath = os.path.join(top_path, &quot;source/_assets&quot;, filepath) remotepath = os.path.join(git_path, filepath) + git_post if os.path.exists(localpath): if os.path.exists(localpath + &#39;.&#39; + md5): break else: os.system(&#39;rm -f %s*&#39; % localpath) dir = os.path.dirname(localpath) if not os.path.isdir(dir): os.makedirs(dir) if latex is None: g = pygraphviz.AGraph(string=code) g.layout() g.draw(localpath, prog=prog) else: ladot_file = os.path.join(tmp_path, &#39;{}.ladot&#39;.format(basename)) latex_file = os.path.join(tmp_path, &#39;{}.latex&#39;.format(basename)) with open(ladot_file, &#39;w&#39;) as f: f.write(code) with open(latex_file, &#39;w&#39;) as f: f.write(doc_tmpl % (&#39;{}.tex&#39;.format(basename), &#39;{}.ps&#39;.format(basename))) resolution, _ = get_value(keyvals, u&quot;resolution&quot;) if resolution is None: resolution = &quot;1200&quot; density, _ = get_value(keyvals, u&quot;density&quot;) if density is None: density = &quot;200&quot; os.system(&#39;{}/ladot {} {} {} {}&#39;.format(top_path, ladot_file, tmp_path, resolution, density)) if os.path.exists(&#39;%s.png&#39; % os.path.join(tmp_path, basename)): os.system(&#39;cp %s.png %s&#39; % (os.path.join(tmp_path, basename), localpath)) sys.stderr.write(&#39;Local Path [&#39; + localpath + &#39;]\\n&#39;) sys.stderr.write(&#39;Remote Path [&#39; + remotepath + &#39;]\\n&#39;) os.system(&#39;touch %s.%s&#39; % (localpath, md5)) except Exception as e: sys.stderr.write(&#39;{}: not found datapath in meta, please patch/run.sh\\n&#39;.format(e)) exit(-1) finally: break image = Image([ident, classes, keyvals], caption, [remotepath, typef]) return Para([image]) if __name__ == &quot;__main__&quot;: if not os.path.exists(tmp_path): os.mkdir(tmp_path) toJSONFilter(graphviz) 4.3 ladot #!/usr/bin/perl %paststubs = (); if (@ARGV != 4) { die &quot;Usage: $0 [infile] [workspace dir] [resolution] [density]&quot;; } # switch to workspace dir chdir($ARGV[1]) or die &quot;$!&quot;; $resolution = $ARGV[2] $density = $ARGV[3] # Open input and output files open(INFILE, &quot;&lt;$ARGV[0]&quot;); $ARGV[0] =~ /(.*)\\.ladot$/; $basename = $1; if ($basename eq &quot;&quot;) { $basename = $ARGV[0]; } open(DOTOUT, &quot;&gt;$basename.dot&quot;); open(TEXOUT, &quot;&gt;$basename.tex&quot;); while ($line = &lt;INFILE&gt;) { while ($line =~ /(\\$.*?\\$)(\\((\\d+)\\))?/) { # print &quot;LINE: $line&quot;; $sizehint = $3; # print &quot;SIZEHINT: $sizehint\\n&quot;; $tex = $1; $stub = make_stub($tex, $sizehint); $line =~ s/(\\$.*?\\$)(\\((\\d+)\\))?/$stub/; print TEXOUT &quot;\\\\psfrag{$stub}[cc][cc]{$tex}\\n&quot;; } print DOTOUT $line; } close(DOTOUT); close(TEXOUT); # Generate postscript of the graph, with stubs system(&quot;dot -Tps $basename.dot &gt; $basename.ps&quot;); # LaTeX if (-e &quot;$basename.latex&quot;) { system(&quot;latex $basename.latex &gt; $basename.latex.log&quot;); if (-e &quot;$basename.dvi&quot;) { system(&quot;dvips $basename.dvi -D $resolution -o $basename.dvips &gt; $basename.dvips.log&quot;); if (-e &quot;$basename.dvips&quot;) { system(&quot;pstoimg $basename.dvips -density $density -out $basename.png &gt; $basename.pstoimg.log&quot;); } } } # Graphviz 2.2 and later outputs postscript in which psfrag won&#39;t replace tags. # This is psfrag&#39;s fault, but our problem. Here&#39;s a fix. system(&quot;sed -ibackup \\&quot;s/xshow/pop show/g\\&quot; $basename.ps&quot;); # There is a way to get sed to modify in place with no backup file, but # it seems the syntax of this option is slightly different in different # versions of sed. So we just remove the backup ourselves. # unlink(&quot;$basename.psbackup&quot;); # unlink(&quot;$basename.dot&quot;); sub make_stub($$) { # Make a placeholder (stub) for the TeX which will be substituted for the # real formatted TeX later. Arguments are TeX code and an optional # &quot;hint&quot; about the desired width of the box. # This is tricky because the length of the stub # that we choose affects how Dot formats the PostScript. We use the # heuristic that the length of the LaTeX code is correlated with the # amount of space needed to render the LaTeX code. if ($paststubs{$_[0]}) { return $paststubs{$_[0]}; } my $length = int($_[1]); if ($length == 0) { # no sizehint given $length = length($_[0]) - 1; } # print &quot;LENGTH of $_[0]: $length\\n&quot;; # The first character of an unquoted string in Dot has to be one of these. $first_charset=&quot;_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;; # Subsequent characters can be any of these. $subseq_charset=&quot;1234567890$first_charset&quot;; my $stub = &quot;&quot;; for (my $i = 1; $i &lt;= $length; $i++) { if ($i == 1) { $charset = $first_charset; } else { $charset = $subseq_charset; } $stub .= substr($charset, int(rand(length($charset))), 1); } #print &quot;NEW STUB for $_[0]: $stub\\n&quot;; $paststubs{$_[0]} = $stub; return $stub; } 5 References http://www.nrstickley.com/pandoc-markdown http://github.com/qrsforever/git-blog-setting https://zhu45.org/posts/2017/May/25/draw-a-neural-network-through-graphviz https://www.iteye.com/blog/gashero-1748795#id32 https://blog.csdn.net/mouday/article/details/80902992 https://blog.csdn.net/sd10086/article/details/52979462 https://zhuanlan.zhihu.com/p/51578351","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"论文在线","date":"2019-07-24T02:00:08.000Z","path":"2019/07/24/Story/Website/papers/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Paper Search Other 1 Paper paperswithcode Github pwc Github arxiv arXiv-sanity arXiv-vanity computer-vision 通天塔翻译 jmlr nips 2 Search Semantic scholar Google scholar 3 Other Scirate","tags":[{"name":"Website","slug":"Website","permalink":"https://qrsforever.github.io/tags/Website/"}]},{"title":"(原创)卷积三种模式使用numpy实现","date":"2019-07-23T05:52:26.000Z","path":"2019/07/23/ML/Guide/conv_mode/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Mode full same valid Codes References 1 Mode Below the output of three modes: Filter size must be odd number, eg: 3x3, 5x5. here we consider the situation which the size of image is not less than the size of filter. let image: m x m and filter: n x n mode size of ouptut extend matrix size full m + n - 1 m + 2(n - 1) same m m + n - 1 valid m - n + 1 m if: A is 6x6, m = 6 V is 3x3, n = 3 1.1 full mode size of ouptut extend matrix size full 6+3-1 = 8 6+2*(3-1) = 10 1.2 same mode size of ouptut extend matrix size same 6 6+3-1 = 8 1.3 valid mode size of ouptut extend matrix size valid 6-3+1 = 4 6 2 Codes Only using numpy implement the conv2d, and compare the ouput with scipy.signal.convolve2d.","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(原创)神经网络之反向传播实例","date":"2019-07-19T13:41:28.000Z","path":"2019/07/19/ML/Scratch/backpropagation_algorithm/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Description Drawit Codes References 1 Description Implement the backpropagation algorithm in python, but not use third libs(numpy, pandas...) Demo is a standard neural network structure: one input layer, one hiden layer and one output layer. The activite function of the hiden and ouput nodes is sigmoid. The evaluation of the backpropagation algorithm use cross validation K-folds which make good use for limited dataset. 2 Algorithm The backpropagation equations provide us with a way of computing the gradient of the cost function. Let's explicitly write this out in the form of an algorithm: Input x: Set the corresponding activation \\(a^1\\) for the input layer. Feedforward: For each \\(l = 2, 3, \\ldots, L\\) compute \\(z^l=w^la^{l−1}+b^l and a^l=\\sigma(z^l)\\). Output error \\(\\delta^L\\): Compute the vector \\(\\nabla_a C \\odot \\sigma&#39;(z^L)\\). Backpropagate the error: For each \\(l = L-1, L-2, \\ldots, 2\\) compute \\(\\delta^{l} = ((w^{l+1})^T \\delta^{l+1}) \\odot \\sigma&#39;(z^{l})\\). Output: The gradient of the cost function is given by \\(\\frac{\\partial C}{\\partial w^l_{jk}} = a^{l-1}_k \\delta^l_j\\) and \\(\\frac{\\partial C}{\\partial b^l_j} = \\delta^l_j\\). 3 Drawit neuron *********** *** *** ** output ** * * * sigmoid(WX + b) * * * ** weights ** *** *** *********** delta: the middle signal. the derivative of the final activite function below is multilayer perceptron and the delta errors: 4 Codes 百度云盘Datasets 4.1 demo 1","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"数据集","date":"2019-07-19T12:59:12.000Z","path":"2019/07/19/Story/Website/dataset/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 百度云盘Dataset 1 Statistics pass 2 ML UCI Kaggle mldata","tags":[{"name":"Website","slug":"Website","permalink":"https://qrsforever.github.io/tags/Website/"}]},{"title":"(draft)神经网络之卷积过程实例","date":"2019-07-19T07:33:06.000Z","path":"2019/07/19/ML/Scratch/nn_convolution/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Introduction Notation Full Connected Network Convolutional Neural Network Standard Neural Network and Convolution Nerual Network Codes demo1 demo2 References 1 Introduction 1.1 Notation symbols definitions used in full text is here 1.2 Full Connected Network for all errors(loss) function is: \\[ \\{E^{(n)}\\} = \\dfrac{1}{2} \\sum^{N}_{n = 1} \\sum^{c}_{k = 1} \\big( t^{(n)}_k - y^{(n)}_k \\big)^2 \\] for one item error of them is: \\[ E^{(n)} = E = \\dfrac{1}{2} \\sum^{c}_{k = 1} \\big( t^{(n)}_k - y^{(n)}_k \\big)^2 = \\dfrac{1}{2} \\begin{Vmatrix} \\mathbf{t}^{(n)} - \\mathbf{y}^{(n)} \\end{Vmatrix}^2_2 \\label{error} \\tag{1} \\] at times, we simplify the equation by emitting the superscript \\({(n)}\\), just below: \\(E = \\dfrac{1}{2} \\begin{Vmatrix} \\mathbf{t} - \\mathbf{y} \\end{Vmatrix}^2_2 \\label{error_one} \\tag{2}\\) the last output layer \\(\\mathbf{y}^{[L]}\\) breif as: \\[ \\begin{align*} \\mathbf{y} &amp;= \\mathbf{a}^{[L]} \\\\ &amp;= \\mathbf{a}^{[L]}\\color{Red}{\\bigg(\\mathbf{z}^{[L]}\\bigg)} \\\\ &amp;= \\mathbf{a}^{[L]}\\color{Red}{\\bigg(\\mathbf{W}^{[L]} \\mathbf{a}^{[L-1]}\\color{Blue}{\\big(\\mathbf{z}^{[L-1]}\\big)} + \\mathbf{b}^{[L]}\\bigg)} \\\\ &amp;= \\mathbf{a}^{[L]}\\color{Red}{\\bigg(\\mathbf{W}^{[L]} \\mathbf{a}^{[L-1]}\\color{Blue}{\\big(\\mathbf{W}^{[L-1]} \\mathbf{a}^{[L-2]}\\color{Green}{(\\mathbf{z}^{[L-2]})} + \\mathbf{b}^{[L-1]}\\big)} + \\mathbf{b}^{[L]}\\bigg)} \\\\ &amp;= \\mathbf{a}^{[L]}\\color{Red}{\\bigg(\\mathbf{W}^{[L]} \\mathbf{a}^{[L-1]}\\color{Blue}{\\big(\\mathbf{W}^{[L-1]} \\mathbf{a}^{[L-2]}\\color{Green}{(\\mathbf{W}^{[L-2]} \\mathbf{a}^{[L-3]}\\color{Black}{(\\mathbf{z}^{[L-3]})} + \\mathbf{b}^{[L-2]})} + \\mathbf{b}^{[L-1]}\\big)} + \\mathbf{b}^{[L]}\\bigg)} \\\\ &amp;= \\cdots \\end{align*} \\label{y_equ} \\tag{3} \\] let's have a look the derivative \\(\\delta^{[L]}\\) of the error with respect to the neurons \\(z^{[L]}\\) of the last output layer: from the equation \\(\\ref{error_one}\\) : \\[ \\delta^{L} = \\dfrac{\\partial E}{\\partial {z^{[L]}}} = (\\mathbf{y}-\\mathbf{t}) \\odot \\dfrac{\\partial \\mathbf{a}^{[L]}(z^{[L]})}{\\partial {z^{[L]}}} \\] pre layer, using the chain rule of derivative: \\[ \\delta^{L-1} = \\dfrac{\\partial E}{\\partial {z^{[L-1]}}} = \\dfrac{\\partial E}{\\partial {z^{[L]}}} \\dfrac{\\partial {z^{[L]}}}{\\partial \\mathbf{a}^{[L-1]}(z^{[L-1]})} \\dfrac{\\partial \\mathbf{a}^{[L-1]}(z^{[L-1]})}{\\partial {z^{[L-1]}}} \\] let \\(a^l = \\sigma^l(z^l)\\), then(matrix multiplication): \\[ \\delta^l = (W^{l+1})^T \\delta^{l+1} \\sigma&#39;(z^{l}) \\] 1.3 Convolutional Neural Network pass 1.4 Standard Neural Network and Convolution Nerual Network The difference between them is the calculate, one is matrix multiplication and another is convolution, apart from this, they are nearly the same. weights sharing below we display the convert: matrix: +----------------------+ weights | | | 1 2 3 | +-------------+ +--------------+ | = = | | 1 2 | | 23 33 | | | | | | | | 4 5 6 | * | | = | | | = = | | 3 4 | | 53 63 | | | +-------------+ +--------------+ | 7 8 9 | | | first rotate 180 mode = &quot;valid&quot; +----------------------+ Image Kernel or Convolution matrices or Mask 3 X 3 2 X 2 ---------------------------------------------------------------------------------- vector: * 4 (w_22) 1 --------------\\ WX + b * 3 (w_21) \\ 2 --------------\\ \\ \\ \\ 4 + 6 3 + -------------&gt; 23: * 2 (w_12) / / 8 + 5 4 --------------/ / * 1 (w_11) / 33 weight sharing &lt;-- 5 --------------/ * 4 (w_22) \\ 53 6 -------------\\ \\ * 3 (w_21) \\ \\ 20 + 18 7 + --------------&gt; 63 * 2 (w_12) / / 16 + 9 8 -------------/ / * 1 (w_11) / 9 -------------/ inputs hiden 9 X 1 4 X 1 ---------------------------------------------------------------------------------- the forward feed and back propagation. ### zero-padding benifits: - make hight and width same with the previous layer - keep more information at the border of one image Feedforward in CNN is identical with convolution operation: 2 Codes 2.1 demo1 install skimage: sudo pip3 install scikit-image, this demo1 using numpy implemets the simple convolution neural network.","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"国内镜像","date":"2019-07-18T02:31:07.000Z","path":"2019/07/18/Tools/How/china_images/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ apt 阿里 清华大学 东北大学 mvn pip docker npm gradle anaconda 清华大学 上海交通大学 上海科技大学 1 apt modify /etc/apt/sources.list 1.1 阿里 deb-src http://archive.ubuntu.com/ubuntu xenial main restricted deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe deb http://mirrors.aliyun.com/ubuntu/ xenial universe deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse deb http://archive.canonical.com/ubuntu xenial partner deb-src http://archive.canonical.com/ubuntu xenial partner deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 1.2 清华大学 deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial multiverse deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates multiverse deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security multiverse 1.3 东北大学 deb-src http://mirror.neu.edu.cn/ubuntu/ xenial main restricted deb http://mirror.neu.edu.cn/ubuntu/ xenial main restricted deb-src http://mirror.neu.edu.cn/ubuntu/ xenial restricted multiverse universe deb http://mirror.neu.edu.cn/ubuntu/ xenial-updates main restricted deb-src http://mirror.neu.edu.cn/ubuntu/ xenial-updates main restricted multiverse universe deb http://mirror.neu.edu.cn/ubuntu/ xenial universe deb http://mirror.neu.edu.cn/ubuntu/ xenial-updates universe deb http://mirror.neu.edu.cn/ubuntu/ xenial multiverse deb http://mirror.neu.edu.cn/ubuntu/ xenial-updates multiverse deb http://mirror.neu.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb-src http://mirror.neu.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb http://archive.canonical.com/ubuntu xenial partner deb-src http://archive.canonical.com/ubuntu xenial partner deb http://mirror.neu.edu.cn/ubuntu/ xenial-security main restricted deb-src http://mirror.neu.edu.cn/ubuntu/ xenial-security main restricted multiverse universe deb http://mirror.neu.edu.cn/ubuntu/ xenial-security universe deb http://mirror.neu.edu.cn/ubuntu/ xenial-security multiverse 2 mvn set your project's settings.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;settings&gt; &lt;localRepository&gt;/home/lidong/.m2/repository&lt;/localRepository&gt; &lt;mirrors&gt; &lt;!-- 使用国内仓库 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;local private nexus&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;local private nexus&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;!-- &lt;activeProfile&gt;nexus&lt;/activeProfile&gt; --&gt; &lt;/activeProfiles&gt; &lt;/settings&gt; 3 pip modify ~/.config/pip/pip.conf, then don't use sudo [global] index-url = https://mirrors.aliyun.com/pypi/simple/ extra-index-url = https://pypi.tuna.tsinghua.edu.cn/simple/ http://pypi.mirrors.ustc.edu.cn/simple/ http://pypi.douban.com/simple [install] install-option = --prefix=~/.local trusted-host = mirrors.aliyun.com pypi.tuna.tsinghua.edu.cn pypi.mirrors.ustc.edu.cn pypi.douban.com 4 docker modify /etc/docker/daemon.json and systemctl restart docker.service { &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] } or { &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;] } or { &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;] } 5 npm npm config set registry https://registry.npm.taobao.org npm config get registry 6 gradle set your project's build.gradle buildscript { repositories { maven{ url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39; } maven{ url &#39;http://maven.aliyun.com/nexus/content/repositories/jcenter&#39;} } dependencies { classpath &#39;com.android.tools.build:gradle:3.3.0-alpha13&#39; } } allprojects { repositories { maven{ url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;} maven{ url &#39;http://maven.aliyun.com/nexus/content/repositories/jcenter&#39;} } } task clean(type: Delete) { delete rootProject.buildDir } 7 anaconda edit ~/.condarc 7.1 清华大学 channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ ssl_verify: true 7.2 上海交通大学 channels: - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/ - https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/free/ - https://mirrors.sjtug.sjtu.edu.cn/anaconda/cloud/conda-forge/ ssl_verify: true 7.3 上海科技大学 channels: - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/ - https://mirrors.ustc.edu.cn/anaconda/pkgs/free/ - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/ ssl_verify: true","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"(原创)神经网络之交叉熵代码实例","date":"2019-07-01T14:47:37.000Z","path":"2019/07/01/ML/Scratch/nn_crossent/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Intro SE and CE Gradient Hiden Codes ____________________________________________________ /\\ \\ \\_| | | z_0^h = sum_i^I(w[i, 0]^h * inputNode_i + b_0^h) | | | | hideNode_0 = tanh(z_0^h) | | | | _______________________________________________|_ \\_/_________________________________________________/ | | __________________________________________________ | /\\ \\ | \\_| | | | z_0^o = sum_j^J(w[j, 0]^o * hideNode_j + b_0^o | | | | inputNode: I | | ouputNode = softmax(z_0^o) | hidenNode: J | | | outputNode: K | | _____________________________________________|_ | \\_/_______________________________________________/ | | | | | | | | | | | | I J | K | | | tanh(z_0^h) softmax(z_0^o) ***** ***** ***** ** ** w[0, 0] ** ** w[0, 0] ** ** * * -----------&gt; * b_0 * -------------&gt; * * ** ** &gt; ** ** &gt; ** ** ***** / ^ ***** -/ ^ ***** -/ / -/ / / | -/ / w[1,0] / / w[1, 0]/ / -/ / -/ / / | -/ | ***** / / ***** -/ / ** ** -/ / ** ** / / * * | * b_1 * / ** ** / ** ** / ***** / ***** / . / . / . | . / . / . / / | w[i,0]| w[j, 0] / / / ***** / ***** / ***** ** **_| ** **- ** ** * * * b_j * * * ** ** ** ** ** ** ***** ***** ***** ith inputNode jth hideNode kth outputNode 1 Intro Above drawit, only one hiden layer with activation funciton tanh, and the output layer with activation function softmax(归一化指数函数). The input layer: have I nodes, the ith node is \\(x_i\\). The hiden layer: have J nodes, weight: \\(\\theta_{ij}\\), activation function: \\(tanh^{hiden}(z_j)\\), shortening: \\(a^h(z_j)\\) and \\(z_j = \\sum_i^I \\theta_{ij} x_i + b_i \\label{z_j} \\tag{1}\\). The output layer: have K nodes, weight: \\(\\theta_{jk}\\), activation function: \\(softmax^{output}(z_k)\\), shortening: \\(a^o(z_k)\\). and \\(z_k = \\sum_j^J \\theta_{jk} x_j + b_j \\label{z_k} \\tag{2}\\) \\(tanh(z_i)\\) and its derivative (equation only contain \\(z_i\\)): let \\(tanh(z_i) = \\dfrac{1-e^{-2z_i}}{1 + e^{-2z_i}}\\) then: \\[ \\begin{align*} tanh&#39;(z_i) &amp;= 1 - tanh^2(z_i) \\\\ &amp;= (1 + tanh(z_i))(1 - tanh(z_i)) \\\\ \\end{align*} \\] \\(softmax(z_i)\\) and its partial derivative (equation not only contain \\(z_i\\) but also contain other z-nodes in denominator): let \\(softmax(z_i) = \\dfrac{e^z_i}{\\sum_k^K e^{z_k}}\\) then: \\[ \\left\\{\\begin{align*} \\text{ if } i = j; \\ \\ \\dfrac{\\partial softmax&#39;(z_i)}{\\partial z_i} &amp;= \\dfrac{e^{z_i} \\sum_k^K e^{zk} - e^{z_i}e^{z_i}}{\\left(\\sum_k^K e^{z_k}\\right)^2} \\\\ &amp;= softmax(z_i)(1 - softmax(z_i)) \\\\ &amp;= a_i(1-a_i) \\label{i_eq_j} \\tag{3} \\\\ \\\\ \\text{ if } i \\neq j; \\ \\ \\dfrac{\\partial softmax&#39;(z_j)}{\\partial z_i} &amp;= \\dfrac{0 - e^{z_j} e^{z_i}}{\\left(\\sum_k^K e^{z_k}\\right)^2} \\\\ &amp;= -softmax(z_i)softmax(z_j) \\\\ &amp;= -a_ia_j \\label{i_neq_j} \\tag{4} \\end{align*}\\right. \\] 2 SE and CE SE loss function: \\[ Loss = \\sum_{k=1}^{K} \\dfrac{1}{2} \\left(a^{o}(z_k) - y_k\\right)^2 \\] MSE(mean squared error): \\(\\dfrac{Loss}{K}\\) with \\(\\ref{i_eq_j}\\) and \\(\\ref{i_neq_j}\\), so the partial derivative of \\(z_k\\) (the kth output node): \\[ \\begin{align*} \\dfrac{\\partial Loss}{\\partial z_i} &amp;= \\dfrac{\\partial \\sum_{k=1}^{K} \\dfrac{1}{2} \\left( a^{o}(z_k) - y_k\\right )^2}{\\partial z_i} \\\\ &amp;= \\sum_{k=1}^K \\left(a^o(z_k) - y_k \\right) \\dfrac{\\partial a^o(z_k)}{\\partial z_i} \\\\ &amp;= \\sum_{k \\neq i}^K \\left(a^o(z_i) - y_i \\right) \\dfrac{\\partial a^o(z_k)}{\\partial z_i} + \\sum_{k=i}^K \\left(a^o(z_i) - y_i \\right) \\dfrac{\\partial a^o(z_i)}{\\partial z_i} \\\\ &amp;= \\sum_{k \\neq i}^K \\left(a^o(z_k) - y_k \\right) \\left( -a^o(z_k)a^o(z_i) \\right ) + \\left(a^o(z_i) - y_i \\right )a^o(z_i) \\left( 1-a^o(z_i) \\right ) \\\\ &amp;\\approx \\left(a^o(z_i) - y_i \\right )a^o(z_i) \\left( 1-a^o(z_i) \\right ) \\label{se_z_k} \\tag{5} \\end{align*} \\] above, the last equation \\(\\ref{se_z_k}\\) is because the softmax is 'one-hot' encoding, \\(\\text{ if } k \\neq i, \\text{ then } a^o(z_k) a^o(z_i) \\approx 0\\) CE loss function \\[ Loss = -\\sum_{k=1}^K H\\big(y_k, a^o(z_k)\\big) = -\\sum_{k=1}^K y_k log a^o(z_k) \\] MCEE(mean crossentropy error): \\(\\dfrac{Loss}{K}\\) so the partial derivative of \\(z_k\\), for short: Loss to L, \\(a^o(z_i)\\) to \\(a_i\\): \\[ \\begin{align*} \\dfrac{\\partial L}{\\partial z_i} &amp;= \\sum_k^K \\big(\\frac{\\partial L}{\\partial a_k} \\frac{\\partial a_k}{\\partial z_i}\\big) \\\\ &amp;= \\sum_{k\\neq i}^K \\big(\\frac{\\partial L}{\\partial a_k} \\frac{\\partial a_k}{\\partial z_i}\\big) + \\sum_{k=i}^K \\big(\\frac{\\partial L}{\\partial a_k} \\frac{\\partial a_k}{\\partial z_i}\\big) \\\\ &amp;= \\sum_{k\\neq i}^K \\big( -y_k\\frac{1}{a_k} \\frac{\\partial a_k}{\\partial z_i} \\big) + \\big( -y_k\\frac{1}{a_k} \\frac{\\partial a_k}{\\partial z_i} \\big) \\\\ &amp;= \\sum_{k\\neq i}^K \\big( -y_k\\frac{1}{a_k} (-a_i a_k) + \\big( -y_i\\frac{1}{a_i} a_i(1-a_i) \\big) \\\\ &amp;= \\sum_{k\\neq i}^K a_iy_k + (-y_i(1-a_i)) \\\\ &amp;= \\sum_{k\\neq i}^K a_iy_k + a_iy_i -y_i \\\\ &amp;= a_i\\sum_k^K y_k - y_i \\\\ &amp;= a_i - y_i \\label{ce_z_k} \\tag{6} \\end{align*} \\] we call \\(\\frac{\\partial L}{\\partial z_i}\\) above is the middle calculate signal, the last output layer as oSignal, the hiden layer as hSignal, the signal equation is different between SE and CE. 3 Gradient look back \\(\\ref{z_j}\\) and \\(\\ref{z_k}\\). below is the weight hoGrad as the hiden node to output node just is the partial derivative of Loss to \\(\\theta\\), the \\(hoGrad_{jk}\\) denote the partial derivative of Loss to the weight where from the jth node in hiden layer and target to the ith output node: \\[ \\text{hoGrad}_{jk} = \\dfrac{\\partial L}{\\partial \\theta_{jk}} = \\dfrac{\\partial L}{\\partial z_k} \\dfrac{\\partial z_k}{\\partial \\theta_{jk}} = \\dfrac{\\partial L}{\\partial z_k} a^h(z_j) = \\text{oSignal}_k\\ a^h(z_j) \\] and the bias obGrad: \\(\\text{obGrad}_k = \\dfrac{\\partial L}{\\partial b_{jk}} = \\text{oSignal}_k\\ * 1\\) 4 Hiden let \\(a_k\\) short for \\(a^o(z_k)\\) let \\(a_j\\) short for \\(a^h(z_j)\\) let oSignal short for list \\(\\dfrac{\\partial Loss}{\\partial z_k}; k \\in [1, K]\\) let hSignal short for list \\(\\dfrac{\\partial Loss}{\\partial z_j}; j \\in [1, J]\\) if \\(z_k = \\theta_{jk} a_j + b_k;\\ a_j = tanh(z_j);\\ z_j = \\theta_{ij} x_i + b_j\\), then: \\[ \\left\\{\\begin{matrix} \\dfrac{\\partial z_k}{\\partial \\theta_{jk}} = a_j; &amp; \\dfrac{\\partial z_k}{\\partial b_k} = 1 \\\\ \\dfrac{\\partial z_j}{\\partial \\theta_{ij}} = x_i; &amp; \\dfrac{\\partial z_j}{\\partial b_j} = 1 \\\\ \\end{matrix}\\right. \\label{d_weight_bias} \\tag{7} \\] and \\[ \\begin{matrix} \\dfrac{\\partial z_k}{\\partial a_j} = \\theta_{jk}; &amp; \\dfrac{\\partial z_j}{\\partial x_i} = \\theta_{ij} \\\\ \\end{matrix} \\label{d_a_x} \\tag{8} \\] and \\[ \\begin{align*} \\dfrac{\\partial a_j}{\\partial z_j} &amp;= \\dfrac{\\partial tanh(z_j)}{\\partial z_j} \\\\ &amp;= \\big(1+tanh(z_j)\\big)\\big(1-tanh(z_j)\\big) \\\\ &amp;= (1+a_j)(1-a_j) \\end{align*} \\label{d_tanh} \\tag{9} \\] from \\(\\ref{d_weight_bias}\\), \\(\\ref{d_a_x}\\) and \\(\\ref{d_tanh}\\), we can get the partial derivative of the jth hide node \\(z_j\\) by Loss is (each output node contain the weight of \\(z_j\\)): \\[ \\begin{align*} \\text{hSignal}_j = \\dfrac{\\partial Loss}{\\partial z_j} &amp;= \\sum_{k=1}^{K} \\dfrac{\\partial Loss}{\\partial a_k} \\dfrac{\\partial a_k}{\\partial z_k} \\dfrac{\\partial z_k}{\\partial a_j} \\dfrac{\\partial a_j}{\\partial z_j} \\\\ &amp;= \\sum_{k=1}^{K} \\dfrac{\\partial Loss}{\\partial z_k} \\dfrac{\\partial z_k}{\\partial a_j} \\dfrac{\\partial a_j}{\\partial z_j} \\\\ &amp;= \\sum_{k=1}^{K} \\text{oSignal}_k \\dfrac{\\partial z_k}{\\partial a_j} \\dfrac{\\partial a_j}{\\partial z_j} \\\\ &amp;= \\sum_{k=1}^{K} \\text{oSignal}_k \\theta_{jk} \\dfrac{\\partial a_j}{\\partial z_j} \\\\ &amp;= \\dfrac{\\partial a_j}{\\partial z_j} \\sum_{k=1}^{K} \\text{oSignal}_k \\theta_{jk} \\\\ &amp;= (1+a_j)(1-a_j) \\sum_{k=1}^{K} \\text{oSignal}_k \\theta_{jk} \\label{hsignal_z_j} \\tag{10} \\\\ \\end{align*} \\] for the partial derivative of the jth hide node's weight: \\[ \\begin{align*} \\text{ihGrad}_{ij} &amp;= \\dfrac{\\partial Loss}{\\partial \\theta_{ij}} \\\\ &amp;= \\dfrac{\\partial Loss}{\\partial z_j} \\dfrac{\\partial z_j}{\\partial \\theta_{ij}} \\\\ &amp;= \\text{hSignal}_j * x_i \\end{align*} \\] 5 Codes","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"MSE和CE不同","date":"2019-06-25T13:41:53.000Z","path":"2019/06/25/Story/Passage/diff_mse_ce/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} What's the difference between cross-entropy and mean-squared-error loss functions? These loss functions have different derivatives and different purposes. From a probabilistic point of view, the cross-entropy arises as the natural cost function to use if you have a sigmoid or softmax nonlinearity in the output layer of your network, and you want to maximize the likelihood of classifying the input data correctly. If instead you assume the target is continuous and normally distributed, and you maximize the likelihood of the output of the net under these assumptions, you get the MSE (combined with a linear output layer). For classification, cross-entropy tends to be more suitable than MSE -- the underlying assumptions just make more sense for this setting. That said, you can train a classifier with the MSE loss and it will probably work fine (although it does not play very nicely with the sigmoid/softmax nonlinearities, a linear output layer would be a better choice in that case). For regression problems, you would almost always use the MSE. Another alternative for classification is to use a margin loss, which basically amounts to putting a (linear) SVM on top of your network.","tags":[{"name":"Passage","slug":"Passage","permalink":"https://qrsforever.github.io/tags/Passage/"}]},{"title":"(原创)交叉熵实例","date":"2019-06-25T03:33:49.000Z","path":"2019/06/25/ML/Scratch/CE_error/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 神经网络 简图 描述 梯度 0.1 神经网络 0.1.1 简图 input layer hide layer1 hide layer2 ouput layer L-2 L-1 L N I J K ******* ******* ******* ******* ** ** ** ** a(z) ** ** a(z) ** ** a(z) * x1 * * wx+b * ------&gt; * wa+b * ------&gt; * wa+b * -----&gt; ** ** ** ** relu ** ** relu ** ** softmax ******* ******* ******* ******* ******* ******* ******* ******* ** ** ** ** ** ** ** ** * x2 * * * * * * * ** ** ** ** ** ** ** ** ******* ******* ******* ******* . . . . . . . . . . . . ******* ******* ******* ******* ** ** ** ** ** ** ** ** * xN * * hI * * hJ * * oK * ** ** ** ** ** ** ** ** ******* ******* ******* ******* a_i(z_i) a_j(z_j) a_k(z_k) 0.1.2 描述 神经网络包含1个输入层, 2个隐藏层, 1个输出层. 输出层(神经元)节点数为N, 总层数L, 所以倒数第一个隐藏层为第L-1层, 以此类推L-2层. 第一个隐藏层的节点数为I个, 第二个隐藏层的节点数为J个, 输出层的节点数为K个. 隐藏层使用的激活函数为Relu, 输出层的激活函数我Softmax. 除了输入层外, 每个神经元的输入都是上一层所有节点经过激活函数之后的值, 例如: 输出层的第k个神经元的真实输出\\(t_k\\) L层: \\[ \\begin{align*} z_i^{L-2} &amp;= \\sum_n^N w_{in}^{L-2} x_n + b_i \\\\ a_i^{L-2} &amp;= relu(z_i^{L-2}) \\\\ &amp;= max(0, z_i^{L-2} \\\\ z_j^{L-1} &amp;= \\sum_i^I w_{ji}^{L-1} a_i + b_j \\\\ a_j^{L-1} &amp;= relu(z_j^{L-1}) \\\\ &amp;= max(0, z_j^{L-1} \\\\ z_k^{L} &amp;= \\sum_j^{J} w_{kj}^{L} a_j + b_k \\tag{0} \\\\ a_k^{L} &amp;= softmax(z_k^{L}) \\\\ &amp;= \\frac{e^{z_k^{L}}}{\\sum_c^K e^{z_c^{L}}} \\end{align*} \\] 交叉熵(误差估计): \\[ \\begin{align} E = -\\sum_k^K t_k log a_k^L = -\\sum_k^K t_k (z_k^L - log\\sum_c^K e^{z_c^L}) \\tag{1} \\end{align} \\] 0.1.3 梯度 更新权重(组成第k个节点对应上一层第j个节点的参数): \\(\\Delta W \\propto =-\\frac{\\partial E}{\\partial W}\\) 输出层: \\[ \\begin{align*} \\Delta W_{kj}^L &amp;= -\\eta \\frac{\\partial E}{\\partial W_{kj}} \\\\ &amp;= -\\eta \\frac{\\partial E}{\\partial a_k^L} \\frac{\\partial a_k^L}{\\partial z_k^L} \\frac{\\partial z_k^L}{\\partial W_{kj}^l} \\\\ \\end{align*} \\] 计算: \\[ \\begin{align} \\frac{\\partial E}{\\partial W_{kj}^L} = \\frac{\\partial E}{\\partial z_{k}^L} \\frac{\\partial z_{k}^L}{\\partial W_{kj}^L} \\tag{2} \\end{align} \\] \\[ \\begin{align*} \\frac{\\partial E}{\\partial z_{k}^L} &amp;= - \\sum_{d}^K t_d (\\mathbb{1}_{d=k} - \\frac{1}{\\sum_c e^{z_c^L}} e^{z_k^L}) \\nonumber \\\\ &amp;= - \\sum_d^K t_d (\\mathbb{1}_{d=k} - a_k^L) \\nonumber \\\\ &amp;= \\sum_d^K t_d a_k^L - \\sum_d^K t_d \\mathbb{1}_{d=k} \\nonumber \\\\ &amp;= a_k^L \\sum_d^K t_d - t_k \\nonumber \\\\ &amp;= a_k^L - t_k \\end{align*} \\tag{3} \\] 其中: \\[ \\mathbb{1}_{d=k} = \\begin{cases} 1 &amp; \\quad \\text{if } d=k \\\\ 0 &amp; \\quad \\text{otherwise }. \\end{cases} \\] 再由\\(\\frac{\\partial z_{k}^L}{\\partial W_{kj}^L} = a_j^{L-1}\\)代入得: \\[ \\begin{align} \\frac{\\partial E}{\\partial W_{kj}^L} &amp;= \\frac{\\partial E}{\\partial z_{k}^L} \\frac{\\partial z_{k}^L}{\\partial W_{kj}^L} = (a_k^L - t_k) a_j^{L-1} \\end{align} \\] 偏袒b: \\[ \\begin{align} \\frac{\\partial E}{\\partial b_{k}^L} &amp;= \\frac{\\partial E}{\\partial z_{k}^L} \\frac{\\partial z_{k}^L}{\\partial b_{k}^L} = a_k^L - t_k \\end{align} \\] 其他层方法相似.","tags":[{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"数学符号表","date":"2019-06-25T01:53:18.000Z","path":"2019/06/25/Note/Math/symbols/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 统计学 数学操作符 机器学习 1 统计学 符号 描述 \\(\\mathbf{R}\\) 实数集 \\(\\mathbf{R^n}\\) n维实数向量空间, n维欧式空间 \\(H\\) 希尔伯特空间 \\(X\\) 输入空间 \\(Y\\) 输出空间 \\(x \\in X\\) 输入, 实例 \\(y \\in Y\\) 输出, 标记 \\(\\mathit{X}\\) 输入随机变量 \\(\\mathit{Y}\\) 输出随机变量 \\(T = {(x_1,y_1), (x_2,y_2), \\cdots, (x_N,y_N)}\\) 训练数据集 \\(N\\) 样本容量 \\((x_i,y_i)\\) 第i个训练数据点 \\(x = (x^{(1)}, x^{(2)}, \\cdots, x^{(n)})^T\\) 输入向量, n维实数向量 \\(x_i^{(j)}\\) 输入向量\\(x_i\\)的第j个分量 \\(\\mathit{P(X), P(Y)}\\) 概率分布 \\(\\mathit{P(X,Y)}\\) 联合概率分布 \\(\\mathbf{F}\\) 假设空间 \\(f \\in \\mathbf{F}\\) 模型, 特征函数 \\(\\theta, \\omega\\) 模型参数 \\(\\omega = (\\omega_1, \\omega_2, \\cdots, \\omega_n)^T\\) 权值向量 \\(b\\) 偏置 \\(J(f)\\) 模型复杂度 \\(R_emp\\) 经验风险或经验损失 \\(R_exp\\) 风险函数或期望损失 \\(L\\) 损失函数, 拉格朗日函数 \\(\\eta\\) 学习率 \\(\\begin{Vmatrix} x \\end{Vmatrix}_1\\) \\(L_1\\)范数 = \\(\\sum_{i=1}^{N}|x_i|\\) \\(\\begin{Vmatrix} x \\end{Vmatrix}_2\\) \\(L_2\\)范数 = \\(\\sqrt{\\sum_{i=1}^{N}x_i^2}\\) \\((x \\cdot {x}&#39;)\\) 向量\\(x\\)与\\({x}&#39;\\)內积 \\(\\mathit{H(X), H(p)}\\) 熵 \\(\\mathit{H(Y|X)}\\) 条件熵 \\(\\mathbf{S}\\) 分离超平面 \\(\\alpha = (\\alpha_1, \\alpha_2, \\cdots, \\alpha_n)^T\\) 拉格朗日乘子, 对偶问题变量 \\(\\alpha_i\\) 对偶问题的第i个变量 \\(K(x, z)\\) 核函数 \\(sign(x)\\) 符号函数 \\(I(x)\\) 指示函数 \\(Z(x)\\) 规范化因子 2 数学操作符 符号 描述 例子 \\(A \\bullet B, A \\cdot B\\) operation: dot product \\(A \\ast B\\) operation: convolution \\(A \\times B\\) operation: cross product (1,2,5) \\(\\times\\) (3,4,−1) = (−22, 16, − 2) \\(A \\odot B, A \\circ B\\) operation: Hadamard product, element-wise multiply \\(A \\otimes B\\) operation: Kronecker product, tensor product {1, 2, 3, 4} \\(\\otimes\\) {1, 1, 2} = { {1, 1, 2}, {2, 2, 4}, {3, 3, 6}, {4, 4, 8} } 3 机器学习 符号 描述 \\(N, c\\) the total number of training examples, number of classes of output \\(x^{(n)}, y^{(n)}\\) the superscript \\({(n)}\\) denote the variable for the \\(n^{th}\\) individual training example \\(x^{[l]}, w^{[l]}, a^{[l]}\\) the superscript \\({[l]}\\) denote the \\(l^{th}\\) layer, can drop \\([]\\) on single training example \\(z^{x,l}, a^{x,l}\\) the z, activition in the \\(l^{th}\\) on the \\(x^{th}\\) training example \\(n_H^{[l]},n_W^{[l]},n_C^{[l]}\\) the numbers of height, width, channel in the \\(l^{th}\\) layer \\(x_i, y_i, b_i\\) the subscript \\(i\\) denote the \\(i^{th}\\) elem of the vector \\(\\mathbf{x, y, b}\\) \\(w^l_{jk}\\) weights for connections from the \\(k^{th}\\) neuron in the \\((l-1)^{th}\\) layer to the \\(j^{th}\\) neuon in the \\(l^{th}\\) \\(b^l_j\\) the the bias of the \\(j^{th}\\) neuron in the \\(l^{th}\\) layer \\(a^l_j\\) the activation of the \\(j^{th}\\) neuron in the \\(l^{th}\\) layer \\(\\sigma\\left(\\right)\\) the activation function(or vectorized activation function) \\(\\mathbf{z}^l = \\mathbf{w}^l a^{l-1}+\\mathbf{b}^l\\) the intermediate quantity(vector) called weighted input \\(\\begin{eqnarray} a^{l}_j = \\sigma\\left( \\sum_k w^{l}_{jk} a^{l-1}_k + b^l_j \\right)\\end{eqnarray}\\) the the activation \\(a^{l}_j\\) in the in component form \\(\\begin{eqnarray} a^{l} = \\sigma(w^l a^{l-1}+b^l) = \\sigma(z^l)\\end{eqnarray}\\) the the activation \\(a^{l}\\) in a matrix form \\(Cost(), C, Loss(), L, Error(), E\\) the cost function \\(\\partial C / \\partial w, \\partial C / \\partial b\\) the partical derivatives that cost function with respect to any weights w and bias b in the network \\(y = y(x), t = t(x)\\) the corresponding desired ouput over the individual input x \\(s \\odot t\\) element wise product of the two vectors \\(\\sigma^l_j = \\dfrac{\\partial C}{\\partial z^l_j}\\) the error of the \\(j^{th}\\) neuron in the \\(l^{th}\\) layer \\(\\nabla_a C\\) vector of the partial dervatives \\(\\partial C / \\partial a^L_j\\), the rate of change of C with respect to the output activations \\(\\begin{eqnarray} \\delta^L = \\nabla_a C \\odot \\sigma&#39;(z^L) \\end{eqnarray}\\) the error of the ouput layer in matrix-based form \\(\\begin{eqnarray} \\delta^L = (a^L-y) \\odot \\sigma&#39;(z^L) \\end{eqnarray}\\) error in the case of the quadratic cost \\(\\begin{eqnarray} \\delta^l = ((w^{l+1})^T \\delta^{l+1}) \\odot \\sigma&#39;(z^l) \\end{eqnarray}\\) the error of nuerons in other layer out of the last layer \\(\\begin{eqnarray} \\dfrac{\\partial C}{\\partial w^l_{jk}} = a^{l-1}_k \\delta^l_j \\end{eqnarray}\\) the rate of change of the cost with respect to any weight \\(\\begin{eqnarray} \\dfrac{\\partial C}{\\partial w^l} =\\delta^l (a^{l-1})^T \\end{eqnarray}\\) matrix-based form: the rate of change of the cost with respect to any weight \\(\\begin{eqnarray} \\dfrac{\\partial C}{\\partial b^l_j} = \\delta^l_j \\end{eqnarray}\\) the rate of change of the cost with respect to any bias in the network \\(\\begin{eqnarray} \\dfrac{\\partial C}{\\partial b} = \\delta \\end{eqnarray}\\) matrix-based form: the rate of change of the cost with respect to any bias in the network wikipedia neuralnetworksanddeeplearning 1-math.stackexchange.com 2-math.stackexchange.com","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"(原创)交叉熵损失函数","date":"2019-06-23T07:24:43.000Z","path":"2019/06/23/ML/Guide/cross_entropy_loss/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 百科 相关概念 交叉熵 与似然的关系 交叉熵损失函数 定义符号 Logistic回归的交叉熵 Softmax回归的交叉熵 参考 1 百科 交叉熵(cross entropy)是信息论中的一个重要概念, 度量两个概率分布的差异性信息. cross entropy (CE) error is also called \"log loss\" 1.1 相关概念 熵是描述系统的不确定性, 越出乎意料, 越不可能发生的事的信息量越大, 确定的事信息量为0. \"妖是妖他妈生的\"信息量为0, \"10万在北京买了一套房\"的信息量很大(不可能吧) 信息量(self-information) \\(I(x) = log_2\\dfrac{1}{P(x)} = -logP(x)\\), 一个不可能的事情的发生比及有可能的事件 发生提供的信息要更多,只能衡量单个事件的信息量. 而整个系统(所有x)呈现出一个分布, 信息熵就是对概率分布进行量 化, 即所有x的自信息的期望. (期望编码长度最小) 两个独立的事件的信息量是可以叠加的. 信息熵\\(H(X) = E[-log_2p_i] = \\sum\\limits_{i=0}^{N}P(x_i)log_2\\dfrac{1}{P(x_i)} = -\\sum\\limits_{i=0}^{N}P(x_i)log_2P(x_i)\\) 代表随机变量或系统的不确定性, 熵越大, 随机变量或系统的不确定性就越大. 简写: \\(p_i = P(x_i); H(X) = -\\sum\\limits_{i=0}^{N}p_ilog_2p_i\\) KL散度(Kullback Leibler Divergence),有时候也叫KL距离(不同点是不对称),一般被用于计算两个分布之间的不同,散度 越离散值越大, 两个分布相同KL散度为0. 从另一个角度理解就是, 一个分布用另一个分布代替额外需要的编码bit. 数学定义(离散): \\[ \\begin{align*} D_{KL}(A||B) &amp;= \\sum\\limits_{i}P_A(x_i)log_2\\bigg(\\dfrac{P_A(x_i)}{P_B(x_i)}\\bigg) \\\\ &amp;= \\sum\\limits_{i}P_A(x_i)log_2\\bigg(P_A(x_i)\\bigg) - \\sum\\limits_{i}P_A(x_i)log_2\\bigg(P_B(x_i)\\bigg) \\\\ &amp;= -H(A) + H(A, B) \\end{align*} \\] 如果H(A)是个常数, KL散度\\(\\cong\\)交叉熵(不严谨), 这也许是交叉熵用来作为损失函数的原因. 如果两个分布相同\\(D_KL(A||B)=0\\), 但是\\(H(A,B)\\)是不等于0的. 注意: \\(D_KL(A||B) \\neq D_KL(B||A)\\) 实际上对数不一定都是以2为底, 10, e都可以, 重要的是确定后, 所有计算都要相同 1.2 交叉熵 交叉熵\\(H(P, Q) = -\\sum\\limits_{i=0}^{N}p_ilog_2q_i\\), 其中\\(p_i为真实分布, q_i为非真实(预测)分布\\), 表示预测分布 与真实分布的错误程度, 如果Q分布越接近P分布, 交叉熵值越小. 连续型: \\(-\\int p(x)logq(x)dx\\), 训练的目的就是使q(x)逼近p(x). 实例: 真实分布P: {1/4, 1/4, 1/4, 1/4} 预测分布Q1: { 1/4, 1/2, 1/8, 1/8} 预测分布Q2: { 1/4, 1/4, 1/8, 3/8} P自信息: \\[ \\begin{align*} H(P, P) &amp;= -\\sum\\limits_{i=0}^{n}p_ilog_2q_i \\\\ &amp;= -\\bigg[1/4 log_2(1/4) + 1/4 log_2(1/4) + 1/4 log_2(1/4) + 1/4 log_2(1/4)\\bigg] \\\\ &amp;= -\\bigg[1/4*(-2) + 1/4*(-2) + 1/4*(-2) + 1/4*(-2)\\bigg] \\\\ &amp;= 8/4 \\end{align*} \\] P与Q1的交叉熵: \\[ \\begin{align*} H(P, Q1) &amp;= -\\sum\\limits_{i=0}^{n}p_ilog_2q_i \\\\ &amp;= -\\bigg[1/4 log_2(1/4) + 1/4 log_2(1/2) + 1/4 log_2(1/8) + 1/4 log_2(1/8)\\bigg] \\\\ &amp;= -\\bigg[1/4*(-2) + 1/4*(-1) + 1/4*(-3) + 1/4*(-3)\\bigg] \\\\ &amp;= 9/4 \\end{align*} \\] P与Q2的交叉熵: \\[ \\begin{align*} H(P, Q2) &amp;= -\\sum\\limits_{i=0}^{n}p_ilog_2q_i \\\\ &amp;= -\\bigg[1/4 log_2(1/4) + 1/4 log_2(1/4) + 1/4 log_2(1/8) + 1/4 log_2(3/8)\\bigg] \\\\ &amp;= -\\bigg[1/4*(-2) + 1/4*(-2) + 1/4*(-3) + 1/4*log_2(3/8)\\bigg] \\\\ &amp;= \\dfrac{10 -log_23}{4} &lt; 9/4 \\end{align*} \\] 1.3 与似然的关系 例(不考虑0下标): 真实分类(one-hot encoded labels): \\[ { y^{(1)} = (1, 0, 0, 0)^T \\\\ y^{(2)} = (0, 1, 0, 0)^T \\\\ y^{(3)} = (0, 0, 0, 1)^T \\\\ y^{(4)} = (1, 0, 0, 0)^T \\\\ y^{(5)} = (0, 0, 1, 0)^T } \\] 其中\\(y_1^{(1)}=1, y_2^{(2)}=1, y_4^{(3)}=1, y_1^{(4)}=1, y_3^{(5)}=1, 其余都为0\\) 预测分类(one-hot): \\[ { \\hat{y}^{(1)} = (0.96, 0.02, 0.01, 0.01)^T \\\\ \\hat{y}^{(2)} = (0.1, 0.8, 0.02, 0.08)^T \\\\ \\hat{y}^{(3)} = (0.2, 0.1, 0.1, 0.6)^T \\\\ \\hat{y}^{(4)} = (0.7, 0.1, 0.1, 0.1)^T \\\\ \\hat{y}^{(5)} = (0.001, 0.009, 0.8, 0.1)^T } \\] 其中\\(\\hat{y}_1^{(1)}=0.96, \\hat{y}_2^{(2)}=0.8, \\hat{y}_4^{(3)}=0.6, \\hat{y}_1^{(4)}=0.7, \\hat{y}_3^{(5)}=0.8\\) 似然函数(联合): \\[ L(\\{y^{(n)}\\}, \\{\\hat{y}^{(n)}\\}) = \\prod_{n}^{N}L(y^{(n)}, \\hat{y}^{(n)}) \\] 问题是单个数据点对应的似然\\(L(y^{(n)}, \\hat{y}^{(n)})\\)应该如何计算呢, 从上面的例子分析第1组\\(\\hat{y}^{(1)}\\) 根据对应的真实分类应该为下标1, 即\\(\\hat{y}_1^{(1)}=0.96\\), 依次得到其余组应该对应的值\\(\\hat{y}_2^{(2)}=0.8, \\hat{y}_4^{(3)}=0.6, \\hat{y}_1^{(4)}=0.7, \\hat{y}_3^{(5)}=0.8\\). 也就是说, 预测分类的概率(向量)值由真实分类数据(样本数据, 已知)指定(下标). 假设第n组数据真实label\\(y_i^{(n)}\\)第i分量为1, 则第n组的预测 分类的概率值可表示为:\\(L(y^{(n)}, \\hat{y}^{(n)}) = \\sum_i^5 y_i^{(n)}\\hat{y}_i^{(n)}\\), 所以所有数据集的似然及对数似然表示为: \\[ L(\\{y^{(n)}\\}, \\{\\hat{y}^{(n)}\\}) = \\prod_{n}^{N} L(y^{(n)}, \\hat{y}^{(n)}) \\\\ logL(\\{y^{(n)}\\}, \\{\\hat{y}^{(n)}\\}) = \\sum_n^N logL(y^{(n)}, \\hat{y}^{(n)}) = \\sum_{n}^{N} [-\\sum_i y_i^{(n)}log\\hat{y}_i^{(n)}] \\] 其中i表示标签(one-hot)的下标, N表示数据集总大小, n表示某个数据实例. 从上图看到交叉熵(熵之和)的公式: \\[ \\begin{align*} {L}&#39; &amp;= -log L(\\{y^{(n)}\\}, \\{\\hat{y}^{(n)}\\}) \\\\ &amp;= -log \\prod_{n}^{N}L(y^{(n)}, \\hat{y}^{(n)}) \\\\ &amp;= -\\sum_{n}^{N} logL(y^{(n)}, \\hat{y}^{(n)}) \\\\ &amp;= -\\sum_{n}^{N} log \\sum_i y_i^{(n)}\\hat{y}_i^{(n)} \\\\ &amp;= \\sum_{n}^{N} [-\\sum_i y_i^{(n)}log\\hat{y}_i^{(n)}] \\\\ &amp;= \\sum_{n}^{N} H(y^{(n)}, \\hat{y}^{(n)}) \\\\ &amp;= H(\\{y^{(n)}\\}, \\{\\hat{y}^{(n)}\\}) \\end{align*} \\] 2 交叉熵损失函数 希望理想模型和真实模型分布一致: \\(P(model) \\cong P(trainning) \\cong P(real)\\), 根据模型概率分布差异计算预测 模型的可靠性, 真实的模型是无法得知的, 而预测模型也是通过训练数据训练出. KL散度是计算两个事件的概率分布的差 异, 且如果事件A的信息熵\\(H(A)\\)固定, 则简化为\\(H(A, B)\\)即交叉熵的计算, 当交叉熵最低时(训练数据分布的熵), 得到 最好的模型. 2.1 定义符号 n: 样本组数 p: 特征个数 m: 分类个数 (多分类: 神经元的个数) \\(\\theta_j\\): 第j个参数 \\(x^{(i)}\\): 第i组数据, \\(x^{(i)}=(1,x^{(i)}_1,x^{(i)}_2,...,x^{(i)}_p)^T\\) 包含偏置 \\(y^{(i)}\\): 第i组数据对应的类标记, \\((x^{(i)}, y^{(i)})\\)代表一组测试/训练样本数据 \\(\\hat{y}^{(i)}\\): 模型预测第i组数据的输出的标记 \\(z^{(i)}\\): 第i组数据输入后计算的输出(未sigmoid或softmax) \\(z^{(i)} = \\theta^T x^{(i)} = \\sum\\limits_j^p\\theta_{ij}x_{ij} + b\\) 2.2 Logistic回归的交叉熵 是非问题, \\(y^{(i)}\\)取0或1 0-1问题, 构造假设函数(hypothesis function): \\[ h_\\theta(x^{(i)}) = \\dfrac{1}{1 + e^{-\\theta^T x^{(i)}} } \\] 二分类问题, 设: \\(P(\\hat{y}^{(i)}=1|x^{(i)};\\theta)=h_\\theta(x^{(i)})\\) \\(P(\\hat{y}^{(i)}=0|x^{(i)};\\theta)=1-h_\\theta(x^{(i)})\\) 不考虑交叉熵, 单纯推导, 对上面, 取log, 原函数的单调性不变: \\(\\log P(\\hat{y}^{(i)}=1|x^{(i)};\\theta)=\\log h_\\theta(x^{(i)})=\\log\\frac{1}{1+e^{-\\theta^T x^{(i)}} }\\) \\(\\log P(\\hat{y}^{(i)}=0|x^{(i)};\\theta)=\\log (1-h_\\theta(x^{(i)}))=\\log\\frac{e^{-\\theta^T x^{(i)}}}{1+e^{-\\theta^T x^{(i)}} }\\) 对于第i组样本，假设函数表征正确的组合对数概率为: \\[ \\begin{align*} P &amp;= I\\{y^{(i)}=1\\}\\log P(\\hat{y}^{(i)}=1|x^{(i)};\\theta)+I\\{y^{(i)}=0\\}\\log P(\\hat{y}^{(i)}=0|x^{(i)};\\theta) \\\\ &amp;= y^{(i)}\\log P(\\hat{y}^{(i)}=1|x^{(i)};\\theta)+(1-y^{(i)})\\log P(\\hat{y}^{(i)}=0|x^{(i)};\\theta) \\\\ &amp;= y^{(i)}\\log(h_\\theta(x^{(i)}))+(1-y^{(i)})\\log(1-h_\\theta(x^{(i)})) \\end{align*} \\] 其中\\(I\\{y^{(i)}=1\\}\\) 和 \\(I\\{y^{(i)}=0\\}\\) 是指示函数, 当{}里成立时为1, 否则为0 n组样本: \\[ \\sum_{i=1}^{n}y^{(i)}\\log(h_\\theta(x^{(i)}))+(1-y^{(i)})\\log(1-h_\\theta(x^{(i)})) \\] 计算出的值越大越好, 而我们希望损失函数越小越好, 于是: \\[ J(\\theta)=-\\frac{1}{n}\\sum_{i=1}^{n}y^{(i)}\\log(h_\\theta(x^{(i)}))+(1-y^{(i)})\\log(1-h_\\theta(x^{(i)})) \\] 代入: \\[ \\begin{align*} J(\\theta) &amp;=-\\frac{1}{n}\\sum_{i=1}^n \\left[-y^{(i)}(\\log ( 1+e^{-\\theta^T x^{(i)}})) + (1-y^{(i)})(-\\theta^T x^{(i)}-\\log ( 1+e^{-\\theta^T x^{(i)}} ))\\right]\\\\ &amp; =-\\frac{1}{n}\\sum_{i=1}^n \\left[y^{(i)}\\theta^T x^{(i)}-\\theta^T x^{(i)}-\\log(1+e^{-\\theta^T x^{(i)}})\\right]\\\\ &amp; =-\\frac{1}{n}\\sum_{i=1}^n \\left[y^{(i)}\\theta^T x^{(i)}-\\log e^{\\theta^T x^{(i)}}-\\log(1+e^{-\\theta^T x^{(i)}})\\right]\\\\ &amp; =-\\frac{1}{n}\\sum_{i=1}^n \\left[y^{(i)}\\theta^T x^{(i)}-\\left(\\log e^{\\theta^T x^{(i)}}+\\log(1+e^{-\\theta^T x^{(i)}})\\right)\\right] \\\\ &amp; =-\\frac{1}{n}\\sum_{i=1}^n \\left[y^{(i)}\\theta^T x^{(i)}-\\log(1+e^{\\theta^T x^{(i)}})\\right] \\end{align*} \\] 计算\\(J(\\theta)\\)对j个参数分量\\(\\theta_j\\)求偏导: \\[ \\begin{align*} \\frac{\\partial}{\\partial\\theta_{j}}J(\\theta) &amp;=\\frac{\\partial}{\\partial\\theta_{j}}\\left(\\frac{1}{n}\\sum_{i=1}^n \\left[\\log(1+e^{\\theta^T x^{(i)}})-y^{(i)}\\theta^T x^{(i)}\\right]\\right)\\\\ &amp; =\\frac{1}{n}\\sum_{i=1}^n \\left[\\frac{\\partial}{\\partial\\theta_{j}}\\log(1+e^{\\theta^T x^{(i)}})-\\frac{\\partial}{\\partial\\theta_{j}}\\left(y^{(i)}\\theta^T x^{(i)}\\right)\\right]\\\\ &amp; =\\frac{1}{n}\\sum_{i=1}^n \\left(\\frac{x^{(i)}_je^{\\theta^T x^{(i)}}}{1+e^{\\theta^T x^{(i)}}}-y^{(i)}x^{(i)}_j\\right)\\\\ &amp; =\\frac{1}{n}\\sum_{i=1}^{n}(h_\\theta(x^{(i)})-y^{(i)})x_j^{(i)} \\end{align*} \\] 二分类交叉熵的形式: \\[ H(p,q)=-\\sum _x (p(x)logq(x)+(1-p(x))log(1-q(x))) \\] 2.3 Softmax回归的交叉熵 多分类问题. 柔性最大值. 接收N维向量输出一个(0,1)之间的实数 交叉熵就是用来判定实际的输出与期望的输出的接近程度 (神经网络)如果最后的输出节点数为M, 对于每一个输入样本X, 最后得到的输出为M数组, 且数组中的每一个维度(元素 )对应一个类别(标记), 如果一个样本属于k, 则对应输出数组的元素为1, 其他为0, 例如\\(y = (0, 0, 1, ..., 0)\\)(真实/期望输出), 这个是理想情况下, 真实得到是\\(\\hat{y} = (0.01, 0.12, 0.7, ...., 0.11)\\)(实际/模型输出), 原始输出\\((y_1, y_2, ..., y_n)\\)加上 softmax之后的结果. softmax函数模型: \\[ a_i = softmax(z_i) = \\frac{e^{z_i}}{\\sum_{j=0}^{m}e^{z_j}} \\] 其中\\(z_i = \\sum_j\\theta_{ij}x_{ij} + b_i\\)表示输出结果数组中第i个元素值, m表示分类个数. 注意:这是一个样本 假设概率分布p为期望输出(标签)，概率分布q为实际输出，H(p,q)为交叉熵. 多分类交叉熵的形式(一组输入数据): \\[ H(p,q)=-\\sum _x p(x)log q(x) \\] 同型: \\[ L = -\\sum_{i}^{m} y_i log a_i \\] 其中\\(y_i\\)真实样本分类结果, \\(a_i\\)第i个神经元经过softmax后的输出值 为了理解求导过程, 将求和函数拆开: \\[ \\begin{align*} L &amp;= -(y_1 log a_1 + y_2 log a_2 + \\cdots + y_i log a_i + \\cdots + y_m log a_m) \\\\ &amp;= -(y_1 log \\frac{e^{z_1}}{e^{z_1}+e^{z_2}+\\cdots+e^{z_m}} + y_2 log \\frac{e^{z_2}}{e^{z_1}+e^{z_2}+\\cdots+e^{z_m}} + \\cdots + y_i log \\frac{e^{z_i}}{e^{z_1}+e^{z_2}+\\cdots+e^{z_m}} + \\cdots + y_m log \\frac{e^{z_m}}{e^{z_1}+e^{z_2}+\\cdots+e^{z_m}}) \\end{align*} \\] 链式法则求导: \\[ \\begin{align*} \\frac{\\partial L}{\\partial z_i} &amp;= \\sum_j^m \\big(\\frac{\\partial L_j}{\\partial a_j} \\frac{\\partial a_j}{\\partial z_i}\\big) \\\\ &amp;= \\sum_j^m \\big( -y_j\\frac{1}{a_j} \\frac{\\partial a_j}{\\partial z_i} \\big) \\end{align*} \\] 对第一个输出\\(z_1\\)求偏导: \\[ \\begin{align*} \\frac{\\partial a_1}{\\partial z_1} &amp;= \\frac{e^{z_1}(e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m}) - (e^{z_1})^2}{(e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m})^2} \\\\ &amp;= \\frac{e^{z_1}}{e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m}} - (\\frac{e^{z_1}}{e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m}})^2 \\\\ &amp;= a_1(1 - a_1) \\\\ \\frac{\\partial a_2}{\\partial z_1} &amp;= \\frac{-e^{z_2} e^{z_1}}{(e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m})^2} \\\\ &amp;= -a_1a_2 \\\\ \\frac{\\partial a_3}{\\partial z_1} &amp;= \\frac{-e^{z_3} e^{z_1}}{(e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m})^2} \\\\ &amp;= -a_1a_3 \\end{align*} \\] \\(a_j\\)中含有所有\\(z_i\\)的信息, 所有求导稍微麻烦, (由上面的求导例子)求导分为两种情况: \\[ \\begin{align*} j = i: \\label{partial_aizi} \\tag{1} \\\\ \\frac{\\partial a_i}{\\partial z_i} &amp;= \\frac{e^{z_i}(e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m}) - (e^{z_i})^2}{(e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m})^2} \\\\ &amp;= \\frac{e^{z_i}}{e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m}} - (\\frac{e^{z_i}}{e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m}})^2 \\\\ &amp;= a_i(1 - a_i) \\\\ \\\\ j \\neq i: \\label{partial_aizj} \\tag{2} \\\\ \\frac{\\partial a_j}{\\partial z_i} &amp;= \\frac{-e^{z_j} e^{z_i}}{(e^{z_1}+e^{z_2}+\\cdots+e^{i_1}+\\cdots+e^{z_m})^2} \\\\ &amp;= -a_ia_j \\end{align*} \\] 综合\\(\\ref{partial_aizi}\\) 和 \\(\\ref{partial_aizj}\\): \\[ \\begin{align*} \\frac{\\partial L}{\\partial z_i} &amp;= \\sum_j^m \\big(\\frac{\\partial L_j}{\\partial a_j} \\frac{\\partial a_j}{\\partial z_i}\\big) \\\\ &amp;= \\sum_{j\\neq i}^m \\big(\\frac{\\partial L_j}{\\partial a_j} \\frac{\\partial a_j}{\\partial z_i}\\big) + \\sum_{j=i}^m \\big(\\frac{\\partial L_j}{\\partial a_j} \\frac{\\partial a_j}{\\partial z_i}\\big) \\\\ &amp;= \\sum_{j\\neq i}^m \\big( -y_j\\frac{1}{a_j} \\frac{\\partial a_j}{\\partial z_i} \\big) + \\big( -y_j\\frac{1}{a_j} \\frac{\\partial a_j}{\\partial z_i} \\big) \\\\ &amp;= \\sum_{j\\neq i}^m \\big( -y_j\\frac{1}{a_j} (-a_i a_j) + \\big( -y_i\\frac{1}{a_i} a_i(1-a_i) \\big) \\\\ &amp;= \\sum_{j\\neq i}^m a_iy_j + (-y_i(1-a_i)) \\\\ &amp;= \\sum_{j\\neq i}^m a_iy_j + a_iy_i -y_i \\\\ &amp;= a_i\\sum_jy_j - y_i \\\\ &amp;= a_i - y_i \\label{partial_Jizi} \\tag{3} \\end{align*} \\] 另外, \\(z_i = \\sum_k\\theta_{ik}x_{ik} + b_i\\) 如果\\(x_{ik}\\)是上一层的激活函数, 形式变为:\\(z_i = \\sum_k\\theta_{ik}a_{k}^{L-1} + b_i\\): \\[ \\frac{\\partial L}{\\partial \\theta_{ik}^{L}} = \\sum_j^m \\frac{\\partial L_j}{\\partial a_j} \\frac{\\partial a_j}{\\partial z_i} \\frac{\\partial z_i}{\\partial \\theta_{ik}} = (a_i - y_i) \\frac{\\partial z_i}{\\partial \\theta_{ik}} = (a_i - y_i)a_k^{L-1} \\] \\(a_k^{L-1}\\)为上一层的第k个激活函数 3 参考 交叉熵损失函数 Neural Network Cross Entropy 归一化 信息熵 交叉熵 为什么交叉熵可以用于计算代价 交叉熵代价函数(损失函数)及其求导推导 Softmax A Friendly Introduction to Cross-Entropy Loss the softmax function and its derivative Notes on Backpropagation with Cross Entropy 简单易懂的softmax交叉熵损失函数求导 相对熵,交叉熵","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(原创)本地规则引擎设计","date":"2019-06-17T07:59:42.000Z","path":"2019/06/17/Note/IOT/Rule-Engine-Summary/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 总体设计 日志系统 消息系统 引擎设计 模型 设备模型 规则模型 CLP语言 RulePayload设计 CLP设计 引擎UML HttpHandler 调试系统 系统监控(Python) 规则配置(JS) 1 总体设计 +----------------+ +-----------------+ +------------------+ | | | | | | | elink cloud | | debug monitor | | debug webpage | | | | python | | js | | | | | | | +----------------+ +-----------------+ +------------------+ \\ | | \\ | tcp | \\ | restapi | +-----+ \\ v | +-----+ | | +----------------+ +---------+ +---------+ | | | | | | gateway_agent | | monitor | | clp | | | | | | | (mqtt) | | (8192) | | | | | | | | +----------------+ +---------+ +---------+ | | | | | | | | | | | | | | | | m | | | v v | | e | | | +--------------------------------------+ | | s | | | | | | | s | | | +----&gt; | rule engine | | | a | | | | | | | | g | | | | +--------------------------------------+ | | e | | | | | ^ | | | | | | | | | | | | | | | | message queue | | | | | | | | | | | | | | | | | | | | | | | +---------------------------+ | | | | | | | | payload | | | | | log | | | | ----------------------- | | |utils| | | | | | rule,class,instance,scene | | | | | | | | +---------------------------+ | | | | | | | ^ | | | | | | | \\ | | | | | | | \\ | | | | | | v \\ | | | | | | +-----------------+ +---------------------+ | | | | | | | clipscpp | | datachannel | | | | | | | +-----------------+ | ------------------- | | | | | | | | clips core | | device, cloud, app | | | | | | | +-----------------+ +---------------------+ | | | | | | ^ ^ | | | | | | / \\ | | | | | | / \\ | | | | | | / \\ v | | | | +-----------------+ +----------------+ +---------------+ | | | | | sql table | | device manager | | http handler | | | | | | | | hu | | (8899) | | | | | +-----------------+ +----------------+ +---------------+ | | +-----+ ^ ^ ^ ^ +-----+ not | | | | ----\\--------------------+ | | +---------------------- / +---------------+ +-------------+ \\ / | | \\ +--------------+ | +---------------------+ | +------------+ | | ocf | | ipc system | | ocf | | | dev profiles | | | process | | | ocf device | | | coap | +---------------------+ | coap | | +--------------+ | | | +------------+ | | | +----------------+ | +--------------+ | konke bridge | &lt;-----+-----&gt; | hue bridge | +----------------+ fork fork +--------------+ | | | tcp | alljoy | | +---------------+ +---------------+ | konke gateway | | hue gateway | +---------------+ +---------------+ | | | zigbee unkown | | | ***************** ********* ****** sos ****** *** *** *** lightctrol red *** * light * * smartplug * *** *** *** scenectrol envsonsor *** ********* ****** ****** ***************** 2 日志系统 规则引擎重要的一个功能就是将用户配置的规则文本转换为clp脚本, 而调试clp脚本需要好的工具 , 将clp脚本的调试日志输出到统一的日志系统中是必然要做的. 首先使用固定buffer作为日志缓冲, 即ring buffer, 所有模块均可往这buffer中写入, 日志 的最终输出采用多通道方式, 可以需要依次输出到终端, 文件或者网络. +-----------------------+ +-------------------+ +----------------+ | RingBuffer | | MessageHandler | | DataSink | ----&gt;|-----------------------| |-------------------| |----------------| / | mBufHead | | mMessageQueue | | mRingBuffer |-------/ | mBufLength | | mMessageHandler | | m_dataSize | mRingBuffer |-----------------------| |-------------------| |----------------| | get[Write/Read]Head | | handleMessage | | onDataArrive | | submit[Write/Read] | +-------------------+ +----------------+ +-----------------------+ △ △ ^ | | | +-----------+-----------+ +-------------------------------------------------------------------------------+ | +------------+ | | | | | +-----------------+ | | | +-------&gt; | LogPool | v | | | |-----------------| mFilterHead +-----------+ | | | | mFilterHead |◇ --------------------------------&gt;| LogFilter | | | | |-----------------| |-----------| | | | | attachFilter | | m_next |◇ ----+ | | | detachFilter | |-----------| m_next | | | | | pushBlock | | | | onDataArrive | +-----------+ | | | receiveData | △ △ △ | | | | | | | | | | handleMessage | | | | | | +-----------------+ +----------------------+ | +-----------------------+ | | | | | | | | | | | | +-----------+ +-----------------+ +----------------+ +-----------------+ | | | LogThread | | ConsoleFilter | | FileFilter | | NetworkFilter | | | |-----------| |-----------------| |----------------| |-----------------| | | | | | | | | | | | | Create |-----------| | pushBlock | | pushBlock | | pushBlock | | +---------| run | +-----------------+ +----------------+ +-----------------+ | +-----------+ | | | | | | | ▽ | +----------------------+ +---------------+ | | MessageLooper | | Logger | | |----------------------| |---------------| mDataSink | | mMsgQueue | | mDataSink |◇ ------------------------------------------------+ |----------------------| |---------------| | run | | log | +----------------------+ +---------------+ 3 消息系统 消息系统是Homebrain主程序的血脉, 贯穿与整个引擎系统中. 也是程序设计中解耦合的重要方法. +--------------------------------------------------------------------------------------------------+ | | | | | +-----------------+ | | | Message | | | --&gt;|-----------------| | | +----------------+ / | what | | | | MessageQueue | / | arg[1|2|3] | target | | -----&gt;|----------------| / | target |◇ ------+ | / | mMessages |-------/ |-----------------| | / |----------------| mMessage | obtain | | / | enqueueMessage | | recycle | v / | removeMessage | | next | +--------------------+ / | nextMessage | +-----------------+ | MessageHandler | / +----------------+ |--------------------| mMessageQueue / | mMessageQueue |---------------/ | mMessageHandler |◆ -----------------+ |--------------------| mMessageHandler | | dispatchMessage | | +------------+ | sendMessage[Delay] | | +-----▷ | Thread | | handleMessage | | | |------------| +--------------------+ | | | PID | △ | | |------------| | | | | run | | | | +------------+ | v | +-------------------+ +----------------------+ | RuleEngineHandler | | MessageHandlerThread | |-------------------| |----------------------| | handleMessage | | mMessageQueue | +--------------------------------------+ +-------------------+ |----------------------| |while(true) | | run |-----&gt;| msg = mMessageQueue-&gt;nextMessage() | +----------------------+ | msg-&gt;target-&gt;dispatchMessage() | △ +--------------------------------------+ +-------------------+ | | RuleEngineThread | | |-------------------|-------------------------+ | | |-------------------| | run | +-------------------+ 4 引擎设计 采用专家系统工具Clips进行前向推导, clips是工具也是一种语言, 提供c接口, 同时也支持脚本 独立运行, 所以规则引擎的设计其实就转变为clips脚本设计. 4.1 模型 4.1.1 设备模型 { &quot;devicetype&quot;: &quot;oic.d.hue_bri_light&quot;, &quot;supertype&quot;: &quot;oic.d.light&quot;, &quot;devicename&quot;: &quot;飞利浦灯&quot;, &quot;manufacture&quot;: &quot;Philips&quot;, &quot;iconid&quot;: &quot;ic_default_light&quot;, &quot;version&quot;: &quot;0.9.2&quot;, &quot;profile&quot;: { &quot;OnlineState&quot;: { &quot;tag&quot;: &quot;在线状态&quot;, &quot;write&quot;: &quot;F&quot;, &quot;read&quot;: &quot;T&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;range&quot;: { &quot;0&quot;: &quot;离线&quot;, &quot;1&quot;: &quot;在线&quot; } }, &quot;value&quot;: { &quot;rt&quot;: &quot;oic.r.switch.binary&quot;, &quot;iconid&quot;: &quot;ic_default_switch&quot;, &quot;tag&quot;: &quot;开关&quot;, &quot;read&quot;: &quot;T&quot;, &quot;write&quot;: &quot;T&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;range&quot;: { &quot;0&quot;: &quot;关闭&quot;, &quot;1&quot;: &quot;开启&quot; }, &quot;unit&quot;: &quot;&quot; }, &quot;brightness&quot;: { &quot;rt&quot;: &quot;oic.r.light.brightness&quot;, &quot;tag&quot;: &quot;亮度&quot;, &quot;read&quot;: &quot;T&quot;, &quot;write&quot;: &quot;T&quot;, &quot;type&quot;: &quot;int&quot;, &quot;range&quot;: &quot;v &gt;= 0 and v &lt;= 100&quot;, &quot;unit&quot;: &quot;&quot; } } } 4.1.2 规则模型 { &quot;ruleName&quot;:&quot;example&quot;, &quot;ruleId&quot;:&quot;123456&quot;, &quot;description&quot;:&quot;this is a example for rule definition&quot;, &quot;trigger&quot;:{ &quot;triggerType&quot;:&quot;auto|manual&quot;, &quot;switch&quot;:{ &quot;enabled&quot;:&quot;on&quot;, &quot;timeCondition&quot;:&quot;on&quot;, &quot;deviceCondition &quot;:&quot;on&quot;, &quot;notify&quot;:&quot;on&quot;, &quot;manual&quot;:&quot;on&quot; } }, &quot;conditions&quot;:{ &quot;conditionLogic&quot;:&quot;and&quot;, &quot;timeCondition&quot;:[ { &quot;year&quot;:&quot;2018&quot;, &quot;month&quot;:&quot;10&quot;, &quot;day&quot;:&quot;10|13|17&quot;, &quot;hour&quot;:&quot;every&quot;, &quot;minute&quot;:&quot;every&quot;, &quot;second&quot;:&quot;1&quot; } ], &quot;deviceCondition&quot;:{ &quot;deviceLogic&quot;:&quot;or&quot;, &quot;deviceStatus&quot;:[ { &quot;deviceId&quot;:&quot;0007A895C8A7&quot;, &quot;propName&quot;:&quot;CurrentTemperature&quot;, &quot;propValue&quot;:&quot;v&gt;50&quot; }, { &quot;deviceId&quot;:&quot;DC330D799327&quot;, &quot;propName&quot;:&quot;onOffLight&quot;, &quot;propValue&quot;:&quot;v==true&quot; } ] } }, &quot;actions&quot;:{ &quot;execScene&quot;:&quot;&quot;, &quot;notify&quot;:{ &quot;title&quot;: &quot;xxx&quot;, &quot;message&quot;:&quot;Girlfriend Birthday!&quot; }, &quot;deviceControl&quot;:[ { &quot;deviceId&quot;:&quot;0007A895C7C7&quot;, &quot;propName&quot;:&quot;CurrentTemperature&quot;, &quot;propValue&quot;:&quot;50&quot; }, { &quot;deviceId&quot;:&quot;DC330D79932A&quot;, &quot;propName&quot;:&quot;onOffLight&quot;, &quot;propValue&quot;:&quot;true&quot; } ], &quot;manualRuleId&quot;:[ &quot;1528374365.417.48775&quot;, &quot;1528424679.929.67961&quot; ] } } 4.2 CLP语言 ruleID ^ -----&gt; comment, here we want is rule name. | / | / -----&gt; MultiSlot (defrule rul-0001 &quot;this is an example&quot; / +-------- (and / | (and ------------------------------------------------------- | ?fct_t1 &lt;- (datetime ?clock ?year ?month ?day ?hour ?minute ?second $?others) ---+ | 1 (test (= ?year 2018)) | Condition: Fact | layer (test (= ?month 06)) | (not use Template) | (test (or (= ?day 20) (= ?day 21) (= ?day 22) )) ---+ | ) -----------\\ | (or \\------&gt; Cell LHSNode | (object (is-a TempSensor) ---+ | (ID ?id &amp;:(eq ?id ins-0007A895C8A7)) | | 2 (CurrentTemperature ?CurrentTemperature &amp;:(&gt; ?CurrentTemperature 50)) | | layer ) | | (object (is-a Light) | Condition: Instance | (ID ?id &amp;:(eq ?id ins-DC330D799327)) /-----&gt; Cell | | (onOffLight ?onOffLight &amp;:(= ?onOffLight 1)) / | | ) \\ ------------------- ---+ | ) \\ +--&gt; timeout-ms +-------- ) --------&gt; SlotPoint | +--&gt; retry-count =&gt; | | +-------- (bind ?c (create-rule-context rul-0001 5000 5)) ------&gt; create the rule context | (if (eq ?c FALSE) then (return)) | (send ?c act-control ins-0007A895C7C7 CurrentTemperature 50) ---&gt; action: device control RHSNode | (send ?c act-control ins-DC330D79932A onOffLight 1) | (send ?c act-notify 10000001 &quot;tellYou&quot; &quot;Girlfriend Birthday&quot;) ---&gt; action: message notify | (switch-scene room1 commehome) ---&gt; action: switch scene +--------- (send ?c act-scene rul-1000) ---&gt; action: active manual rule ) ------------------------------------------------------------------------------------------------------------------------------ /---&gt; DEVICE is superclass + -------------- (defclass SmogAlarm / | (is-a DEVICE) -------/ | /---- (role concrete) (pattern-match reactive) ----&gt; can triggered by rule Class | v (slot OnlineState (type NUMBER) (allowed-numbers 2 1)) | (not abstract) (slot PowerOnOff (type INTEGER) (allowed-numbers 2 1)) | (slot SecurityLevel (type SYMBOL) (allowed-symbols low normal high)) | (slot Battery (type NUMBER) (allowed-numbers 2 1)) +---------------- ) / / v (INTEGER or FLOAT) 4.3 RulePayload设计 LHSNode Tree ********* &quot;and&quot;: condition logic *** LHSNode ** * * *** &quot;and&quot; *** / ********* \\ / | \\ child / | \\ child / cond | \\ / | \\ / | \\ / | \\ / | \\ / | \\ ********* +-------------+ ********* *** LHSNode *** | Condition | *** LHSNode *** * * | | * * *** &quot;or&quot; *** | &quot;and&quot; | *** &quot;or&quot; *** / ********* \\ +-------------+ ********* / \\ / \\ &quot;and&quot;: slot logic, only support &quot;and&quot; / cond cond \\ / \\ +---------------------------+ / \\ | +------+ | +-------------+ +-------------+ | | | | | Condition | | Condition | Fact Instance | | | | | | \\ / | | | &quot;and&quot; | | &quot;and&quot; | \\ type / | | +-------------+ +-------------+ \\ / v v | Condition &lt;---&gt; Device | TimeEvent | SlotPoint &lt;---&gt; Property | -----------+-----------+-----------+--------------- | | | | v v +-------------+ +-------------+ &quot;&amp;&quot;: cell logic | SlotPoint | | SlotPoint | &quot;|&quot;: cell logic | | | | &quot;~&quot; | &quot;&amp;&quot; | | &quot;|&quot; | +-------------+ +-------------+ | | | | v v +-------------------+ +-------------------+ | Cell | | Cell | Compare Symbol: &quot;=, &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;&quot; | | | | Connective Symbol: &quot;&amp;, |, ~&quot; |(v &gt; 10) &amp; (v &lt; 20)| |(v = 10) | (v &gt; 20)| +-------------------+ +-------------------+ 4.4 CLP设计 (auto) (manual) device property profile rule online offline changed scene TestCase ---------------------------------------------------------------------------------------------------&gt; | | | | ║ | | | | | | mainHandler | | mainHander() | | | | ║ | | v v v v v ▼ v v MainThread -------------------------------------------------------------------------------------------------------------&gt; \\ profile rule \\ \\ ║ \\ \\ \\ json json \\ \\ ruleHandler \\ \\ \\ \\ \\ | | ║ | | \\ \\ \\ | | ▼ | | \\ \\ \\ v T v T T v T v T T T T RuleThread --------------+----------+---------+---------+---+-----+---------+---------+---------+---------+-----&gt; ^ T add | del | | \\ | / | | | | ruleHander() | | | | \\ | / | | | | | | | | | | | | | | | +--\\ +--\\ +--\\ +--\\ v v v /--+ /--+ /--+ /--+ \\ \\ \\ \\+---------+/ / / / T: timer (default 1s) \\ \\ \\ | refresh | / / / -----------------------------&gt;| |&lt;---------------------------- | run | +---------+ | +--------+ (LHS) | ----▷ | USER | +--------------------------------------------------------------+ / +--------+ salience | / △ | +-------------------+ / | v | RuleContext | / | +--------+ |-------------------| / / +---| Rule-1 | | rule-id | / / | +--------+ | timeout-ms | +---------+ +-----------+ +----------------+ | | retry-count |---------▷ | Context | | DEVICE | | SmogAlarm | +-&gt; +--------+ | current-try | | | |-----------| |----------------| +---| Rule-2 | | start-time | +---------+ | ID |◁ ------| OnlineState | | +--------+ | act-error | | UUID | | PowerOnOff | | | unanswer-list | | Class | | Battery | +-&gt; +--------+ | response-rules | +-----------+ +----------------+ +---| Rule-3 | |-------------------| | +--------+ | try-again | | | unanswer-count | +-&gt; +--------+ | act-control | | Rule-4 | | act-notify | +--------+ | act-scene | | +-------------------+ | +-------------------------+----------------------+------------+ | | | | | | Action | | | v +--------------------------&gt; act-control ------------&gt; act-notify -----------&gt; act-scene | send-message | (RHS) | ^ | ^ / | | | act-step-control | | true | | true / | | success | | | | | v | or | | +------&gt; make-rule | +------&gt; make-rule | fail | | | false (response) | | false (response) | | v | v | v | RuleEngineService --------------------------------------------------------------------------------------&gt; | ( HB ) ins-push txt-push msg-push | ^ ^ | | | services | | | +--------------------------------------------------+ Action +------&gt; onEnter ----------------+ | | | | ^ | ◇ | | | | +-------------------+ v +------&gt; onExit --------------+-------+ | SceneContext | +----------------+ | ^ | | ----------------- | | (MS)service | | | | | stime | |--------------- | | | | | where | +--&gt; enter start &lt;--+ | master | v | \\ | target | | | | name:skey | micro service | \\ | action ----+--&gt; story running &lt;--+--- state | (onStory) | \\ | services | | | | ntime | | | \\ | zombies | +--&gt; exit stop &lt;--+ | saves | | | \\ |-------------------| | args | +-------+------+ | \\ | add-service | | | | | | \\ | del-service | +----------------+ v v | | +-------------------+ gradligth autolight |2 3 | | | ^ ^ | | | | | | | | 1 +-----------+ swtich +----------+ | +------| gotosleep | ---------&gt; | wakeup | | stop +-----------+ to +----------+ | | | start 4 | +---------------------------------------------+ 4.5 引擎UML +---------------+ +--------------+ | Condition | +------------+ +----------+ | Action | |---------------| | SlotPoint | | _Cell_ | |--------------| | mSlotLogic | -----&gt; |------------| ------&gt;|----------| | mType | | mType | / | mCellLogic | / | nSymbol | | mCall | ^ | mCls | / | mSlotName | / | nValue | | mID | \\ | mID | / | mCells |◆ ---/mCells +----------+ | mSlotName | \\ | mSlots |◆ ----/mSlots +------------+ | mSlotValue | -------+ +---------------+ +--------------+ 1:n | mActions ^ +-----------+ mCondLogic: and/or/not | | | | mSlotLogic: and +------------+ +------------+ | +--------------+ | mCellLogic: &amp;,|,~ | SlotInfo | | RHSNode | | | LHSNode | | nSymbol: =,&gt;,&lt;,&gt;=,&lt;=,&lt;&gt; |------------| | -----------| | |--------------| | | nName | | mActions | | | mCondLogic | /mChildren | nValue | +------------+ +--------◇ | mConditions | / +------------+ ^ mConditions| mChildren |-/ +---------------+ ^ | +--------------+ | RulePayload | mSlots | 1:n +----------\\ ^ |---------------| | \\ | | mRuleName | ◆ +-------------+ \\ | | mRuleID | +-------------------+ | DataChannel | \\ | mLHS | mVersion | | InstancePayload | |-------------| \\ +----------◇ | mLHS | |-------------------| | | -----------------------◇ | mRHS | /--| mInsName | |send(payload)| mLHS |---------------| / | mClsName | +-------------+ | toString() | / | mSlots | △ ^ ^ △ +---------------+ / +-------------------+ | | | | | / | | | | | | +---------------+ | | +----------------+ | | | | | | | | | | | | ▽ | +------------------+ | | +--------------------------+ +----------+ ◁ --+ +-----------------+ | RuleDataChannel | | | | DeviceDataChannel | | Payload | | ClassPayload | mCloudMgr|------------------| | | | ------------------------ | |----------| ◁ -------------|-----------------| +----◆ | mCloudMgr | | | | mDeviceMgr | | type() | | classname | | | mHandler | | | | mHandler | +----------+ | superclass | | +------------------+ | | |--------------------------| | mSlots | version | | △ | | | onStateChanged() | | +---◇ | mSlots | | | | | | onPropertyChanged() |-------------+ 1:n | |-----------------| | | | | | send() | | | toString() | | +------------------------+ | | +--------------------------+◆ ---------------------+ | +-----------------+ | | ElinkRuleDataChannel | | | △ ◆ mHandler | | | |------------------------| | | | | | | | | | | | | +----------+ | | | | onRuleSync() | | | +-------------------------+ | | | +---------------+ | | send() | | | | ElinkDeviceDataChannel | | | | | Slot | | +------------------------+ | | |-------------------------| | | +---&gt; |---------------| | | | | onProfileSync() | | | | mType | | | | +-------------------------+ | | | mName | | | | | | | mMin/mMax | | +-------------------------+ | | mDeviceMgr | | | mAllowList | | | CloudManager | | | v | |---------------| | |-------------------------| | | +----------------------------------------+ | | toString() | +---&gt;| | | | | DeviceManger | | +---------------+ | registRuleSyncCallback | | | | -------------------------------------- | | | | | | | | | +-------------------------+ | | | registDeviceStateChangedCallback | | | | | registDevicePropertyChangedCallback | | | | | registDeviceProfileSyncCallback | | +-----------------------------------+ | | setProperty | | | +-----------------------------------+ +----------------------------------------+ | | | | | | +----------------------------+ +----------------+ | | | +----▷ | MessageHandler::Callback | &lt;----◇ | MessageHandler | ◁ ---------+ | | | | +----------------------------+ |----------------| | | | | | | mCallback | | | | | | +----------------+ | | | | +----------------------+ | | | | | RuleEngineService | | v | | |----------------------| mUrgentHandler +--------------------+ | | | mUrgentHandler |◇ --------------------------------------------------&gt;| RuleEventHandler | | | | | mCore +----------------------+ ------&gt;|--------------------| | | | mCore/mCoreUrgent | ◆ -------------&gt; | RuleEngineCore | / | handleMessage | | | | mServerRoot | |----------------------| / +--------------------+ | +--| mDeviceChannel | mEnv | mHandler | /mHandler | +----| mRuleChannel | +-------◆ | mEnv |◆ | | mOfflineInsesCalled | | |----------------------| | |----------------------| | | driver() | | | callInstancePush | | | | +------------------+ | callMessagePush | | | handleTimer | | RuleEventThread | | setDeviceChannel | | | handleClassSync | |------------------| | setRuleChannel | | | handleRuleSync | | mMessageQueue | | handleMessage | | | handleInstanceAdd | +------------------+ +----------------------+ | | handleInstanceDel | △ v | handleInstancePut | | +---------------+ +----------------------+ | | Environment | | | |--\\ +---------------------+ +---------------+ \\ CLP | RuleUrgentThread | Clipscpp ------&gt; clips6.30 |---------------------| | mService | +---------------------+ +----------------------+ | HBDatabase | | (template class) | /--------------◆ |----------------------| / mDB | mAutoCloseInterval | / | mDBPath mMutex | | |----------------------| | | updateOrInsert | v | deleteBy | +--------------------+ +--------------+ | queryBy | | DeviceProfileTable | |SQLiteDatabase| | | | | | | +----------------------+ +--------------------+ | | | | +--------------+ | | ^ mainDB() +---------------------+ | +------------------+ | | GatewayConnectTable | | | OCFDeviceTable | | mDB | | | | | | +---------------------+ | +------------------+ ◆ | | | +------------------+ | | | | SQLiteTable | ◁ ------------------------------------------------------------+---------------+ |------------------| | | | | | | | | | | +-----------------+ +------------------+ +-----------------+ +------------------+ | RuleEngineTable | | SceneEngineTable | | HBGlobalTable | | | | | | | +-----------------+ +------------------+ +-----------------+ 5 HttpHandler 自行百度craw, 一个非常快速和易于使用的C++微型web框架. 6 调试系统 6.1 系统监控(Python) python写的monitor工具, 设计了很多调试规则的选项, 具体功能: 显示系统信息 设置各模块的日志级别, 配置调试clp的各个变量信息等 将日志输出到monitor端,可以进行过滤, 可配置rule的调试选项等 显示当前系统的中的所有设备实例, 根据类型可以查询, 设置设备属性, 或直接设置到引擎中. 新建,查看,编辑,删除规则(只有查看功能有效, 其他功能已屏蔽, 可以使用webpage完成操作). 执行一些定义好的模式, 或者直接发送\"事实\"触发规则 6.2 规则配置(JS) 基于restapi实现规则的配置与执行, 具体功能: 网关(桥:hue, konke)配置管理 网关(桥)列表: 添加新的网关: 设备的发现及控制管理 设备发现: 设备列表及控制: 规则的编辑及管理 规则列表: 规则配置: 场景的编辑及管理 场景列表: 场景微服务配置:","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"Design","slug":"Design","permalink":"https://qrsforever.github.io/tags/Design/"}]},{"title":"(原创)用数据模拟卷积-初探","date":"2019-06-14T08:13:39.000Z","path":"2019/06/14/ML/Scratch/convolution_plot/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 网上很多写卷积的文档都是用\"很简单\"表示卷积so easy, 但草民认真读了他们的文章后, 反而对 卷积更不理解, 即使到现在还是不能理解, 这篇文章只是从数据上分析卷积过程, 很多疑点还需继 续探究","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"Jupyter支持动态图","date":"2019-06-13T08:18:35.000Z","path":"2019/06/13/Note/Jupyter/animations/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 参考 http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/ http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-as-interactive-javascript-widgets/","tags":[{"name":"Jupyter","slug":"Jupyter","permalink":"https://qrsforever.github.io/tags/Jupyter/"}]},{"title":"A Student's Guide to Vectors and Tensors","date":"2019-06-12T02:03:33.000Z","path":"2019/06/12/Story/Math/Guide_Vectors_and_Tensors/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 非常形象的讲解张量 youtube 知乎部分翻译","tags":[]},{"title":"(原创)简单感知机-初探","date":"2019-06-03T15:53:37.000Z","path":"2019/06/03/ML/Scratch/simple_perceptron/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 一个简单的小程序, 来了解感知机如何工作的, 激活函数为sign","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"收藏学习网站","date":"2019-06-03T12:30:21.000Z","path":"2019/06/03/Story/Website/fav/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} AI Other 印度极客门户 1 Math 可汗学院: https://www.khanacademy.org/math 2 AI http://neuralnetworksanddeeplearning.com/about.html The purpose of this book is to help you master the core concepts of neural networks, including modern techniques for deep learning. After working through the book you will have written code that uses neural networks and deep learning to solve complex pattern recognition problems. And you will have a foundation to use neural networks and deep learning to attack problems of your own devising. https://datascience-enthusiast.com/DL/dlindex.html 个人博客(Fisseha Berhane), 其中Deep Learning几篇文章可以参考学习. https://github.com/rasbt/mlxtend Mlxtend (machine learning extensions) is a Python library of useful tools for the day-to-day data science tasks. https://gluon.mxnet.io/index.html This repo contains an incremental sequence of notebooks designed to teach deep learning, Apache MXNet (incubating), and the gluon interface. 3 Other 3.1 印度极客门户 geeksforgeeks 集中算法智慧的站点 需要翻墙","tags":[{"name":"Website","slug":"Website","permalink":"https://qrsforever.github.io/tags/Website/"}]},{"title":"卷积神经网络CNN介绍","date":"2019-06-03T10:08:15.000Z","path":"2019/06/03/ML/Guide/cnn_intro/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 0.1 网络资源 Intuitively Understanding Convolutions for Deep Learning 卷积神经网络CNN总结 卷积要旋转180度 卷积神经网络简介 别怕,\"卷积\"其实很简单 wikipedia:convolution wikipedia:卷积 mathworld 图形Demo1 图形Demo2 最容易理解的对卷积(convolution)的解释 Understanding Convolutions 离散卷积过程举例图示详解 必看: ConvNets 推荐: 卷积介绍 0.2 重要语句 卷积的重要的物理意义是:一个函数(如:单位响应)在另一个函数(如:输入信号)上的加权叠加. 对于线性时不变系统,如果知道该系统的单位响应,那么将单位响应和输入信号求卷积,就相当于把 输入信号的各个时间点的单位响应加权叠加,就直接得到了输出信号.系统的零状态响应等于单位 冲击响应卷积上输入函数.","tags":[{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"}]},{"title":"(原创)神经元节点之雪花分割图例","date":"2019-06-02T15:33:56.000Z","path":"2019/06/02/ML/Scratch/snowflake_neural_logic/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 模拟一下如何处理线性不可分的问题, 纯属自娱自乐.","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"(原创)embedding向量查询","date":"2019-05-31T06:48:15.000Z","path":"2019/05/31/ML/API/embedding_lookup/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 用python实例分析embedding_lookup接口的使用, mod 和div的区别","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"API","slug":"API","permalink":"https://qrsforever.github.io/tags/API/"}]},{"title":"不翻墙打开受限网站","date":"2019-05-30T13:41:49.000Z","path":"2019/05/30/Tools/How/googleapis.com/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 这些网站很久才能打开, 因为去请求了google服务. 在/etc/hosts文件中添加: 127.0.0.1 ajax.googleapis.com 127.0.0.1 apis.google.com 如果翻墙后, 如有必要记着屏蔽","tags":[{"name":"ETC","slug":"ETC","permalink":"https://qrsforever.github.io/tags/ETC/"}]},{"title":"(原创)激活函数和导函数","date":"2019-05-30T07:33:35.000Z","path":"2019/05/30/ML/Guide/activation_functions/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 使用matplotlib分别画出几个常用的激活函数和他们的导函数的图像","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Guide","slug":"Guide","permalink":"https://qrsforever.github.io/tags/Guide/"},{"name":"Plot","slug":"Plot","permalink":"https://qrsforever.github.io/tags/Plot/"}]},{"title":"(原创)梯度下降BGD,SGD,MBGD实例","date":"2019-05-28T07:30:04.000Z","path":"2019/05/28/ML/Scratch/GD/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} RAWCODE 简易实现BGD,SGD,MBGD的python实现","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"},{"name":"Scratch","slug":"Scratch","permalink":"https://qrsforever.github.io/tags/Scratch/"}]},{"title":"因子分析","date":"2019-03-23T07:00:00.000Z","path":"2019/03/23/Books/Statistics/analysis_factor/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 0.1 参考 主成分分析和因子分析 浅析主成分分析与因子分析在SPSS中的区别 0.2 基本思想 因子分析是主成分分析的推广。 实际上,主成分分析可以看作是因子分析的一个特例. 同是在确保数据信息最小丢失的原则下，因子分析研究变量之间的内部依赖关系，从原始变量的相 关矩阵出发，将相关性较强的变量归于一类，最终形成几类假想型变量。每类变量代表了一个“公 共因子”（本质因子、基本特征）。 因子分析主要功能是简化数据、探测数据的基本结构。还可以与回归分析、聚类分析、判别分析等 套用。 0.3 区别 主成分分析中的主成分个数与原始变量个数是一样的,即有几个变量就有几个主成分,只不过最后我 们确定了少数几个主成分而已。而因子分析则需要事先确定要找几个成分,也称为因子 (principal componfa ct)or) ,然后将原始变量综合为少数的几个因子,以再现原始变量与因子之间的关系,一 般来说,因子的个数会远远少于原始变量的个数","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"统计图","date":"2019-03-22T07:14:38.000Z","path":"2019/03/22/Books/Statistics/statistics_charts/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 条形图 定义 简单条形图 复式条形图 饼图 定义 复式饼图 帕累托图 定义 环形图 定义 直方图 定义 直方图和条形图区别 茎叶图 雷达图 PP图 QQ图 1 条形图 1.1 定义 用宽度相同的条形的高度或长短来表示数据多少的图形. 1.2 简单条形图 1.3 复式条形图 2 饼图 2.1 定义 用圆形以及圆内扇形的角度来表示数值大小的图形, 主要用于表示一个样本(或总体)中各组成部分 的数据占全部数据的比例, 对于研究结构性问题十分有用. 2.2 复式饼图 3 帕累托图 3.1 定义 按各类别数据出现的频数的多少排序后绘制的条形图. 左侧的纵轴为计数值(count), 右侧的纵轴 为累计百分比(percent) 4 环形图 4.1 定义 简单饼图显示一个样本各个部分所占用的比例 每个样本用一个环表示, 样本中的每一部分数据使用环中的一段表示, 因此环形图可以显示多个样 本各个部分占的相应比例, 从而有利于对构成的比较研究. 5 直方图 5.1 定义 显示分组数据, 用矩形的宽度和高度(面积)来表示频数分布. 5.2 直方图和条形图区别 条形图: 用条形的长度表示各类别频数的多少, 宽度是固定的, 分开排列 直方图: 用面积表示各组频数的多少, 矩形的高度表示每一组的频数或频率, 宽度表示各组的组距 , 高度和宽度均有意义, 其次分组数据具有连续性. 6 茎叶图 7 雷达图 8 PP图 9 QQ图","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"聚类分析","date":"2019-03-22T07:12:58.000Z","path":"2019/03/22/Books/Statistics/analysis_cluster/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"判别分析","date":"2019-03-22T07:12:33.000Z","path":"2019/03/22/Books/Statistics/analysis_discriminatory/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;}","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"主成分分析","date":"2019-03-22T07:10:39.000Z","path":"2019/03/22/Books/Statistics/analysis_principal_components/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 0.1 参考 主成分分析和因子分析 浅析主成分分析与因子分析在SPSS中的区别 0.2 基本思想 实质上是将多个指标综合成少数几个指标的方法。 主成分分析是利用降维的方法，在确保数据信息损失最小的原则下，把多个指标转化为少数几 个综合指标的一种对多变量数据进行最佳综合简化的多元统计方法。主成分是原始变量之间的 线性组合，且主成分之间互不相关。 主成份分析的主要目的是压缩指标个数、简化数据，但常常与回归分析、因子分析、聚类分析、判 别分析等等套用。","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"卡方统计量","date":"2019-03-18T12:28:01.000Z","path":"2019/03/18/Books/Statistics/wiki_chi-square/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} draft 卡方拟合优度检验 卡方独立性检验 1 draft 卡方检验有两个用途：列联表的独立性检验和拟合优度检验。 1.1 卡方拟合优度检验 Goodness of fit test 百科 拟合优度检验是用卡方统计量进行统计显著性检验的重要内容之一。它是依据总体分布状况，计算 出分类变量中各类别的期望频数，与分布的观察频数进行对比，判断期望频数与观察频数是否有显 著差异，从而达到从分类变量进行分析的目的。 用来检验观测数与依照某种假设或分布模型计算得到的理论数之间一致性的一种统计假设检验，以 便判断该假设或模型是否与实际观测数相吻合。 检验观测数与理论数之间的一致性。 1.2 卡方独立性检验 通过检验观测数与理论数之间的一致性来判断事件之间的独立性，即判断两个事件是否是独立事件 或处理间差异是否显著。","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Wiki","slug":"Wiki","permalink":"https://qrsforever.github.io/tags/Wiki/"}]},{"title":"非参数统计例题1","date":"2019-03-15T02:01:29.000Z","path":"2019/03/15/Books/Statistics/cases_nonparametric_analysis_1/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 下表中的数据是12家咖啡连锁店周末(周日)、平时和假日平均每日销售额统计表,单位(百元): (1)请问用什么方法可以回答圣诞节与周末(周日)销售额之间有关系吗? 请写出具体的分析思路和分析结果。","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Cases","slug":"Cases","permalink":"https://qrsforever.github.io/tags/Cases/"}]},{"title":"例题之地区消费水平","date":"2019-02-27T13:48:03.000Z","path":"2019/02/27/Books/Statistics/cases_t_and_variance_analysis/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 国家统计局目前对地区的划分中,将我国 31 个省市自治区划分为东部地区、中部地区、西部地区、东北地区。 要分析四个地区的平均消费水平是否存在显著差异,所用的统计方法有哪些?这些方法的区别是什么? 你会选择什么方法进行分析?你的假设是什么? 答: 可两两之间进行 t 检验或 4 组数据进行方差分析。 T 检验:两独立样本 t 检验(two independent samples t-test),又称成组 t 检验。 适用于完全随机设计的两样本均数的比较,其目的是检验两样本所来自总体的均数是 否相等。完全随机设计是分别从不同总体中随机抽样进行研究,即本项目中从不同地 区随机抽样进行研究相符合。 单因素方差分析:研究一个分类型自变量对一个数值型因变量的影响,如本项目中就 是研究四个不同地区对平均消费水平的影响。 区别:T 检验属于均值分析,它是用来检验两类母体均值是否相等。均值分析是来考察 不同样本之间是否存在差异,即两个不同地区之间消费水平是否存在显著差异;而方 差分析则是评估不同样本之间的差异是否由某个因素起主要作用,即消费水平的显著 差异是否是由地区不同引起的。并且通过单因素方差分析只能得出 4 组数据是否存在 显著差异,并不能得出具体是哪几个地区之间有显著差异。 Kruskal-Wallis 检验: 用于检验多个独立总体是否相同的一种非参数检验方法。 原假设: 四 个地区平均消费水平相等,备择假设: 四个地区平均消费水平不全相等。不需要方差分析的 正态分布且方差相等的假设。该检验可用于顺序数据也可用于数值型数据 我选择用单因素方差分析,因为本项目共分为 4 组数据,只要求分析他们之间是 否存在显著差异,并不用确定具体差异如何存在的。原假设为:四个地区之间的平均 消费水平没有显著差异。若最终拒绝原假设,则说明四个地区之间的平均水平存在显 著差异。即证明了题目中的要求。因为对四个地区的分布和方差未知,选择非参数方法。","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Cases","slug":"Cases","permalink":"https://qrsforever.github.io/tags/Cases/"}]},{"title":"统计学之指数","date":"2019-02-21T02:30:19.000Z","path":"2019/02/21/Books/Statistics/statistics_index/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 0.1 diffirent between \"exponent\" and \"index\" exponent: 数学上的指数, 2的3次方,3就是指数 index: 价格、股票等方面的比较指数 index, 相对数, 基期, 报告期 0.2 简单综合指数和简单平均指数 简单综合: 简单求和, 价格低的容易被高价格掩盖 简单平均: 基期与报告期对比之后再综合 这里的简单是指把所有商品价值同等看待, 缺乏实际意义 0.3 加权综合指数和加权平均指数","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"设备操作API","date":"2018-12-29T09:51:48.000Z","path":"2018/12/29/Company/Leshi/Device_Operate_API/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 设备操作 环境变量 API测试 搜索新设备 查询主机设备列表 添加新设备 查询设备在线状态 查询设备属性Profile 设备状态信息获取 操作设备属性 1 设备操作 1.1 环境变量 export ip=192.168.124.16 export port=8899 export token=&quot;token:1234567&quot; export devId=&quot;00124b00-19a8-9215-d0d0&quot; export typeId=&quot;oic.d.kk_lightctrl&quot; export prop1=&quot;{\\&quot;name\\&quot;:\\&quot;value1\\&quot;, \\&quot;value\\&quot;:\\&quot;0\\&quot;}&quot; export prop2=&quot;{\\&quot;name\\&quot;:\\&quot;value2\\&quot;, \\&quot;value\\&quot;:\\&quot;1\\&quot;}&quot; 1.2 API测试 1.2.1 搜索新设备 命令: curl -v -X POST http://$ip:$port/api/familydevice/discovery -H $token 输出: { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familydevice/discovery&quot;, &quot;status&quot;: 1, &quot;result&quot;: { &quot;ret&quot;: &quot;success&quot;, &quot;maxDuration&quot;: &quot;5&quot; } } 1.2.2 查询主机设备列表 命令: curl -v -X POST http://$ip:$port/api/familydevice/listall -H $token 输出: { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familydevice/list&quot;, &quot;status&quot;: 1, &quot;result&quot;: [ { &quot;deviceId&quot;: &quot;00124b00-12cc-8000-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_envsensor&quot;, &quot;ownedStatus&quot;: &quot;false&quot; }, { &quot;deviceId&quot;: &quot;00124b00-12d2-676f-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_envsensor&quot;, &quot;ownedStatus&quot;: &quot;false&quot; }, { &quot;deviceId&quot;: &quot;00124b00-1646-0823-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_scenectrl&quot;, &quot;ownedStatus&quot;: &quot;false&quot; }, { &quot;deviceId&quot;: &quot;00124b00-16bd-69a5-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_doorcontact&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-16bd-9578-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_sosalarm&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-16bd-a7a8-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_doorcontact&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-1769-1549-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_doorcontact&quot;, &quot;ownedStatus&quot;: &quot;false&quot; }, { &quot;deviceId&quot;: &quot;00124b00-1769-2c9b-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_sosalarm&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-176c-76cd-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_sosalarm&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-18dc-e960-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_smartplug&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-18dc-eaa1-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_smartplug&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-199f-5c97-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_lightctrl&quot;, &quot;ownedStatus&quot;: &quot;true&quot; }, { &quot;deviceId&quot;: &quot;00124b00-19a8-9215-d0d0&quot;, &quot;typeId&quot;: &quot;oic.d.kk_lightctrl&quot;, &quot;ownedStatus&quot;: &quot;false&quot; } ] } 1.2.3 添加新设备 命令: curl -v -X POST http://$ip:$port/api/familydevice/bind -H $token -d \"{\\\"deviceId\\\":\\\"$devId\\\", \\\"typeId\\\":\\\"$typeId\\\"}\" 输出： { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familydevice/bind&quot;, &quot;status&quot;: 1, &quot;result&quot;: { &quot;typeId&quot;: &quot;oic.d.kk_lightctrl&quot;, &quot;deviceId&quot;: &quot;00124b00-19a8-9215-d0d0&quot;, &quot;ownedStatus&quot;: &quot;true&quot; } } 1.2.4 查询设备在线状态 命令: curl -v -X POST http://$ip:$port/api/familydevice/isonline -H $token -d \"{\\\"deviceId\\\":\\\"$devId\\\"}\" 输出: { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familydevice/isonline&quot;, &quot;status&quot;: 1, &quot;result&quot;: { &quot;isonline&quot;: &quot;true&quot; } } 1.2.5 查询设备属性Profile 命令: curl -v -X POST http://$ip:$port/api/familydevice/profile -H $token -d \"{\\\"deviceId\\\":\\\"$devId\\\"}\" 输出: { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familydevice/profile&quot;, &quot;status&quot;: 1, &quot;result&quot;: { &quot;profile&quot;: { &quot;OnlineState&quot;: { &quot;tag&quot;: &quot;在线状态&quot;, &quot;write&quot;: &quot;F&quot;, &quot;read&quot;: &quot;T&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;range&quot;: { &quot;0&quot;: &quot;离线&quot;, &quot;1&quot;: &quot;在线&quot; } }, &quot;value1&quot;: { &quot;tag&quot;: &quot;开关状态1&quot;, &quot;read&quot;: &quot;T&quot;, &quot;write&quot;: &quot;T&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;range&quot;: { &quot;0&quot;: &quot;离线&quot;, &quot;1&quot;: &quot;在线&quot; } }, &quot;value2&quot;: { &quot;tag&quot;: &quot;开关状态2&quot;, &quot;read&quot;: &quot;T&quot;, &quot;write&quot;: &quot;T&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;range&quot;: { &quot;0&quot;: &quot;离线&quot;, &quot;1&quot;: &quot;在线&quot; } }, &quot;value3&quot;: { &quot;tag&quot;: &quot;开关状态3&quot;, &quot;read&quot;: &quot;T&quot;, &quot;write&quot;: &quot;T&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;range&quot;: { &quot;0&quot;: &quot;离线&quot;, &quot;1&quot;: &quot;在线&quot; } } }, &quot;description&quot;: &quot;控客3T灯控&quot;, &quot;manufacture&quot;: &quot;Konke&quot;, &quot;version&quot;: &quot;0.9.2&quot; } } 1.2.6 设备状态信息获取 命令: curl -v -X POST http://$ip:$port/api/familydevice/status -H $token -d \"{\\\"deviceId\\\":\\\"$devId\\\"}\" 输出: { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familydevice/status&quot;, &quot;status&quot;: 1, &quot;result&quot;: { &quot;value1&quot;: &quot;0&quot;, &quot;value2&quot;: &quot;0&quot;, &quot;value3&quot;: &quot;0&quot; } } 1.2.7 操作设备属性 命令: curl -v -X POST http://$ip:$port/api/familydevice/operate -H $token -d \"{\\\"deviceId\\\":\\\"$devId\\\", \\\"propSet\\\":\\\"$propset\\\"}\" 输出: { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familydevice/operate&quot;, &quot;status&quot;: 1, &quot;result&quot;: { &quot;ret&quot;: &quot;SUCCESS&quot; } }","tags":[{"name":"Work","slug":"Work","permalink":"https://qrsforever.github.io/tags/Work/"}]},{"title":"场景操作API","date":"2018-12-29T09:50:40.000Z","path":"2018/12/29/Company/Leshi/Scene_Operate_API/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 场景操作 环境变量 场景测试文件 数据库 API测试 创建场景 更新场景 删除场景 查询场景 查询场景列表 手动执行接口 1 场景操作 1.1 环境变量 export ip=192.168.124.16 export port=8899 export token=&quot;token:1234567&quot; 1.2 场景测试文件 自动模式的autotest.json文件 { &quot;sceneId&quot;: &quot;-&quot;, &quot;sceneName&quot;: &quot;autotest&quot;, &quot;description&quot;: &quot;当环境传感器流明值小于等于35则打开灯&quot;, &quot;trigger&quot;: { &quot;switch&quot;: { &quot;enabled&quot;: &quot;on&quot;, &quot;notify&quot;: &quot;off&quot;, &quot;timeCondition&quot;: &quot;off&quot;, &quot;deviceCondition&quot;: &quot;on&quot;, &quot;manual&quot;: &quot;on&quot; }, &quot;triggerType&quot;: &quot;auto|manual&quot; }, &quot;conditions&quot;: { &quot;conditionLogic&quot;: &quot;&quot;, &quot;deviceCondition&quot;: { &quot;deviceStatus&quot;: [ { &quot;propValue&quot;: &quot;v&lt;=35&quot;, &quot;deviceId&quot;: &quot;00124b00-12cc-8000-d0d0&quot;, &quot;propName&quot;: &quot;illuminance&quot; } ], &quot;deviceLogic&quot;: &quot;&quot; } }, &quot;actions&quot;: { &quot;deviceControl&quot;: [ { &quot;propValue&quot;: &quot;1&quot;, &quot;deviceId&quot;: &quot;00124b00-19a8-9215-d0d0&quot;, &quot;propName&quot;: &quot;value1&quot; }, { &quot;propValue&quot;: &quot;1&quot;, &quot;deviceId&quot;: &quot;00124b00-19a8-9215-d0d0&quot;, &quot;propName&quot;: &quot;value2&quot; } ] } } 手动模式的manualtest.json文件 { &quot;sceneId&quot;: &quot;-&quot;, &quot;sceneName&quot;: &quot;manualtest&quot;, &quot;description&quot;: &quot;&quot;, &quot;trigger&quot;: { &quot;switch&quot;: { &quot;enabled&quot;: &quot;on&quot;, &quot;notify&quot;: &quot;off&quot;, &quot;timeCondition&quot;: &quot;off&quot;, &quot;deviceCondition&quot;: &quot;off&quot;, &quot;manual&quot;: &quot;off&quot; }, &quot;triggerType&quot;: &quot;manual&quot; }, &quot;actions&quot;: { &quot;deviceControl&quot;: [ { &quot;propValue&quot;: &quot;1&quot;, &quot;deviceId&quot;: &quot;00124b00-19a8-9215-d0d0&quot;, &quot;propName&quot;: &quot;value3&quot; } ] } } 1.3 数据库 删除所有数据: adb shell sqlite3 /data/homebrain/engine.db \\\"delete from rules\\\" 查询所有数据: adb shell sqlite3 /data/homebrain/engine.db \\\"select id, name from rules\\\" 1.4 API测试 1.4.1 创建场景 命令: ret1SceneId=$(curl -v -X POST http://$ip:$port/api/familyscene/add -H $token -d @autotest.json 2&gt;/dev/null | grep -Po 'sceneId[\" :]+\\K[^\"]+') 命令: ret2SceneId=$(curl -v -X POST http://$ip:$port/api/familyscene/add -H $token -d @manualtest.json 2&gt;/dev/null | grep -Po 'sceneId[\" :]+\\K[^\"]+') 命令: ret3SceneId=$(curl -v -X POST http://$ip:$port/api/familyscene/add -H $token -d @manualtest.json 2&gt;/dev/null | grep -Po 'sceneId[\" :]+\\K[^\"]+') 输出: { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familyscene/add&quot;, &quot;result&quot;: { &quot;resInfo&quot;: &quot;规则添加成功&quot;, &quot;sceneId&quot;: &quot;163616&quot;, &quot;ruleScript&quot;: 1 }, &quot;status&quot;: 1 } ret[1-3]SceneId是返回的场景Id 1.4.2 更新场景 命令: cat autotest.json | sed \"s/\\\"-\\\"/\\\"$ret1SceneId\\\"/\" | sed \"s/=35/\\=45/\" | tee /tmp/autotest.json 命令: curl -v -X POST http://$ip:$port/api/familyscene/modify -H $token -d @/tmp/autotest.json { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familyscene/modify&quot;, &quot;result&quot;: { &quot;resInfo&quot;: &quot;规则修改成功&quot;, &quot;sceneId&quot;: &quot;163616&quot;, &quot;ruleScript&quot;: 1 }, &quot;status&quot;: 1 } 1.4.3 删除场景 命令: curl -v -X POST http://$ip:$port/api/familyscene/delete -H $token -d \"{\\\"sceneId\\\":\\\"$ret3SceneId\\\"}\" { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familyscene/delete&quot;, &quot;result&quot;: { &quot;resInfo&quot;: &quot;规则删除成功&quot;, &quot;sceneId&quot;: &quot;582111&quot;, &quot;ruleScript&quot;: 1 }, &quot;status&quot;: 1 } 1.4.4 查询场景 命令: curl -v -X POST http://$ip:$port/api/familyscene/query -H $token -d \"{\\\"sceneId\\\":\\\"$ret1SceneId\\\"}\" { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familyscene/query&quot;, &quot;result&quot;: { &quot;resInfo&quot;: &quot;规则查询成功&quot;, &quot;scene&quot;: { &quot;sceneId&quot;: &quot;163616&quot;, &quot;sceneName&quot;: &quot;autotest&quot;, &quot;description&quot;: &quot;当环境传感器监控流明值小于等于35则打开灯&quot;, &quot;trigger&quot;: { &quot;switch&quot;: { &quot;enabled&quot;: &quot;on&quot;, &quot;notify&quot;: &quot;off&quot;, &quot;timeCondition&quot;: &quot;off&quot;, &quot;deviceCondition&quot;: &quot;on&quot;, &quot;manual&quot;: &quot;on&quot; }, &quot;triggerType&quot;: &quot;auto|manual&quot; }, &quot;conditions&quot;: { &quot;conditionLogic&quot;: &quot;&quot;, &quot;deviceCondition&quot;: { &quot;deviceStatus&quot;: [ { &quot;propValue&quot;: &quot;v&lt;=45&quot;, &quot;deviceId&quot;: &quot;00124b00-12cc-8000-d0d0&quot;, &quot;propName&quot;: &quot;illuminance&quot; } ], &quot;deviceLogic&quot;: &quot;&quot; } }, &quot;actions&quot;: { &quot;deviceControl&quot;: [ { &quot;propValue&quot;: &quot;1&quot;, &quot;deviceId&quot;: &quot;00124b00-19a8-9215-d0d0&quot;, &quot;propName&quot;: &quot;value1&quot; }, { &quot;propValue&quot;: &quot;1&quot;, &quot;deviceId&quot;: &quot;00124b00-19a8-9215-d0d0&quot;, &quot;propName&quot;: &quot;value2&quot; } ] } } }, &quot;status&quot;: 1 } 1.4.5 查询场景列表 命令: ` curl -v -X POST http://\\(ip:\\)port/api/familyscene/listall -H $token { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familyscene/listall&quot;, &quot;result&quot;: { &quot;resInfo&quot;: &quot;规则列表查询成功&quot;, &quot;data&quot;: [ { &quot;triggerenabled&quot;: &quot;1&quot;, &quot;sceneName&quot;: &quot;autotest&quot;, &quot;sceneId&quot;: &quot;163616&quot;, &quot;description&quot;: &quot;当环境传感器监控流明值小于等于35则打开灯&quot; }, { &quot;triggerenabled&quot;: &quot;1&quot;, &quot;sceneName&quot;: &quot;manualtest&quot;, &quot;sceneId&quot;: &quot;947828&quot;, &quot;description&quot;: &quot;&quot; }, { &quot;triggerenabled&quot;: &quot;1&quot;, &quot;sceneName&quot;: &quot;manualtest&quot;, &quot;sceneId&quot;: &quot;582111&quot;, &quot;description&quot;: &quot;&quot; } ] }, &quot;status&quot;: 1 } 1.4.6 手动执行接口 命令: curl -v -X POST http://$ip:$port/api/familyscene/execute -H $token -d \"{\\\"sceneId\\\":\\\"$ret2SceneId\\\"}\" { &quot;requestId&quot;: &quot;abcddcba&quot;, &quot;request&quot;: &quot;/api/familyscene/execute&quot;, &quot;result&quot;: { &quot;resInfo&quot;: &quot;规则执行成功&quot;, &quot;sceneId&quot;: &quot;947828&quot;, &quot;ruleScript&quot;: 1 }, &quot;status&quot;: 1 }","tags":[{"name":"Work","slug":"Work","permalink":"https://qrsforever.github.io/tags/Work/"}]},{"title":"(原创)多元线性回归(MLR)","date":"2018-12-25T13:35:04.000Z","path":"2018/12/25/Books/Statistics/Multiple_Linear_Regression/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 实践 1 资源 Multiple Linear Regression 统计学(第六版)-贾俊平 2 实践","tags":[{"name":"Statatistics","slug":"Statatistics","permalink":"https://qrsforever.github.io/tags/Statatistics/"},{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"}]},{"title":"离群点和高杠杆率点","date":"2018-12-20T08:00:28.000Z","path":"2018/12/20/Books/Statistics/outliers_and_leverage/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 概念 1. 异常值(Outlier) 2. 杠杆率(Leverage) 实践 1 资源 Influential Points 2 概念 观察点是Outlier Point, 不一定就是Influence Point 观察点是High Leverage Point, 也不一定是Influence Point dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} A data point is influential if it unduly influences any part of a regression analysis, such as the predicted responses, the estimated slope coefficients, or the hypothesis test results. newonlinecoursesDistinction Between Outliers & High Leverage Observations 是不是Influence Point, 要看包含及排除这个观测点是否对预测Y值和回归模型系数以及统计检验结果有影响. 2.1 1. 离群点(Outlier) An outlier is a data point whose response y does not follow the general trend of the rest of the data. 该观测值偏离预测的Y值 2.2 2. 杠杆率(Leverage) A data point has high leverage if it has \"extreme\" predictor x values. 该观测值的X非常偏离其他X数据 推导公式: \\[ \\begin{alignat}{1} Y &amp;= X\\beta + \\epsilon \\\\ \\hat{y} &amp;= X(X^{&#39;}X)^{-1}X^{&#39;}y \\\\ H &amp;= X(X^{&#39;}X)^{-1}X^{&#39;} \\\\ \\hat{y}_i &amp;= h_{i1}y_1+h_{i2}y_2+...+h_{ii}y_i+ ... + h_{in}y_n \\;\\;\\;\\;\\; \\text{ for } i=1, ..., n \\\\ \\end{alignat} \\] H是个hat matrix, 为什么叫这个名字? 由\\(\\hat{y} = Hy\\), 把y通过H矩阵变换为\\(\\hat{y}\\), \\(h_{ii}\\)叫Leverages, 此值越大说明在\\(\\hat{y}_i\\)中\\(y_i\\)占有更大的角色. dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Here are some important properties of the leverages: The leverage hii is a measure of the distance between the x value for the ith data point and the mean of the x values for all n data points. The leverage hii is a number between 0 and 1, inclusive. The sum of the hii equals p, the number of parameters (regression coefficients including the intercept). newonlinecoursesDefinition and properties of leverages 如何通过\\(h_ii\\)判断观察点的x值是异常的? 答: 杠杆点均值 \\(\\bar{h} = \\dfrac{\\sum_{i = 1}^{n}h_{ii}}{n} = \\dfrac{p}{n}\\), 如果\\(h_{ii} \\gt 3\\dfrac{p}{n}\\), 则\\(h_{ii}\\)是高杠杆率点. 3 实践","tags":[{"name":"Statatistics","slug":"Statatistics","permalink":"https://qrsforever.github.io/tags/Statatistics/"}]},{"title":"一元线性回归(SLR)","date":"2018-12-20T02:37:00.000Z","path":"2018/12/20/Books/Statistics/Simple_Linear_Regression/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 实践 1 资源 Using python statsmodels for OLS linear regression Introduction to Linear Regression Analysis(5th)-Douglas 数据集-百度云 2 模型 Population Regression Model: \\(y = \\beta_0 + \\beta_1 x + \\epsilon\\) Sample Regression Model: \\(y_i = \\beta_0 + \\beta_1 x_i + \\epsilon_i, \\quad i = 1,2,\\cdots,n\\) Simple Linear Regression Model: \\(\\hat{y} = \\hat{\\beta_0} + \\hat{\\beta_1} x\\) the least - squares criterion is \\[ S(\\beta_0, \\beta_1) = \\sum_{i = 0}^{n} (y_i - \\beta_0 - \\beta_1 x_i)^2 \\] Residual: \\(e_i = y_i - \\hat{y_i} = y_i - (\\hat{\\beta_0} + \\hat{\\beta_1} x), \\quad i = 1,2,\\cdots,n\\) 3 问题 after fit: How well does this equation fi t the data? Is the model likely to be useful as a predictor? Are any of the basic assumptions (such as constant variance and uncorrelated errors) violated, and if so, how serious is this? 4 实践","tags":[{"name":"Statatistics","slug":"Statatistics","permalink":"https://qrsforever.github.io/tags/Statatistics/"},{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"}]},{"title":"数理统计学习站点","date":"2018-12-18T14:52:53.000Z","path":"2018/12/18/Books/Statistics/statistics_websites/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 站点 数据集 1 资源 Statistics How To Data Science Plus Python StatsModels Online Courses: Stats Statistics By Jim Data Robot Towards Data Science 2 数据集 Kaggle 百度云","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"异方差性检验","date":"2018-12-18T14:39:11.000Z","path":"2018/12/18/Books/Statistics/Heteroscedasticity_Test/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 数据集 Homoscedasticity Heteroscedasticity Why is it important to check for heteroscedasticity? How to detect heteroscedasticity? 1. Graphical Methods 2. Statistics Tests How to rectify? Draft 实践 1 资源 同方差 异方差 检测异方差并校准 new online: residuals beginners-guide-regression-analysis-plot emulating-r-regression-plots-in-python 2 数据集 百度云 3 Homoscedasticity homoscedasticity means \"having the same scatter.\" As variance is just the standard deviation squared, you might also see homoscedasticity described as a condition where the standard deviations are equal for all points. Running a test without checking for equal variances can have a significant impact on your results and may even invalidate them completely. 很多统计检验都假设等方差条件, 如果条件不满足, 会产生错误的结果. 4 Heteroscedasticity homoscedasticity means \"having the different scatter.\" where points are at widely varying distances from the regression line. 4.1 Why is it important to check for heteroscedasticity? 在线性回归模型中, 不能用X解释Y的那些部分都放入了误差项(可能还有一些未被发现的因素), 模型的稳健型就看误差项, 如果误差项不是同方差的(比如随着X, 标准误差变动), 那么构建的模型不够稳. 4.2 How to detect heteroscedasticity? 4.2.1 1. Graphical Methods 分析误差项(残差分析) Residual vs. Fitted Values Plot(残差散点图): 应该在Y=0, 这条直线上, 随机上下波动, 不会出现U型曲线, 残差相互独立性 Scale-Location Plot(标准化残差方根散点图): 学生化残差, 使用残差值的方根比残差值更无偏性, (sqrt(|E|)) is much less skewed than | E | for Gaussian zero-mean E), 小于2正常, 如果不开根方的话:标准化残差图, 图中的点一般在-2 ~ 2 之间正常. Normality Q-Q Plot(残差QQ图): 倾斜的直线是ok的, 如果发现有曲线U, 说明残差不是正态的, 假定不成立, 残差正态性检验 Leverage plot(杠杆图): Cookie distance, 库克距离, 是否存在异常数据 4.2.2 2. Statistics Tests 4.3 How to rectify? 5 Draft Breush Pagan (布劳殊-培干) 6 实践","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"(原创)Tutorial for Hexo","date":"2018-12-18T13:20:26.000Z","path":"2018/12/18/Tutorial/Hexo/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Tag Plugins Block Quote Include Posts Include Assets 原文 1 Requirements sudo apt install pandoc sudo apt install nbconvert sudo apt install texlive 2 Tag Plugins 2.1 Block Quote 语法: {% blockquote [author[, source]] [link] [source_link_title] %} content {% endblockquote %} Case1: {% blockquote %} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. {% endblockquote %} dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. Case2: {% blockquote David Levithan, Wide Awake %} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. {% endblockquote %} dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake Case3: {% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %} NEW: DevDocs now comes with syntax highlighting. http://devdocs.io {% endblockquote %} dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 Case4: {% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %} Every interaction is both precious and an opportunity to delight. {% endblockquote %} dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 2.2 Code Block 语法: {% codeblock [title] [lang:language] [url] [link text] %} code snippet {% endcodeblock %} Case1: {% codeblock %} alert('Hello World!'); {% endcodeblock %} alert(&#39;Hello World!&#39;); Case2: {% codeblock lang:objc %} [rectangle setX: 10 y: 10 width: 20 height: 20]; {% endcodeblock %} [rectangle setX: 10 y: 10 width: 20 height: 20]; Case3: not work!!! {% codeblock _.compact http://underscorejs.org/#compact Underscore.js %} _.compact([0, 1, false, 2, '', 3]); => [1, 2, 3] {% endcodeblock %} _.compact([0, 1, false, 2, &#39;&#39;, 3]); =&gt; [1, 2, 3] 2.3 Include Posts 语法: {% post_path filename %} {% post_link filename [optional text] %} Case1: &lt;a href=&quot;{% post_path Tutorial/Latex %}&quot;&gt;link to Latex&lt;/a&gt;. link to Latex. Not support markdown: []({% post_path Tutorial/Latex %}) Case2: {% post_link Tutorial/Markdown 'link to Markdown' %} link to Markdown 2.4 Include Assets 语法: {% asset_path slug %} {% asset_img slug [title] %} {% asset_link slug [title] %} Case1: {% asset_path test.png %} {% asset_path test.png %} Case2: {% asset_img test.png \"test\" %} Case3: {% asset_link test.png \"link to test\" %} link to test 绑定了本POST的ID, 只能引用自己ID下的资源","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://qrsforever.github.io/tags/Markdown/"}]},{"title":"置信区间和预测区间","date":"2018-12-18T07:19:55.000Z","path":"2018/12/18/Books/Statistics/Confidence_Prediction_Intervals/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资料 实践 1 资料 stackoverflow:confidence-and-prediction-intervals-with-statsmodels 2 实践","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"OLS, WLS, GLS","date":"2018-12-18T07:16:23.000Z","path":"2018/12/18/Books/Statistics/OLS_WLS_GLS/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 线性回归模型 高斯马尔科夫定理 OLS: Ordinal Least Squares: 普通 WLS: Weighted Least Squares: 加权 GLS: General Least Squares: 广义 实践 1 资源 加权最小平方法及稳健回归模型之简介 Introduction to Linear Regression Analysis(5th)-Douglas OLS in Matrix Form 2 线性回归矩阵形式 2.1 回顾:协方差与协方差矩阵 方差: \\(Var(X) = E[(X - E[X])(X - E[X])]\\) 协方差: \\(Cov(X, Y) = E[(X - E[X])(Y - E[Y])]\\) 总体:\\(y = X\\beta + \\epsilon\\) Assumptions: \\(E(\\epsilon) = 0\\) \\(Var(\\epsilon) = \\sigma^2\\mathbf{I}\\) 推到： \\(\\epsilon = y - X\\hat{\\beta}\\) \\(\\epsilon^T \\epsilon = (y - X\\hat{\\beta})^T (y - X\\hat{\\beta})\\), 求最小 \\(\\hat{\\beta} = (X^T X)^{-1}X^Ty\\) 其中\\(X^T X\\)是K x K的矩 2.2 高斯马尔科夫定理 在线性回归模型中，如果误差满足零均值、同方差且互不相关(并没要求正态分布或iid)，则回归系数的最佳(更小的方差)线性无偏估计(BLUE, Best Linear unbiased estimator)就是普通最小二乘法估计。 2.3 残差的协方差矩阵如何理解 疑点: 对于n个观测点, 哪来的残差矩\\(M_{n \\times n}\\) dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} How do I obtain the variance for a variable with one observation? The same goes for the off-diagonal elements: How come there exists a covariance for 2 single observations? stats, stackexchangeOLS: Variance Covariance matrix of residuals 3 OLS: Ordinal Least Squares: 普通 同方差(误差项的方差是常数) \\(\\hat{\\beta} = (X^T X)^{-1} X^T y\\) 4 WLS: Weighted Least Squares: 加权 异方差(误差项的方差是变化的) \\(Var(\\epsilon) = \\sigma^2\\mathbf{V}\\); \\(V_{n \\times n}\\) is diagonal but with unequal diagonal elements 5 GLS: General Least Squares: 广义 不仅仅是异方差 \\(\\hat{\\beta} = (X^T V^{-1} X)^{-1} X^T V^{-1} y\\) 6 实践","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"假设检验","date":"2018-12-14T09:30:07.000Z","path":"2018/12/14/Books/Statistics/Hypothesis_Tests/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 Draft Statistical hypothesis tests can be grouped into parametric tests and nonparametric tests. Parametric tests assume that the data can be well described by a distribution that is defined by one or more parameters 1.1 Tests for normality 1.1.1 Probability-Plots","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"核密度","date":"2018-12-14T09:15:54.000Z","path":"2018/12/14/Books/Statistics/Kernel_Density_Estimation/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 概念 其他 1 资源 An Introduction to Statistics with Python-Thomas Haslwanter Wikipedia 2 概念 In statistics, kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable. Kernel density estimation is a fundamental data smoothing problem where inferences about the population are made, based on a finite data sample. 3 其他","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"相关分析","date":"2018-12-07T09:44:17.000Z","path":"2018/12/07/Books/Statistics/analysis_correlation/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 定义 方法 其他 1 资源 Kaggle 百度云 TODO 2 定义 相关分析: 统计分析方法, 随机变量之间的相关关系, 变量对等 回归分析: 统计分析方法, 随机变量之间的依赖关系, 变量不对等, X预测Y. X为可被控制/设定的普通变量 3 方法","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"赤裸裸统计学","date":"2018-12-05T07:06:37.000Z","path":"2018/12/05/Books/Statistics/Naked_Statistics/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 书籍 数据集 中心极限地理 假设检验 数字的意义 权衡犯错类型 回归分析 1 书籍 赤裸裸的统计学-Naked Statistics-曹槟(译) 1.1 数据集 变化的一生-数据集-官网 变化的一生-数据集-百度云 2 中心极限地理 标准差: 群体中个体的离散性 \\(S\\) 标准误差: 样本均值的离散性, (还有一种说法:统计量的标准差) \\(S/\\sqrt(n)\\) 正确的抽样, 样本均值分布总体均值左右 应用: 一组: 马拉松参赛人员样本 二组: 香肠节参赛人员样本 根据样本的体重均值, 可以猜到某样本要参赛的项目 dataset: V940: G23(IN):HOW TALL-INCHES V941: G24:WEIGHT IN POUNDS 3 假设检验 3.1 数字的意义 68% 95% 99.7% 0.05 1.96SE 3.2 权衡犯错类型 H0: 原假设, 收集足够的证据(样本数据)否定它, 阴性 H1: 备择假设, 符号决定拒绝域(双侧,单侧), 阳性 第一类错误(\\(\\alpha\\)): 假阳性 (拒绝了正确的原假设H0) 第二类错误(\\(\\beta\\)): 假阴性 (接受了错误的原假设H0) 在原假设的条件下, 通过样本数据判断发生某事件的概率, 如果概率很小, 如果\\(\\alpha = 0.05\\)就可以否定原假设, 不太相信H0, 但是H0有可能是对的. 拒绝H0的时候就会犯第一类错误 接受H0的时候就会犯第二类错误 \\(\\alpha\\) 应该是宽松(eg:0.1)还是严格(eg: 0.001)? 如果过于宽松, 拒绝域(eg:0.1)变大, 意味着H0更容易被拒绝, 拒绝H0就会犯第一类错误(\\(\\alpha\\)错误) 如果过于严格, 拒绝域(eg:0.001)变小, 意味着H0更容易被接受, 接受H0就会犯第二类错误(\\(\\bata\\)错误) 需要根据具体的假设事件的严重性去合理的给予\\(\\alpha\\)值, 例如: 过滤垃圾邮件 H0: 正常 H1: 垃圾 如果邮件不是垃圾邮件, 根据过滤系统和宽松的(较大)\\(\\alpha\\), 犯第一类错误概率变大(拒绝H0, 邮件是垃圾), 这个错误可能导致此人少看一封最要的邮件. 判断一个人是否患癌症 H0: 正常 H1: 癌症 如果此人患有癌症, 根据检验数据和严格的(较小)\\(\\alpha\\), 犯第二类错误概率变大(接受H0, 此人没癌症), 这个错误可能害死人, 所以需要宽松的\\(\\alpha\\) 结论: 如果拒绝H0, 会带来严重损失或坏的影响, 希望不要轻易拒绝, 即缩小拒绝域(\\(\\alpha\\)减小) 如果接受H0, 会带来严重损失或坏的影响, 希望不要轻易接受, 即扩大拒绝域(\\(\\alpha\\)增大) 4 回归分析 什么是回归系数? 是要研究的统计量吗? 如何理解回归系数的离散程度(回归系数的标准误差) ? 自变量每增减一个单位, 因变量(随机变量)增减的数值可能不同, 在一个平均数值的周围波动. 残差是什么? 为啥取这个名字? 观察值到回归线(方程)垂直距离, 英文名字residual, 回归方程中的\\(\\epsilon\\) OLS是什么? Ordinary Least Squares, 残差平方和最小, Best Fit Line","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"正态性检验","date":"2018-11-27T05:56:02.000Z","path":"2018/11/27/Books/Statistics/Normality_Test/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 正态分布 统计量 代码演示 估计量 W检验 KS检验 Probability Plot QQ Plot 1 资源 正态性检验社-梁小筠 An Introduction to Statistics with Python-Thomas Haslwanter 2 正态分布 2.1 统计量 矩(monments): 均值, 方差, 偏度(skewness), 峰度(kurtosis) 量刚: 三阶中心矩的量刚是随机变量的立方 正态分布的中心距: \\[ \\mu_k = E(X - \\mu)^k = \\begin{cases} 0, &amp; \\text{k 是 奇数} \\\\ 1*3*5*(k - 1)\\sigma^2 &amp; \\text{k 是 偶数} \\end{cases} \\] 在统计中, 如何描述数据分布的倾斜方向, 以及倾斜的程度, 为什么使用偏度这个统计量呢? 偏度(3阶): 标准化的三阶中心距, 随机变量与中心分布的不对称程度 峰度(4阶): 随机变量在均值附近的相对平坦程度或峰值程度 (中国和国际的定义有些差别) 和数字3有关 2.2 代码演示","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"回归分析","date":"2018-11-26T11:37:44.000Z","path":"2018/11/26/Books/Statistics/analysis_regression/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源 概念 函数关系和相关关系 相关分析和回归分析 共线性 虚拟变量 回归 拟合优度 参考 回归模型的参数估计 点估计 普通最小二乘OLS 极大似然估计ML 矩法MM 区间估计 置信区间估计 预测区间估计 回归模型的显著性检验 线性关系F检验 回归系数t检验 预测 残差分析 线性回归几种方法实现 其他 问题 draft 1 资源 统计学(第六版)-贾俊平 计量经济学(第三版)-李子奈 2 概念 2.1 函数关系和相关关系 函数关系 圆的的面积, 能量的物理公式等, 一一对应 相关关系 身高和体重之间存在关系, 不一一对应 2.2 相关分析和回归分析 相关分析 统计分析方法, 随机变量之间的相关关系, 变量对等, 侧重于变量间相关程度的度量 回归分析 统计分析方法, 随机变量之间的依赖关系, 变量不对等, 侧重于Y和X的数量关系, X预测Y. X为可被控制/设定的普通变量 它所关心的是解释变量在给定确定值的情况下, 与之相关被解释变量所有可能出现的对应值的平均值. 思考: X确定之后的Y的条件概率分布是确定的, 可以得到Y的条件期望:\\(E(Y|X)\\). (抽样分布) 2.3 共线性 多重共线性 自变量之间存在相关关系(有些打酱油的自变量), 即某自变量可以由其他自变量推导出来, 会导致模型误差变大, 需要剔除 完全共线性 某自变量是其他自变量的线性函数, 即可以线性组合出该变量 2.4 虚拟变量 TODO, 一般是离散变量, 离散变量经过量化, 哑变量, 使模型更复杂, 但描述更简单 2.5 回归 线性回归 总体回归函数(PRF): \\(E(Y|X) = f(X) = \\beta_0 + \\beta_1X\\); 总体回归随机形式(个体): \\(Y = E(Y|X) + \\mu = \\beta_0 + \\beta_1X + \\mu\\), 其中\\(\\mu\\)是随机误差项(干扰项), 非系统部分 样本回归函数(SRF): \\(\\hat{Y} = f(X) = \\hat{\\beta_0} + \\hat{\\beta_1}X\\); 样本回归随机形式: \\(Y = \\hat{Y} + \\hat{\\mu} = \\hat{\\beta_0} + \\hat{\\beta_1}X + e\\), 其中\\(e\\)是\\(\\mu\\)的估计\\(\\hat{\\mu}\\), 样本残差. 子曰: (多元)总体回归函数是确定的, 但未知, 所以PRF中的随机误差项\\(\\mu\\)比SRF中的样本残差\\(e\\)少了一些未知解释变量等. 非线性回归 TODO 广义线性回归 非线性回归可转换为线性回归分析, 比如 Logistic回归 2.6 拟合优度 指回归直线对观测数据的接近程度, 使用判定系数度量. 什么是判定系数\\(R^2\\)? 它和相关系数\\(r\\)有什么联系和区别? 子曰: 在一元线性回归中: \\(r = \\sqrt{R^2}\\), r,\\(R^2\\)都可以描述回归直线的拟合程度, 但是r(eg:0.5)的值总是大于\\(R^2\\)(eg:0.25), eg: 表面上r看相关程度接近了一半, 实际上只能解释总变差的0.25. 什么是变差? 它和误差有什么区别? (误差和残差是一个东西吗?) 子曰: 变差是被解释变量的波动,包括x的引起的, 和非x的外因引起的; 残差是样本回归模型的非系统的那部分; 误差更多的是指总体回归模型的非系统的那部分, 但很多地方残差和误差都是一个东西. 变差: \\(y-\\bar{y}\\), 观测值与均值的离差 总变差平方和SST: \\(SST = \\sum(y_i - \\bar{y})^2\\) 回归平方和SSR: \\(SSR = \\sum(\\hat{y_i} - \\bar{y})^2\\); 为什么? \\(\\bar{y}\\)一条常数直线, \\(\\hat{y_i}\\)到该直线的距离, 只受到X变化的影响, 公式中没有真实值, 假定都在回归线上. 残差平方和SSE: \\(SSE = \\sum(y_i - \\hat{y_i})^2\\); 为什么? 样本回归模型非系统的那部分, X设定后, 回归值则定, 真实值与回归值的离差, 回归不能解释的那部分. SST = SSR + SSE 判定系数: \\(R^2 = \\dfrac{SSR}{SST} = 1 - \\dfrac{SSE}{SST}\\) 估计标准误差: \\(s_e = \\sqrt{\\dfrac{SSE}{n-2}} = \\sqrt{MSE}\\), 越小拟合越好 过拟合 TODO 欠拟合 TODO 2.7 参考 回归分析之理论篇 3 回归模型的参数估计 参数估计要依据样本数据做支撑. 一元 3.1 点估计 3.1.1 普通最小二乘OLS 二乘: 中国把平方和,一般叫做二乘 原理: 从总体随机抽取n组样本观察值, 最合理的参数估计量应该是使模型更好的拟合样本数据 实际观察值和通过回归模型计算出的被解释变量Y的估计值之差(e)的平方和最小. 即: \\(e = Y - \\hat{Y} = Y - (\\hat{\\beta_0} + \\hat{\\beta_1}X); Q=\\sum_{i=0}^{n}e_i^2\\) 通过微积分运算(偏导)计算未知参数. 3.1.2 极大似然估计ML 更本质地揭示通过样本数据估计总体参数的内在机理 原理: 从总体随机抽取n组样本观察值, 最合理的参数估计量应该是从模型中抽取这n组样本观察值的概率最大. 3.1.3 矩法MM TODO 了解更多:计量经济学(第三版)-李子奈 3.2 区间估计 The difference between a prediction interval and a confidence interval is the standard error. The standard error for a confidence interval on the mean takes into account(考虑) the uncertainty due to sampling. The line you computed from your sample will be different from the line that would have been computed if you had the entire population, the standard error takes this uncertainty into account. The standard error for a prediction interval on an individual observation takes into account the uncertainty due to sampling like above, but also takes into account the variability of the individuals around the predicted mean. The standard error for the prediction interval will be wider than for the confidence interval and hence the prediction interval will be wider than the confidence interval. 参考 A prediction interval is an interval associated with a random variable yet to be observed, with a specified probability of the random variable lying within the interval. For example, I might give an 80% interval for the forecast of GDP in 2014. The actual GDP in 2014 should lie within the interval with probability 0.8. Prediction intervals can arise in Bayesian or frequentist statistics. A confidence interval is an interval associated with a parameter and is a frequentist concept. The parameter is assumed to be non-random but unknown, and the confidence interval is computed from data. Because the data are random, the interval is random. A 95% confidence interval will contain the true parameter with probability 0.95. That is, with a large number of repeated samples, 95% of the intervals would contain the true parameter. 参考 另外: 贝叶斯置信区间(credable interval) 3.2.1 置信区间估计 给定\\(x_0\\), 求\\(y\\)平均值的区间估计, 对总体参数的估计(non-random but unkown), (重复抽样)我们有信心认为有\\(100*(1-\\alpha)\\)个样本包含总体参数的真值. 它的误差项: 随机抽样带来的. 公式: \\(E(Y|X) = \\beta_0 + \\beta_1X\\) 3.2.2 预测区间估计 给定\\(x_0\\), 求\\(y\\)的这个个值的区间估计, 对一个随机(random variable)变量的估计. 它的误差项: 随机抽样+个体的差异 公式: \\(Y = \\beta_0 + \\beta_1X + e\\) 4 回归模型的显著性检验 拟合优度检验 在重复抽样过程中, 参数估计量的期望值会接近总体参数, 但在一次抽样中, 计算出的估计量的值到底与总体参数有多接近呢? 4.1 线性关系F检验 F分布: 为什么? TODO 一元: MSR --&gt; SSR/1 --&gt; \\(\\hat{y} - \\bar{y}\\) --&gt; \\(\\hat{y}\\) 是什么分布? MSE --&gt; SSE/n-2 --&gt; \\(y - \\hat{y}\\) 是什么分布? 4.2 回归系数t检验 在一元回归检验中, 线性关系检验和回归系数检验是等效的, 只有一个系数, 但在多元回归中, 线性关系检验显著, 不代表回归系数检验显著, 因为只要有一个解释变量和被解释变量有线性关系, F检验显著, 并不能说明每个解释变量与被解释变量都是关系显著. 了解更多:统计学(第六版)-贾俊平 4.3 预测 4.4 残差分析 residual analysis 线性回归的几个假设前提: 残差等方差正态分布, 相互独立等. 什么时候进行残差分析? 回归模型之前, 显著性检验之后? 5 线性回归几种方法实现","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Draft","slug":"Draft","permalink":"https://qrsforever.github.io/tags/Draft/"}]},{"title":"方差分析","date":"2018-11-22T07:47:25.000Z","path":"2018/11/22/Books/Statistics/analysis_variance/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 什么个鬼 方差分析的假定 单因素 统计量 双因素 方差分析的假定 无交互作用 有交互作用 1 什么个鬼 为什么进行方差分析(ANOVA)? 方差分析是一种统计方法, 研究啥, 在实践中, 发现影响一个事物的因素有很多, 需要通过实验数据分析出哪个是主因素. 分析各分布的均值是否相等(表面), 判断分类自变量对连续因变量是否有显著影响 因素 (因变量) 水平 (自变量) 只有一个因素的方差分析: 单因素方差分析 研究的是均值是否相等, 为什么不叫等均值分析? 与方差齐性检验的区别? 一个因素多水平, 又要研究均值是否相等, 毫无疑问这个均值是来自各水平的, 之前学过判断均值是否相等的假设检验, 为啥还要搞出个方差分析?, 优势在哪? 前章节: 历史的数据是xxx? 现在抽样, 判断是否显著. (涉及到2个, 一个以往历史的(均值), 一个抽样观察值的(平均值)) 多水平如果两两组合也可以进行均值等分析检验, 但是要组合很多\\(C_n^2\\) Sum of Squares for 误差: SST: 总误差 = SSA + SSE, 自由度: n - 1 SSE: 组内误差, 随机误差对因变量的影响, 好听的名字: 残差效应; 自由度: n - k SSA: 组间误差, 自变量对因变量的影响, 好听的名字: 因子效应; 自由度: k - 1 误差(平方和表示)分为随机误差和系统误差, 随机误差是随机抽样(实验)导致, 系统误差是各水平内部存在差异导致. 组内误差: 某水平内部随机抽样 组间误差: 组间随机误差和自身的系统误差之和 TODO:组间的随机误差是什么鬼? 难道是各水平的随机抽取导致的? H1: 各水平均值相等 如果没有组间的系统误差, 那么各水平间的均值应该接近(只有随机误差). 系统误差大于多少时, 可以拒绝H0呢. 1.1 方差分析的假定 各水平来自同一个正态分布 (正态性检验) 各水平正态分布的方差相等 ? 是不是就需要第一步检验一下各水平的方差 ? (方差齐性检验) 观测值之间相互独立 2 单因素 2.1 统计量 因为每个水平抽取样本的容量不一定相等, 一般使用均方 \\[ MSA = \\frac{SSA}{k-1} \\\\ MSE = \\frac{SSE}{n-k} \\\\ F = \\frac{MSA}{MSE} \\\\ R_2 = \\frac{SSA}{SST} \\text{强度关系} \\] LSD 什么鬼 3 双因素 两个分类自变量 行因素: k个水平 列因素: r个水平 3.1 方差分析的假定 \\(k*r\\)个正态分布 (正态性检验), 随机误差\\(\\epsilon\\)为正态随机变量才能使用F检验 方差相同 (方差齐性检验), 如果方差不一致, 不能直接用方差分析, 需要变换 独立性 (游程检验和自相关系数) 3.2 无交互作用 SST: 自由度: kr - 1 SSR: 行因素产生的误差和; 自由度: k - 1 SSC: 列因素产生的误差和; 自由度: r - 1 SSE: 自由度: (k - 1)(r - 1) kr: 样本量可能为1 3.3 有交互作用 kr: 某一水平下要有几个观测值, m(行变量的每一个水平的行数)的出现 SST: n - 1 SSR: k - 1 SSC: r - 1 SSRC: (k - 1)(r - 1), 交互作用 SSE: kr(m - 1) ? 4 其他 Learning Using Python","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"统计推断","date":"2018-11-19T02:38:12.000Z","path":"2018/11/19/Books/Statistics/statistics_inference/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 参考书籍 参数估计 矩估计 极大似然估计(MLE) 评价估计量的标准 区间估计 如何理解 单总体均值的估计 单总体方差的估计 贝叶斯估计 假设检验 原理 拒绝域 假设 P值 总体检验 一个总体参数检验 两个总体参数检验 参数检验和非参数检验 其他 列联分析 方差分析 回归分析 1 参考书籍 概率论与数理统计(第二版)-茆诗松 概率论与数理统计(第四版)-盛骤 统计学(第四版)-贾俊平 计量经济学(第三版)-李子奈 Probability and Statistics (4th)-Morris H. DeGroot 2 参数估计 最小二乘法(勒让德) 贝叶斯估计法(贝叶斯) 矩估计法(卡尔·皮尔逊) 极大似然估计(费歇尔) 2.1 矩估计 样本矩估计总体矩, 不需要知道总体的分布, 几个未知参数, 构造几个\\(A_k\\), 解方程组. 使用\\(A_k\\)估计\\(\\mu_k\\): \\(\\hat{\\mu_k} = A_k\\) \\[ A_k = \\frac{1}{n}\\sum_{i=1}^nx_i^k \\] 方法(k个位置参数): 矩方程组: \\(\\mu_j = g_j(\\theta_1, \\theta_2, \\cdots, \\theta_k)\\) 解方程组: \\(\\theta_j = h_j(\\mu_1, \\mu_2, \\cdots, \\mu_k)\\) 样本估计: \\(\\hat{\\theta_j} = h_j(A_1, A_2, \\cdots, A_k)\\) 样本值带入计算 优点: 简单,总体分布可以不知道 缺点: 不唯一, 受样本异常值影响大, 不稳健 2.2 极大似然估计(MLE) Book:概率论与数理统计(第二版)-茆诗松, 例5.3.1, 黑白球 思想: 总体分布已知, 参数\\(\\theta\\)可能的取值, 取使样本观测值的概率最大的\\(\\theta\\)作为\\(\\hat\\theta\\)估计 容量为n的样本, n个观测值出现的联合分布\\(\\prod_{i = 1}^np(x_i; \\theta)\\) 似然函数(关于参数的函数): \\[ L(\\theta) = \\prod_{i=1}^np(x_i, \\theta) \\] 极大似然: \\[ L(\\hat{\\theta}) = \\underset{\\theta \\in \\Theta}{max}L(\\theta) \\] 2.3 评价估计量的标准 无偏性: 多次抽样, 抽样分布的数学期望等于被估计的总体的参数. \\(E(\\hat{\\theta}) = \\theta, \\text(\\theta 无偏无偏估计量)\\) 有效性: E(-100, 100) = 0, E(-10, 10) = 0, 但是明显后者更有效 一致性: 样本量越大越接近总体参数, 例如: 样本均值抽样分布的方差\\(\\sigma/\\sqrt{n}\\), n越大, 方差越小, 越有效. 2.4 区间估计 置信区间是一个范围值，由样本统计量所构造的对总体参数的估计区间。因为它的随机性，不可能从一个给定总体的两个样本产生相同的置信区间。但是如果你重复构造置信区间很多次，得到的置信区间中有一定比例将包含总体参数真值。置信区间中包含总体参数真值的次数所占的比率称为置信水平。 2.4.1 如何理解 通过一次抽样样本的估计量去估计总体参数, 这个估计到底有多接近总体的参数, 一般我们以样本估计值为中心画一个区域, 那么总体参数的真值有可能在该区域内, 也可能不在, 我们称这个区域叫置信区间(\\(1-\\alpha\\)), 我们把通过构造一个以样本参数的估计值为中心的区间, 来考察这个区间有多大的可能性包含总体参数真值, 这个检验方法叫参数的置信区间估计. 2.4.2 单总体均值的估计 统计量: z(正态分布), t(t-分布), 对称分布 \\[ \\begin{cases} z = \\frac{\\bar{x} - \\mu}{\\sigma/\\sqrt{n}} \\sim \\ N(0, 1) &amp; \\text{总体方差已知} \\\\ t = \\frac{\\bar{x} - \\mu}{\\mathcal{S}/\\sqrt{n}} \\sim \\ t(n-1) &amp; \\text{总体方差未知, 且小样本} \\\\ z = \\frac{\\bar{x} - \\mu}{\\mathcal{S}/\\sqrt{n}} \\sim \\ N(0, 1) &amp; \\text{总体方差未知, 且大样本} \\\\ \\end{cases} \\] 2.4.3 单总体方差的估计 统计量: \\(\\chi^2\\)(\\(\\chi^2\\)-分布), 偏态分布 2.5 贝叶斯估计 3 假设检验 参数估计使用样本信息估计总体参数, 假设检验则是先假设总体的某个参数的值, 然后判断H0的显著性 本章的参数一般指: T检验统计量 3.1 原理 基本思想: 概率性质的反正法(根据小概率事件原理: 小概率事件在一次随机试验是几乎不可能发生的) 3.2 拒绝域 拒绝域\\(W\\), 接受域\\(A\\) 如果给定了总体的分布以及显著性水平\\(\\alpha\\), 则拒绝域就可以定了. 3.3 假设 H0: (1)普遍被认为的道理 (2)拒绝它后果很严重(比如, 药效) H1: (1)研究人员想要证明的 例如: H0: 运动健康 H0: 这个药无效 H1: 新方法改善效率 一般H0没有\\(\\neq\\)的假设, 但可以含有等号\"\\(\\leqslant\\), \\(\\geqslant\\)\" 临界值由\\(\\mu = \\mu_0\\) (\\(1-\\alpha\\)的自信区间)的U分布决定 \\(U = \\dfrac{\\bar{X} - \\mu_0}{\\sigma/\\sqrt{n}} \\ \\sim \\ N(0, 1)\\) \\[ z = \\dfrac{\\bar{X} - \\mu_0}{\\sigma/\\sqrt{n}} \\] 拒绝域由H1决定 均值假设检验(\\(\\mu\\)是变量, \\(\\mu_0\\)是已知量均值): 类型 H1统计变量 临界值 拒绝域 右边检测 \\(\\mu &gt; \\mu_0\\) \\(\\mu_{1-\\alpha}\\) \\(\\mu &gt; \\mu_{1-\\alpha}\\) 左边检测 \\(\\mu &lt; \\mu_0\\) -\\(\\mu_{1-\\alpha}\\) \\(\\mu &lt; -\\mu_{1-\\alpha}\\) 双侧检测 \\(\\mu \\neq \\mu_0\\) \\(\\mu_{1-\\alpha/2} \\quad -\\mu_{1-\\alpha/2}\\) \\(\\mu &gt; \\mu_{1- \\alpha/2} \\quad \\mu &lt; -\\mu_{1-\\alpha/2}\\) 3.4 P值 为什么有P值, 用临界值有什么弊端? P值用来说明什么的? 以前为了计算方便, 通常将统计量标准化转换, 计算z值, 现在计算能力的发展, 容易计算P值, P值是个概率, 和H0假设差距的概率 假设H0是对的, 根据样本计算出来的估计统计量(均值)的实际数据与原假设H0之间不一致的概率, 与\\(\\alpha\\)对比, P值越小, H0越不靠谱 3.5 总体检验 3.5.1 一个总体参数检验 适用于均值,方差和比率 统计量: \\(z, t, \\chi^2\\) \\(\\chi^2\\): 来之标准正态总体的n个随机变量的平方之和, \\(\\sum_{i = 0}^{n}(\\frac{x_i - \\bar{x}}{\\sigma})^2\\) $$ \\[\\begin{alignat}{1} z = \\frac{\\bar{x} - \\mu_0}{\\sigma/\\sqrt{n}} \\qquad &amp; \\text{大样本均值检验统计量} \\\\ t = \\frac{\\bar{x} - \\mu_0}{s_2/\\sqrt{n}} \\qquad &amp; \\text{小样本均值检验统计量} \\\\ z = \\frac{p - \\pi_0}{\\sqrt{\\frac{\\pi_0(1-\\pi_0)}{n}}} \\qquad &amp; \\text{大样本比率检验统计量} \\\\ \\chi^2 = \\frac{(n-1)s^2}{\\sigma^2} \\qquad &amp; \\text{方差检验统计量} \\end{alignat}\\] $$ | | 样本量 | | | 大 | 小 | +--------------+------------------+ | | | | | | | 统计量 总体方差 | z | | 已知 | 未知 | +----------+--------+ | | | | | | | 统计量 统计量 | z t | 3.5.2 两个总体参数检验 重温 \"抽样分布\" 3.6 参数检验和非参数检验 假设检验分为参数检验(parametric tests)和非参数检验(nonparametric tests). Parametric tests assume that the data can be well described by a distribution that is defined by one or more parameters, in most cases by a normal distribution. Nonparametric tests do not depend on the data following a specific distribution. 3.7 其他 拟合优度检验 用来检验一批分类数据所来自的总体的分布是否与某种理论分布相一致 分类变量之间的相关性 独立性检验 3.7.1 列联分析 离散 3.7.2 方差分析 离散 + 连续 3.7.3 回归分析 连续 + 连续","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"贝叶斯","date":"2018-11-13T13:49:01.000Z","path":"2018/11/13/Books/Statistics/Bayesian/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 drafts 1.1 先验概率 客观先验概率(历史资料) 主观先验概率(主观经验) https://blog.csdn.net/a358463121/article/details/52562940","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"},{"name":"Bayesian","slug":"Bayesian","permalink":"https://qrsforever.github.io/tags/Bayesian/"}]},{"title":"统计学基础","date":"2018-11-05T07:28:39.000Z","path":"2018/11/05/Books/Statistics/statistics_elements/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 参考书籍 概率论 概念 多维 条件分布和条件期望 大数定理 中心极限定理 代码演示 经验分布 数理统计 抽样 代码演示 参数估计 假设检验 学习框架 1 参考书籍 概率论与数理统计(第二版)-茆诗松 概率论与数理统计(第四版)-盛骤 统计学(第四版)-贾俊平 Probability and Statistics (4th)-Morris H. DeGroot 2 概率论 研究随机变量, 假设分布是已知的, 研究它的数字特征, 性质, 特点, 规律性 2.1 概念 P: 区间, 范围, \\(\\leq\\), 分布函数 p: 点, 密度函数, P 是 p的积分/累积 什么时候使用X, 什么时候使用x, 一般会发现{}里会出现大写, ()里用小写, 例如下面的边缘分布: F: 分布, f: 密度 \\[ F_X(x) = P\\{X \\leq x\\} = P\\{X \\leq x, Y \\leq \\infty\\} = F(x, \\infty) \\] 参数空间: \\(\\theta \\in \\Theta\\) 基本结果(基础事件): \\(\\omega \\in \\Omega\\) ; 一枚硬币, 一个骰子, 一个人, 一个家庭 样本空间(基本空间): \\(\\Omega = \\{ \\omega_1, \\omega_2, ..., \\omega_i \\}, \\omega_1\\ \\text{ is a sample point}\\) 随机变量: \\(X = X(\\omega)\\) , 所有分布函数都是\\(X \\leq x\\), 这个变量一定是个数吗? \\[ P(X \\in C) = P({e: X(e) \\in C}) \\] C: 子集\\(\\in \\Omega\\) 加入一个变量(\\(\\mathbf{X,Y,Z}\\))在数轴上的取值(\\(x,y,z\\))依赖于随机现象的基本结果, 则称此变量为随机变量 随机变量X, 可以理解为一个函数? 将样本空间\\({e_1,e_2,\\cdots}\\)的\\(s_x\\)作为参数\\(X(e_i) \\in C\\) 随机表现在变量是由随机试验产生的随机事件, 变量说明是实轴上的一个数, 问题是并不是所有的随机事件都是数字来描述, 比如投硬币:正反面\\(S=\\{e\\}\\), 所以需要\"\\(X = X(e)\\) 实数\"的对应关系 分布列(概率分布): \\(\\sum_{i=1}^{\\infty}p(x_i)\\) , 概率的集合\\(\\{p(x_i)\\}\\) - 离散 密度函数(概率分布): \\(P(a \\leq X \\leq b) = \\int_{a}^{b}p(x)dx \\longrightarrow p(x)\\) - 连续 分布函数(累积函数): \\(F(x) = P(X \\leq x)\\) \\[ F(x) = \\sum\\limits_{x_i \\leq x}p(x_i) \\qquad (离散) \\\\ F(x) = \\int_{-\\infty}^{x}p(x)dx \\qquad (连续) \\] 数学期望: \\[ E(X) = \\sum\\limits_{i = 1}^{n}x_ip(x_i) \\qquad (离散) \\\\ E(X) = \\int_{-\\infty}^{\\infty}xp(x)dx \\qquad (连续) \\] 泊松分布: 在一定时间内, 某事件发生的次数 指数分布: 首次发生某个事件的时间 变异系数: 以期望为单位度量随机变量的波动程度 2.2 矩 均值(mean): 方差(variant): As variance is just the standard deviation squared: \\(var = sdev^2\\) 偏度(skewness): 偏态系数; 统计数据分布倾斜程度的度量 峰度(kurtosis): 与正态比较; 大于0 说明较正态陡峭, 小于0 说明较正态平坦; 值越大差异程度越大. 2.3 多维 \\(\\mathbf{X}(\\omega) = (X_1(\\omega), X_2(\\omega), X_3(\\omega), X_n(\\omega))\\) 一个人(基本结果/基础事件)的体重, 身高 联合分布: 多维随机变量的概率分布 \\[ F(x_1, x_2, ..., x_n) = P(X_1 \\leq x_1, X_2 \\leq x_2, ..., X_n \\leq x_n) \\] 联合概率密度(联合密度): \\(f(xy)\\) \\[ F(x,y) = \\int_{-\\infty}^x\\int_{-\\infty}^yf(x,y)dxdy \\] 边缘分布: 例如二维, \\(F(x, y)\\) 是 \"\\(X \\leq x \\cap Y \\leq y\\)\" 的交事件 \\[ \\begin{cases} \\lim_{y \\to \\infty}F(x, y) = P(X \\leq x, Y &lt; \\infty) = F_X(x) = F(x, \\infty) = P(X \\leq x) \\\\ \\\\ \\lim_{x \\to \\infty}F(x, y) = P(X &lt; \\infty, Y \\leq x) = F_Y(x) = F(\\infty, y) = P(Y \\leq y) \\end{cases} \\] 边缘分布律(离散): \\(p_{i \\cdotp}, p_{\\cdotp i}\\) 边缘密度函数(连续): \\(p_X(x) ;\\ p_Y(y)\\) ; 边缘分布公司好理解, 边缘密度函数([]括号里面的)理解上有些困难, 几何意义 \\[ \\text{边缘分布:} \\\\ F_X(x) = F(x, \\infty) = \\int_{-\\infty}^x\\big[\\int_{-\\infty}^{+\\infty}f(x,y)dy\\big]dx \\\\ \\text{边缘密度:} \\\\ f_X(x) = \\int_{-\\infty}^{+\\infty}f(x,y)dy \\] 全概率 条件概率 相互独立的随机变量: 父亲和儿子的身高显然不具有独立性, 两人如果投骰子的点数是独立的 \\[ \\begin{align} F(x_1, x_2, \\cdots, x_n) &amp;= F_1(x_1) F_2(x_2) \\cdots F_n(x_n) \\\\ \\\\ &amp;= P(X_1 \\leq x_1) P(X_2 \\leq x_2) \\cdots P(X_n \\leq x_n) \\end{align} \\] \\(F_n(x_n)\\) 是边缘分布 多维随机变量函数的数学期望: \\[ E[g(X,Y)] = \\begin{cases} \\sum_i^{\\infty}\\sum_j^{\\infty}g(x_i,y_j)P(X=x_i, Y=y_j), &amp; (离散) \\\\ \\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}g(x, y)dxdy, &amp; (连续) \\\\ \\end{cases} \\] \\(g(x,y)\\) 可以只关于\\(x\\)或者\\(y\\)的随机变量的函数. 协方差(相关矩): \\(g(X,Y)=(X-EX)(Y-EY)\\) \\[ \\begin{align} Cov(X, Y) = E[g(X, Y)] = E[(X-EX)(Y-EY)] \\tag{1} \\end{align} \\] (线性)相关系数: \\(Corr(X, Y) = Cov(X, Y) / \\delta_x \\delta_y\\) 马尔科夫不等式, 切比雪夫不等式: 知乎解答, 只是对概率的一个估计, 有可能不是很准确, 但比瞎猜好. 2.4 条件分布和条件期望 X,Y独立, 揭露他们之间隐含的趋势 条件分布律 条件密度函数 ? 离散|连续 条件密度的均值: 条件期望 条件分布: \\(P(X = x_i|Y = y_j) = \\dfrac{P(X = x_i, Y = y_i)}{P(Y = y_j)} = \\dfrac{P_{ij}}{P_{*j}}\\) 爸爸的身高(Y)对孩子身高(X)的条件分布情况(条件分布), Y越大, X一般也会越大, 条件分布:\\(E(X|Y = y_j)\\) &lt;&lt;概率论与数理统计(第二版)-茆诗松&gt;&gt; P153 有一张图很形象 \\[ \\begin{cases} P(X = j | Y = 1) = \\begin{cases} 0.2, &amp; \\text{j = 1} \\\\ 0.3, &amp; \\text{j = 2} \\\\ 0.5, &amp; \\text{j = 3} \\end{cases} &amp; \\text{离散} \\\\ \\\\ \\\\ \\begin{eqnarray} P(X \\leq x | y \\leq Y \\leq y + \\Delta{y}) &amp;=&amp; \\dfrac{P(X \\leq x, y \\leq Y \\leq y + \\Delta{y})}{P(y \\leq Y \\leq y + \\Delta{y})} \\\\ \\\\ &amp;=&amp; \\dfrac{\\int_{-\\infty}^{x}\\int_y^{y+\\Delta{y}}p(x,y)dydx}{\\int_y^{y+\\Delta{y}}p_Y(y)dy} \\end{eqnarray} &amp; \\text{连续} \\end{cases} \\] 2.5 大数定理 辛钦大数定理(law larger number): 试验次数很大时, 频率代替概率 随机变量\\(X_1, X_2, \\cdots\\)独立同分布, 且期望\\(E(X_k) = \\mu\\), 则: 依概率收敛于 \\[ \\bar{X} = \\dfrac{1}{n}\\sum_{k = 1}^nX_k \\ \\overset{P}{\\longrightarrow} \\mu \\] 2.6 中心极限定理 莱维-林德伯格 独立同分布的中心极限定理(central limit theorem): n足够大时, 近似服从正态分布, 大样本统计推断的基础 iid, 随机变量之和或均值的分布函数F(x), 当n足够大时, 不管原总体分布如何, F(x)近似服从正太分布 和: \\(T_n = X_1 + X_2 + \\cdot + X_n \\approx \\mathcal{N}(n\\mu, n\\sigma^2)\\) 均值: \\(M_n = \\sum_{i=0}^{n}/nX_i \\approx \\mathcal{N}(\\mu, \\sigma^2/n)\\) 一个样本中, 样本点受随机因素影响, 之间相互抵消, 所以样本均值的波动(样本方差)比单个样本点的波动要小(\\(1/\\sqrt{n}\\)) 伯努利随机变量的和 -&gt; 二项分布 -&gt; 正态分布 另一种的表述更好: \\[ \\dfrac{\\bar{X} - \\mu}{\\sigma/\\sqrt{n}} \\ \\overset{approx}{\\sim} \\ N(0, 1) \\ \\text{or} \\ \\ \\bar{X} \\ \\overset{approx}{\\sim} \\ N(\\mu, \\sigma^2/n) \\] 2.6.1 代码演示","tags":[{"name":"Statistics","slug":"Statistics","permalink":"https://qrsforever.github.io/tags/Statistics/"}]},{"title":"(原创)Tutorial for Latex","date":"2018-10-31T09:16:20.000Z","path":"2018/10/31/Tutorial/Latex/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 行内行间应用方式 常用希腊字母 常用求和符号和积分号 其他常用符号 运算符 声调 根号 上标下标 空白类型列举 公式锚点 矩阵 简单的矩阵 带括号的矩阵 排版 多行方程组对齐 多行公式等号对齐 大括号右多行赋值 字体 括号 颜色 特殊例子 分子分母 分布 在线使用 参考1 参考2 在线编辑 0.1 行内行间应用方式 $ equation $ (正文) $$ eqauation $$ (单独) 0.2 常用希腊字母 \\alpha \\(\\alpha\\) \\varTheta \\(\\varTheta\\) \\beta \\(\\beta\\) \\varGamma \\(\\varGamma\\) \\gamma \\(\\gamma\\) \\Gamma \\(\\Gamma\\) \\theta \\(\\theta\\) \\Theta \\(\\Theta\\) \\delta \\(\\delta\\) \\Delta \\(\\Delta\\) \\epsilon \\(\\epsilon\\) \\varDelta \\(\\varDelta\\) \\zeta \\(\\zeta\\) \\varLambda \\(\\varLambda\\) \\eta \\(\\eta\\) \\iota \\(\\iota\\) \\kappa \\(\\kappa\\) \\varLambda \\(\\varLambda\\) \\lambda \\(\\lambda\\) \\Lambda \\(\\Lambda\\) \\mu \\(\\mu\\) \\varOmega \\(\\varOmega\\) \\nu \\(\\nu\\) \\varPi \\(\\varPi\\) \\pi \\(\\pi\\) \\Pi \\(\\Pi\\) \\rho \\(\\rho\\) \\varSigma \\(\\varSigma\\) \\sigma \\(\\sigma\\) \\Sigma \\(\\Sigma\\) \\tau \\(\\tau\\) \\varPhi \\(\\varPhi\\) \\phi \\(\\phi\\) \\Phi \\(\\Phi\\) \\omega \\(\\omega\\) \\Omega \\(\\Omega\\) \\tau \\(\\tau\\) \\Tau \\(\\Tau\\) \\chi \\(\\chi\\) \\upsilon \\(\\upsilon\\) \\iota \\(\\iota\\) 0.3 常用求和符号和积分号 \\sum \\(\\sum\\) \\int \\(\\int\\) \\sum_{i=1}^{N} \\(\\sum_{i=1}^{N}\\) \\int_{a}^{b} \\(\\int_{a}^{b}\\) \\prod \\(\\prod\\) \\iint \\(\\iint\\) \\prod_{i=1}^{N} \\(\\prod_{i=1}^{N}\\) \\iint_{a}^{b} \\(\\iint_{a}^{b}\\) \\bigcup \\(\\bigcup\\) \\bigcap \\(\\bigcap\\) \\bigcup_{i=1}^{N} \\(\\bigcup_{i=1}^{N}\\) \\bigcap_{i=1}^{N} \\(\\bigcap_{i=1}^{N}\\) 0.4 其他常用符号 \\sqrt[3]{2} \\(\\sqrt[3]{2}\\) \\sqrt{2} \\(\\sqrt{2}\\) \\sqrt{a} \\(\\sqrt{a}\\) \\vec{a} \\(\\vec{a}\\) \\tilde{a} \\(\\tilde{a}\\) \\sqrt[3]{2} \\(\\sqrt[3]{2}\\) x_{3} \\(x_{3}\\) \\lim_{x \\to 0} \\(\\lim_{x \\to 0}\\) \\frac{1}{2} \\(\\frac{1}{2}\\) \\infty \\(\\infty\\) \\cdotp \\(\\cdotp\\) \\cdots \\(\\cdots\\) \\vdots \\(\\vdots\\) \\ddots \\(\\ddots\\) \\bot \\(\\bot\\) \\partial \\(\\partial\\) \\hat{a} \\(\\hat{a}\\) \\dot{a} \\(\\dot{a}\\) \\bar{a} \\(\\bar{a}\\) a^{3} \\(a^{3}\\) \\frac{1}{a} \\(\\frac{1}{a}\\) 0.5 运算符 语法 效果 语法 效果 \\pm \\(\\pm\\) \\propto \\(\\propto\\) \\times \\(\\times\\) \\leq \\(\\leq\\) \\circ \\(\\circ\\) \\subseteq \\(\\subseteq\\) \\cdot \\(\\cdot\\) \\subset \\(\\subset\\) \\cap \\(\\cap\\) \\cup \\(\\cup\\) \\supset \\(\\supset\\) \\bullet \\(\\bullet\\) \\supseteq \\(\\supseteq\\) \\div \\(\\div\\) \\geq \\(\\geq\\) \\mp \\(\\mp\\) \\in \\(\\in\\) 0.6 声调 语法 效果 语法 效果 语法 效果 \\bar{x} \\(\\bar{x}\\) \\acute{\\eta} \\(\\acute{\\eta}\\) \\check{\\alpha} \\(\\check{\\alpha}\\) \\grave{\\eta} \\(\\grave{\\eta}\\) \\breve{a} \\(\\breve{a}\\) \\ddot{y} \\(\\ddot{y}\\) \\dot{x} \\(\\dot{x}\\) \\hat{\\alpha} \\(\\hat{\\alpha}\\) \\tilde{\\iota} \\(\\tilde{\\iota}\\) 0.7 根号 语法 效果 语法 效果 \\sqrt{3} \\(\\sqrt{3}\\) \\sqrt[n]{3} \\(\\sqrt[n]{3}\\) 0.8 上标下标 功能 语法 效果 上标 a^2 \\(a^2\\) 下标 a_2 \\(a_2\\) 组合 a^{2+2} \\(a^{2+2}\\) 组合 a_{i,j} \\(a_{i,j}\\) 结合 x_2^3 \\(x_2^3\\) 前置 {}_1^2!X_3^4 \\({}_1^2\\!X_3^4\\) 向量 \\vec{c} \\(\\vec{c}\\) 向量 \\overleftarrow{a b} \\(\\overleftarrow{a b}\\) 向量 \\overrightarrow{c d} \\(\\overrightarrow{c d}\\) 导数 x' \\(x&#39;\\) 导数 x^\\prime \\(x^\\prime\\) 导数 \\dot{x} \\(\\dot{x}\\) 导数 \\ddot{y} \\(\\ddot{y}\\) 上划线 \\overline{h i j} \\(\\overline{h i j}\\) 下划线 \\underline{k l m} \\(\\underline{k l m}\\) 上面 \\overset{P}{\\longrightarrow} \\(\\overset{P}{\\longrightarrow}\\) 下面 \\underset{P}{\\Longrightarrow} \\(\\underset{P}{\\Longrightarrow}\\) 默认行内公式$\\sum_{k=1}^n{x_k}$上下标: \\(\\sum_{k=1}^n{x_k}\\) 默认行间公式$$\\sum_{k=1}^n{x_k}$$上下标: \\[\\sum_{k=1}^n{x_k}\\] 强制行内公式$\\sum\\limits_{k=1}^n{x_k}$上下标: \\(\\sum\\limits_{k=1}^n{x_k}\\) 强制行间公式$$\\sum\\nolimits_{k=1}^n{x_k}$$上下标: \\[\\sum\\nolimits_{k=1}^n{x_k}\\] 0.9 空白类型列举 功能 语法 效果 描述 两个空格 a \\qquad b \\(a \\qquad b\\) 两个m的宽度 一个空格 a \\quad b \\(a \\quad b\\) 一个m的宽度 大空格 a\\ b \\(a\\ b\\) 1/3m宽度 中等空格 a\\;b \\(a\\;b\\) 2/7m宽度 小空格 a,b \\(a,b\\) 1/6m宽度 没有空格 ab \\(ab\\) 正常宽度 紧贴 a!b \\(a!b\\) 缩进1/6m宽度 0.10 公式锚点 $\\int_{-\\infty}^\\infty e^{-\\pi x^2}\\,\\mathrm{d}x=1\\label{a}\\tag{1}$ 这里引用$\\ref{a}$ \\(\\int_{-\\infty}^\\infty e^{-\\pi x^2}\\,\\mathrm{d}x=1\\label{a}\\tag{1}\\) 这里引用\\(\\ref{a}\\) 0.11 矩阵 0.11.1 简单的矩阵 $$ \\begin{matrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{matrix} \\tag{3} $$ \\[ \\begin{matrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{matrix} \\tag{3} \\] 0.11.2 带括号的矩阵 $$ \\left \\{ \\begin{matrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{matrix} \\right \\} \\tag{4} $$ \\[ \\left \\{ \\begin{matrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{matrix} \\right \\} \\tag{4} \\] $$ \\left [ \\begin{matrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{matrix} \\right ] \\tag{5} $$ \\[ \\left[ \\begin{matrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{matrix} \\right] \\tag{5} \\] $$ \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} \\tag{6} $$ \\[ \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} \\tag{6} \\] $$ \\begin{Bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{Bmatrix} \\tag{7} $$ \\[ \\begin{Bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{Bmatrix} \\tag{7} \\] $$ \\begin{vmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{vmatrix} \\tag{8} $$ \\[ \\begin{vmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{vmatrix} \\tag{8} \\] $$ \\begin{Vmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{Vmatrix} \\tag{9} $$ \\[ \\begin{Vmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{Vmatrix} \\tag{9} \\] 0.12 排版 0.12.1 多行方程组对齐 $$ \\begin{cases} a_{11}x_1&amp;+&amp;a_{12}x_2&amp;+&amp;\\cdots&amp;+a_{1n}x_n&amp;=&amp;b_1\\\\ &amp;&amp;&amp;&amp;\\vdots\\\\ a_{n1}x_1&amp;+&amp;a_{n2}x_2&amp;+&amp;\\cdots&amp;+a_{nn}x_n&amp;=&amp;b_n&amp; \\end{cases} $$ \\[ \\begin{cases} a_{11}x_1&amp;+&amp;a_{12}x_2&amp;+&amp;\\cdots&amp;+a_{1n}x_n&amp;=&amp;b_1\\\\ &amp;&amp;&amp;&amp;\\vdots\\\\ a_{n1}x_1&amp;+&amp;a_{n2}x_2&amp;+&amp;\\cdots&amp;+a_{nn}x_n&amp;=&amp;b_n&amp; \\end{cases} \\] $$ \\begin{align*} &amp;a_1 x + b_1 y + c_1 z = d_1\\tag{$3.11$} \\\\ &amp;aa_2 x + b_2 y + c_2 z = d_2\\tag{$3.12$} \\\\ &amp;aaa_3 x + b_3 y + c_3 z = d_3\\tag{$3.13$} \\end{align*} $$ \\[ \\begin{align*} &amp;a_1 x + b_1 y + c_1 z = d_1\\tag{$3.11$} \\\\ &amp;aa_2 x + b_2 y + c_2 z = d_2\\tag{$3.12$} \\\\ &amp;aaa_3 x + b_3 y + c_3 z = d_3\\tag{$3.13$} \\end{align*} \\] 0.12.2 多行公式等号对齐 eqnarray(built-in) is similar to align(amsmath package) below $$ \\begin{eqnarray} f(x,y) &amp;=&amp; 2xy+(x-y)^2\\\\ &amp;=&amp; x^2+y^2 \\end{eqnarray} $$ \\[ \\begin{eqnarray} f(x,y) &amp;=&amp; 2xy+(x-y)^2\\\\ &amp;=&amp; x^2+y^2 \\end{eqnarray} \\] $$ \\begin{align*} f(x,y) &amp;= 2xy+(x-y)^2 \\\\ &amp;= x^2+y^2 \\end{align*} $$ \\[ \\begin{align*} f(x,y) &amp;= 2xy+(x-y)^2 \\\\ &amp;= x^2+y^2 \\end{align*} \\] 指定第几列对齐 $$ \\begin{alignat}{2} \\sigma_1 &amp;= x + y &amp;\\qquad \\sigma_2 &amp;= \\frac{x}{y} \\\\ \\sigma_1&#39; &amp;= \\frac{\\partial x + y}{\\partial x} &amp; \\sigma_2&#39; &amp;= \\frac{\\partial \\frac{x}{y}}{\\partial x} \\end{alignat} $$ \\[ \\begin{alignat}{2} \\sigma_1 &amp;= x + y &amp;\\quad \\sigma_2 &amp;= \\frac{x}{y} \\\\ \\sigma_1&#39; &amp;= \\frac{\\partial x + y}{\\partial x} &amp; \\sigma_2&#39; &amp;= \\frac{\\partial \\frac{x}{y}}{\\partial x} \\end{alignat} \\] 0.12.3 大括号右多行赋值 $$ \\left\\{\\begin{array}{cc} 1, &amp; x=f(Pa_{x})\\\\ 0, &amp; other\\ values \\end{array}\\right. $$ \\[ \\left\\{\\begin{array}{cc} 1, &amp; x=f(Pa_{x})\\\\ 0, &amp; other\\ values \\end{array}\\right. \\] $$ P(x|Pa_x)=\\begin{cases} 1, &amp; x=f(Pa_{x})\\\\ 0, &amp; other\\ values \\end{cases} $$ \\[ P(x|Pa_x)=\\begin{cases} 1, &amp; x=f(Pa_{x})\\\\ 0, &amp; other\\ values \\end{cases} \\] $$ \\begin{equation} \\left.\\begin{aligned} B&#39;&amp;=-\\partial \\times E,\\\\ E&#39;&amp;=\\partial \\times B - 4\\pi j, \\end{aligned} \\right\\} \\qquad \\text{Maxwell&#39;s equations} \\end{equation} $$ \\[ \\begin{equation} \\left.\\begin{aligned} B&#39;&amp;=-\\partial \\times E,\\\\ E&#39;&amp;=\\partial \\times B - 4\\pi j, \\end{aligned} \\right\\} \\qquad \\text{Maxwell&#39;s equations} \\end{equation} \\] 0.13 字体 黑板粗体$\\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$: \\(\\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}\\) 正粗体$\\mathbf{012abcABC}$: \\(\\mathbf{012abcABC}\\) 罗马体$\\mathrm{012abcABC}$: \\(\\mathrm{012abcABC}\\) 斜体数字$\\mathit{0123456789}$: \\(\\mathit{0123456789}\\) 手写体 $\\mathcal{012abcABC}$: \\(\\mathcal{012abcABC}\\) 0.14 括号 \\Bigg ( \\bigg [ \\Big \\{ \\big \\langle \\left | \\| \\frac{a}{b} \\| \\right | \\big\\rangle \\Big \\} \\bigg ] \\Bigg ): \\[ \\Bigg ( \\bigg [ \\Big \\{ \\big \\langle \\left | \\| \\frac{a}{b} \\| \\right | \\big\\rangle \\Big \\} \\bigg ] \\Bigg ) \\] 0.15 颜色 字体颜色︰$\\color{色调}表达式$ 背景颜色︰$\\pagecolor{色调}表达式$ \\(\\color{Apricot}Apricot\\) \\(\\color{Aquamarine}Aquamarine\\) \\(\\color{Bittersweet}Bittersweet\\) \\(\\color{Black}Black\\) \\(\\color{Blue}Blue\\) \\(\\color{BlueGreen}BlueGreen\\) \\(\\color{BlueViolet}BlueViolet\\) \\(\\color{BrickRed}BrickRed\\) \\(\\color{Brown}Brown\\) \\(\\color{BurntOrange}BurntOrange\\) \\(\\color{CadetBlue}CadetBlue\\) \\(\\color{CarnationPink}CarnationPink\\) \\(\\color{Cerulean}Cerulean\\) \\(\\color{CornflowerBlue}CornflowerBlue\\) \\(\\color{Cyan}Cyan\\) \\(\\color{Dandelion}Dandelion\\) \\(\\color{DarkOrchid}DarkOrchid\\) \\(\\color{Emerald}Emerald\\) \\(\\color{ForestGreen}ForestGreen\\) \\(\\color{Fuchsia}Fuchsia\\) \\(\\color{Goldenrod}Goldenrod\\) \\(\\color{Gray}Gray\\) \\(\\color{Green}Green\\) \\(\\color{GreenYellow}GreenYellow\\) \\(\\color{JungleGreen}JungleGreen\\) \\(\\color{Lavender}Lavender\\) \\(\\color{LimeGreen}LimeGreen\\) \\(\\color{Magenta}Magenta\\) \\(\\color{Mahogany}Mahogany\\) \\(\\color{Maroon}Maroon\\) \\(\\color{Melon}Melon\\) \\(\\color{MidnightBlue}MidnightBlue\\) \\(\\color{Mulberry}Mulberry\\) \\(\\color{NavyBlue}NavyBlue\\) \\(\\color{OliveGreen}OliveGreen\\) \\(\\color{Orange}Orange\\) \\(\\color{OrangeRed}OrangeRed\\) \\(\\color{Orchid}Orchid\\) \\(\\color{Peach}Peach\\) \\(\\color{Periwinkle}Periwinkle\\) \\(\\color{PineGreen}PineGreen\\) \\(\\color{Plum}Plum\\) \\(\\color{ProcessBlue}ProcessBlue\\) \\(\\color{Purple}Purple\\) \\(\\color{RawSienna}RawSienna\\) \\(\\color{Red}Red\\) \\(\\color{RedOrange}RedOrange\\) \\(\\color{RedViolet}RedViolet\\) \\(\\color{Rhodamine}Rhodamine\\) \\(\\color{RoyalBlue}RoyalBlue\\) \\(\\color{RoyalPurple}RoyalPurple\\) \\(\\color{RubineRed}RubineRed\\) \\(\\color{Salmon}Salmon\\) \\(\\color{SeaGreen}SeaGreen\\) \\(\\color{Sepia}Sepia\\) \\(\\color{SkyBlue}SkyBlue\\) \\(\\color{SpringGreen}SpringGreen\\) \\(\\color{Tan}Tan\\) \\(\\color{TealBlue}TealBlue\\) \\(\\color{Thistle}Thistle\\) \\(\\color{Turquoise}Turquoise\\) \\(\\color{Violet}Violet\\) \\(\\color{VioletRed}VioletRed\\) \\(\\color{White}White\\) \\(\\color{WildStrawberry}WildStrawberry\\) \\(\\color{Yellow}Yellow\\) \\(\\color{YellowGreen}YellowGreen\\) \\(\\color{YellowOrange}YellowOrange\\) 0.16 特殊例子 0.16.1 分子分母 $$ x_1^*=\\dfrac{a_{22}r_1-a_{12}r_2}{a_{11}a_{22}-a_{12}a_{21}} $$ \\[ x_1^*=\\dfrac{a_{22}r_1-a_{12}r_2}{a_{11}a_{22}-a_{12}a_{21}} \\] 语法 效果 语法 效果 语法 效果 \\frac{a}{b} \\(\\frac{a}{b}\\) \\dfrac{c}{d} \\(\\dfrac{c}{d}\\) e/f \\(e/f\\) 0.16.2 分布 分布名 语法 效果 例子 二项分布 \\binom{n}{k} \\(\\binom{n}{k}\\) \\(f(k) = \\binom{n}{k} p^k (1-p)^{n-k}\\) 0.16.3 在线使用 只能行间 ![](http://latex.codecogs.com/gif.latex?F%28x%29%20%3D%20%5Cint_%7Ba%7D%5E%7Bb%7Df%28x%29dx \"latextest\") 输出:","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://qrsforever.github.io/tags/Markdown/"}]},{"title":"Frequentist和Bayesian之前的故事","date":"2018-10-30T02:51:02.000Z","path":"2018/10/30/Story/Math/Frequentist_Bayesian/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 原文 在统计学中，很多工程师会惊讶于在统计学居然存在两个本质上截然对立的学派，他们是如此的对立以至于他们对于概率的定义都是截然不同的，这 就是Frequentist和Bayesian统计学派之间的故事。 对于Frequentist来说，概率是一个实验重复很多次后的期望频率，而Bayesian观点则认为概率从本质上来说是我们对于一个事件的信心（Degree of Belief），它用来描述我们认为一个事件有多大可行性发生。 所以对于Frequentist来说，均值是一个确定且存在的数，只是我们不知道也没有办法知道他的确切数值，当一个Frequentist对数据进行分析的时候 ，他会建立一个Confidence Interval，其中心在所有数据的均值处。 这里就有一个很有意思的事情，因为对于Frequentist来说均值确实存在而且确定，所以它或者在区间内或者不在区间内，所以Frequentist不能说实 际均值有95%的概率处在这个Confidence Interval中，因为实际均值是一个固定的数，并不是随机的，所以他们只能采用一个迂回的说法：对于95% 的随机样本，这样算法产生的Confidence Interval包含了实际均值。 而对于Bayesians来说，世界确实截然不同的，他们认为只有数据才是真实的，实际均值也是一个随机的变量，所以他们可以说实际均值更有可能是 某个值而不是另外某个值（基于数据和先验知识），于是Bayesians构建一个Credible Interval，他们说实际均值有95%的概率在Credible Interval 中，这是Frequentist所不能接受的一种说法。 在1990年以前，很少有人从事Bayesian Analysis，原因是Bayesian Analysis需要大量的计算，而当时的计算机能力很弱，最近一段时间Bayesian Method发展很迅速，Sampling Method和Variational Method的出现使得Bayesian方法逐渐变得Popular。","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"Ubutnu编辑器VIM配置","date":"2018-06-25T02:26:15.000Z","path":"2018/06/25/Tools/How/vim/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 一把利剑 目录结构 基本配置vimrc 依赖 VIM配置 1 一把利剑 ∆ /.\\ _/ \\_ / \\ / ﬆ ﬆ \\ | | | ∾ ∾ ∾ | | ∾ ∾ ∾ | | ∾ ∾ ∾ | | ∾ ∾ ∾ | | | | VIM | | | | 编 程 | | | | ∾ ∾ ∾ | | ∾ ∾ ∾ | | ∾ ∾ ∾ | | ∾ ∾ ∾ | ┌------┴---------┴------┐ « ✠ う ✠ » └--------┬-----┬--------┘ | ◎ | | ◎ | └¤¤◎¤¤┘ 2 目录结构 . ├── autoload ├── bin ├── bundle │ ├── .configs ----&gt; 插件配置目录, 每个插件对应一个文件 │ │ ├── asyncrun.vim_conf.vim │ │ ├── bufexplorer_conf.vim │ │ ├── CCTree_conf.vim │ │ ├── CompleteParameter.vim_conf.vim │ │ ├── deoplete-jedi_conf.vim │ │ ├── deoplete.nvim_conf.vim │ │ ├── dict.vim_conf.vim │ │ ├── DoxygenToolkit.vim_conf.vim │ │ ├── DrawIt_conf.vim │ │ ├── EasyMotion_conf.vim │ │ ├── eclim_conf.vim │ │ ├── errormarker.vim_conf.vim │ │ ├── FuzzyFinder_conf.vim │ │ ├── fzf_conf.vim │ │ ├── fzf.vim_conf.vim │ │ ├── grep.vim_conf.vim │ │ ├── init.vim ----&gt; 配置插件, 有选择的配置需要使用的插件 │ │ ├── jedi-vim_conf.vim │ │ ├── jupyter-vim_conf.vim │ │ ├── LeaderF_conf.vim │ │ ├── lookupfile_conf.vim │ │ ├── neocomplcache_conf.vim │ │ ├── neocomplete.vim_conf.vim │ │ ├── neosnippet_conf.vim │ │ ├── nerdcommenter_conf.vim │ │ ├── nerdtree_conf.vim │ │ ├── Nvim-R_conf.vim │ │ ├── supertab_conf.vim │ │ ├── syntastic_conf.vim │ │ ├── tagbar_conf.vim │ │ ├── ultisnips_conf.vim │ │ ├── unite.vim_conf.vim │ │ ├── vcscommand.vim_conf.vim │ │ ├── vim-align_conf.vim │ │ ├── VimIM_conf.vim │ │ ├── vim-instant-markdown_conf.vim │ │ ├── vim-markdown-toc_conf.vim │ │ ├── vim-maximizer_conf.vim │ │ ├── vim-pandoc_conf.vim │ │ ├── vim-pandoc-syntax_conf.vim │ │ ├── vim-powerline_conf.vim │ │ ├── vimshell.vim_conf.vim │ │ ├── vim-snippets_conf.vim │ │ └── YouCompleteMe_conf.vim . . . . . │ ├── Vundle.vim │ └── YouCompleteMe ├── colors ├── configure ├── dict ---&gt; 补全字典 ├── doc ├── extern ---&gt; 外部有用的工具, vim通过程序间接调用 │ ├── git-blog-setting ---&gt; markdown生成blog页面 │ ├── instant-markdown-ext ---&gt; markdown快速生成html, 使用pandoc │ ├── ripgrep ---&gt; rg │ └── YCM-Generator ├── plugin ├── res │ └── icons ├── src ├── syntax ├── tags ├── UltiSnips ---&gt; 定义自己的snips └── xml 3 基本配置vimrc let g:mapleader = &quot;,&quot; autocmd! :mapclear &quot; 插件依赖设置 &quot; &quot;打开关键字色 syntax on &quot;载入文件类型插件 filetype plugin on &quot;为特定文件类型载入相关缩进文件 filetype indent on &quot; &quot; The search prefix key. nnoremap [search] &lt;Nop&gt; nmap s [search] source ~/.vim/bundle/.configs/init.vim &quot;F1~F12快捷键映射&quot; nmap &lt;unique&gt; &lt;silent&gt; &lt;F1&gt; :MyMarksBrowser&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F2&gt; :MyBufExplorer&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F3&gt; :NERDTreeToggle %:p:h&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F4&gt; :TagbarToggle&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F5&gt; :MyLookupFile&lt;CR&gt; &quot; nmap &lt;unique&gt; &lt;silent&gt; &lt;F6&gt; :&lt;c-u&gt;call MyMake(&#39;n&#39;)&lt;CR&gt; &quot; nmap &lt;unique&gt; &lt;silent&gt; &lt;F7&gt; :&lt;c-u&gt;call MyGrep(&#39;n&#39;)&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F8&gt; :&lt;c-u&gt;call MyTags(&#39;n&#39;)&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F9&gt; :MyMarkColor&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F11&gt; :MaximizerToggle&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;F12&gt; ,ra imap &lt;unique&gt; &lt;silent&gt; &lt;F1&gt; &lt;ESC&gt;:MarksBrowser&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F2&gt; &lt;ESC&gt;:MyBufExplorer&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F3&gt; &lt;ESC&gt;:NERDTreeToggle %:p:h&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F4&gt; &lt;ESC&gt;:TagbarToggle&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F5&gt; &lt;ESC&gt;:MyLookupFile&lt;CR&gt; &quot; imap &lt;unique&gt; &lt;silent&gt; &lt;F6&gt; &lt;ESC&gt;:&lt;c-u&gt;call MyMake(&#39;i&#39;)&lt;CR&gt; &quot; imap &lt;unique&gt; &lt;silent&gt; &lt;F7&gt; &lt;ESC&gt;:&lt;c-u&gt;call MyGrep(&#39;i&#39;)&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F8&gt; &lt;ESC&gt;:&lt;c-u&gt;call MyTags(&#39;i&#39;)&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F9&gt; &lt;ESC&gt;:MyMarkColor&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F11&gt; &lt;ESC&gt;:MaximizerToggle&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;F12&gt; &lt;ESC&gt;,ra &quot; vmap &lt;unique&gt; &lt;silent&gt; &lt;F6&gt; :&lt;c-u&gt;call MyMake(&#39;v&#39;)&lt;CR&gt; vmap &lt;unique&gt; &lt;silent&gt; &lt;F12&gt; :&lt;c-u&gt;call MyYank2Reg(&#39;v&#39;)&lt;CR&gt; &quot; &quot;Shift&quot; nmap &lt;unique&gt; &lt;silent&gt; &lt;S-F1&gt; :lnext&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;S-F2&gt; :cprevious&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;S-F3&gt; :cnext&lt;CR&gt; &quot; nmap &lt;unique&gt; &lt;silent&gt; &lt;S-F6&gt; :MyAsyncRun&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;S-F9&gt; :MyVimShellS&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;S-F10&gt; :MyColColor&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;S-F12&gt; :MyUMLCharConvert&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;S-F1&gt; &lt;ESC&gt;:lnext&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;S-F2&gt; &lt;ESC&gt;:cprevious&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;S-F3&gt; &lt;ESC&gt;:cnext&lt;CR&gt; &quot; imap &lt;unique&gt; &lt;silent&gt; &lt;S-F6&gt; &lt;ESC&gt;:MyAsyncRun&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;S-F9&gt; &lt;ESC&gt;:MyVimShellS&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;S-F10&gt; &lt;ESC&gt;:MyColColor&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;S-F12&gt; &lt;ESC&gt;:MyUMLCharConvert&lt;CR&gt; &quot; &quot;Ctrl&quot; nmap &lt;unique&gt; &lt;silent&gt; &lt;C-F1&gt; :lprevious&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;C-F2&gt; :tprevious&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;C-F3&gt; :tnext&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;C-F9&gt; :MyVimShellV&lt;CR&gt; nmap &lt;unique&gt; &lt;silent&gt; &lt;C-F10&gt; :g/&lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;/d&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;C-F1&gt; &lt;ESC&gt;:lprevious&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;C-F2&gt; &lt;ESC&gt;:tprevious&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;C-F3&gt; &lt;ESC&gt;:tnext&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;C-F9&gt; &lt;ESC&gt;:MyVimShellV&lt;CR&gt; imap &lt;unique&gt; &lt;silent&gt; &lt;C-F10&gt; &lt;ESC&gt;:g/&lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;/d&lt;CR&gt; &quot;Shift and Ctrl &amp;term不同特殊映射 ctrl+F1不可用 map &lt;Esc&gt;O1;2P &lt;S-F1&gt; map &lt;Esc&gt;O1;2Q &lt;S-F2&gt; map &lt;Esc&gt;O1;2R &lt;S-F3&gt; map &lt;Esc&gt;O1;2S &lt;S-F4&gt; map &lt;Esc&gt;[15;2~ &lt;S-F5&gt; map &lt;Esc&gt;[17;2~ &lt;S-F6&gt; map &lt;Esc&gt;[18;2~ &lt;S-F7&gt; map &lt;Esc&gt;[19;2~ &lt;S-F8&gt; map &lt;Esc&gt;[20;2~ &lt;S-F9&gt; map! &lt;Esc&gt;O1;2P &lt;S-F1&gt; map! &lt;Esc&gt;O1;2Q &lt;S-F2&gt; map! &lt;Esc&gt;O1;2R &lt;S-F3&gt; map! &lt;Esc&gt;O1;2S &lt;S-F4&gt; map! &lt;Esc&gt;[15;2~ &lt;S-F5&gt; map! &lt;Esc&gt;[17;2~ &lt;S-F6&gt; map! &lt;Esc&gt;[18;2~ &lt;S-F7&gt; map! &lt;Esc&gt;[19;2~ &lt;S-F8&gt; map! &lt;Esc&gt;[20;2~ &lt;S-F9&gt; map &lt;Esc&gt;O1;5P &lt;C-F1&gt; map &lt;Esc&gt;O1;5Q &lt;C-F2&gt; map &lt;Esc&gt;O1;5R &lt;C-F3&gt; map &lt;Esc&gt;O1;5S &lt;C-F4&gt; map &lt;Esc&gt;[15;5~ &lt;C-F5&gt; map &lt;Esc&gt;[17;5~ &lt;C-F6&gt; map &lt;Esc&gt;[18;5~ &lt;C-F7&gt; map &lt;Esc&gt;[19;5~ &lt;C-F8&gt; map &lt;Esc&gt;[20;5~ &lt;C-F9&gt; map &lt;Esc&gt;[21;5~ &lt;C-F10&gt; map &lt;Esc&gt;[23;5~ &lt;C-F11&gt; map &lt;Esc&gt;[24;5~ &lt;C-F12&gt; map! &lt;Esc&gt;O1;5P &lt;C-F1&gt; map! &lt;Esc&gt;O1;5Q &lt;C-F2&gt; map! &lt;Esc&gt;O1;5R &lt;C-F3&gt; map! &lt;Esc&gt;O1;5S &lt;C-F4&gt; map! &lt;Esc&gt;[15;5~ &lt;C-F5&gt; map! &lt;Esc&gt;[17;5~ &lt;C-F6&gt; map! &lt;Esc&gt;[18;5~ &lt;C-F7&gt; map! &lt;Esc&gt;[19;5~ &lt;C-F8&gt; map! &lt;Esc&gt;[20;5~ &lt;C-F9&gt; map! &lt;Esc&gt;[21;5~ &lt;C-F10&gt; map! &lt;Esc&gt;[23;5~ &lt;C-F11&gt; map! &lt;Esc&gt;[24;5~ &lt;C-F12&gt; &quot;F1~F12快捷键映射&quot; &quot;非F1~F12快捷键&quot; nmap &lt;silent&gt; ga :MyGoAlternate&lt;CR&gt; nmap &lt;silent&gt; &lt;leader&gt;tt :tabnew&lt;CR&gt; &quot;Quickfix 编译出错信息调试很有用 nmap &lt;silent&gt; &lt;C-w&gt;e :MyBelowCopen&lt;CR&gt; &quot;Location list windows 打开 nmap &lt;silent&gt; &lt;C-w&gt;d :MyBelowLopen&lt;CR&gt; nmap cd :lchdir %:p:h&lt;CR&gt;:pwd&lt;CR&gt; &quot; Insert模式下&lt;C-L&gt;清楚后面所有的字符直到), 类似Normal模式下的d$动作, C-u清楚前面的字符直到( &quot; imap &lt;unique&gt; &lt;silent&gt; &lt;C-l&gt; &lt;Esc&gt;&lt;Esc&gt;l&lt;C-v&gt;f)hdi &quot; imap &lt;unique&gt; &lt;silent&gt; &lt;C-u&gt; &lt;Esc&gt;&lt;Esc&gt;l&lt;C-v&gt;F(ldi &quot;单手保存 ctrl+s 在BASH中,是Lock the console, 解锁ctrl+q, 解决方法是在.bashrc中添加stty stop &#39;&#39; 或者 alias vim=&quot;stty stop &#39;&#39;; vim&quot; &quot; nmap &lt;C-s&gt; :update&lt;CR&gt;:echo expand(&#39;%:p&#39;)&lt;CR&gt; imap &lt;C-s&gt; &lt;ESC&gt;:&lt;c-u&gt;update&lt;CR&gt;:echo expand(&#39;%:p&#39;)&lt;CR&gt; nmap &lt;C-s&gt; :silent update!&lt;CR&gt;:silent lchdir %:p:h&lt;CR&gt;:pwd&lt;CR&gt; &quot; imap &lt;C-s&gt; &lt;ESC&gt;:&lt;c-u&gt;silent update!&lt;CR&gt;:silent lchdir %:p:h&lt;CR&gt;:pwd&lt;CR&gt; imap \\\\ &lt;C-x&gt;&lt;C-o&gt; &quot; 标签跳转页面 nmap g0 :tabl&lt;CR&gt; nmap g1 1gt nmap g2 2gt nmap g3 3gt nmap g4 4gt nmap g5 5gt nmap g6 6gt nmap g7 7gt nmap g8 8gt nmap g9 9gt &quot;非F1~F12快捷键&quot; &quot;自己定义的命令 &quot; command XCCTags !ctags --c++-kinds=+p --fields=+ialS --extra=+q -R . command XRS %s/\\s\\+$//ge &quot;消除每行后面的多余的空格 command XRW %s///ge &quot;消除文件中的^M字符 command XONE 0,$s/\\n// &quot;多行变一行 &quot;自己定义的命令 &quot; &quot;窗口配置&quot; noremap &lt;C-j&gt; &lt;C-W&gt;j noremap &lt;C-k&gt; &lt;C-W&gt;k noremap &lt;C-h&gt; &lt;C-W&gt;h noremap &lt;C-l&gt; &lt;C-W&gt;l &quot; 让terminal进入norm模式 &quot; tnoremap &lt;Esc&gt; &lt;C-W&gt;N tnoremap &lt;C-j&gt; &lt;C-W&gt;j tnoremap &lt;C-k&gt; &lt;C-W&gt;k tnoremap &lt;C-h&gt; &lt;C-W&gt;h tnoremap &lt;C-l&gt; &lt;C-W&gt;l &quot; &lt;C-W&gt;r --&gt; 交换窗口 noremap &lt;C-W&gt;v &lt;C-W&gt;v&lt;C-W&gt;l noremap &lt;C-W&gt;s &lt;C-W&gt;s&lt;C-W&gt;j &quot;窗口配置&quot; &quot;简单配置&quot; &quot;侦测文件类型 filetype on &quot;设置终端支持256颜色 set t_Co=256 &quot;设置VIM颜色主题 你可以借助插件scrollcolor.vim和color_sample_pack.vim来选择你喜爱的主题(150多个)(请参考下面插件) colorscheme elflord &quot;预览窗口,eg. ctr+w { 时的窗口大小 set previewheight=20 &quot;设置弹出菜单的高度 set pumheight=15 &quot;使用鼠标 set mouse=a &quot;在vim里可以用鼠标复制粘贴, 用鼠标左键选中,中键粘贴(中键), shift + 选中:可复制(右键) &quot;可以在buffer中任意地方使用鼠标 &quot; set selection=exclusive &quot; set selectmode=mouse,key &quot;autocmd 如果切换文件, 自动切换当前路径, BufEnter * 会使 eclim插件的JavaImpl冲突 &quot;if has(&quot;autocmd&quot;) &quot; autocmd BufWinEnter * :lchdir %:p:h &quot;endif &quot;将当前编辑文件的路径设置为当前路径 &quot; set autochdir &quot;autocmd &quot;解决consle输出乱码 language messages zh_CN.utf-8 &quot;可用来改动补全时采用的方式 set wildmode=list:full &quot;Alt组合键不映射到菜单上 set winaltkeys=no &quot;可用来取得菜单式的匹配列表 高亮首个匹配 &quot;:set wildmenu &quot;当set wildmode=list:full默认set wildmenu已启动, 但是set wildmode=longest:list时不启动 &quot;设置粘贴模式和恢复 &quot;:set paste &quot;:set nopaste &quot;修改一个文件后，自动进行备份，备份的文件名为原文件名加“~“后缀 &quot;if has(&quot;vms&quot;) &quot; set nobackup &quot;else &quot; set backup &quot;vim main.c 多出 main.c~文件用来保存打开前的原文件, 最后可用vimdiff main.c main.c~比较 &quot;endif &quot;写备份但关闭vim后自动删除 set writebackup &quot;set nowritebackup &quot;vi兼容开关 当使用omni自动补全时,要设置 set nocompatible &quot;不使用swap文件 set noswapfile &quot;关闭遇到错误时的声音提示 set noerrorbells &quot;不要闪烁 set novisualbell &quot;使用空格来替换tab set expandtab &quot;多标签设置 set showtabline=1 &quot;0表示从不显示标签栏 1表示打开文件多于一个时显示标签栏 2表示总是显示标签栏 set tabpagemax=15 &quot;标签个数 &quot;在vim编辑器下方不显示命令 &quot;&quot;To reduce the number of hit-enter prompts: &quot; Set &#39;cmdheight&#39; to 2 or higher. &quot; Add flags to &#39;shortmess&#39;. &quot; Reset &#39;showcmd&#39; and/or &#39;ruler&#39;. set cmdheight=1 set showcmd &quot; set noshowcmd &quot;打开 VIM 的状态栏标尺 set ruler set laststatus=2 &quot;always show &quot;当光标达到上端或下端时 翻滚的行数 set scrolljump=0 &quot;当光标达到水平极端时 移动的列数 set sidescroll=0 &quot;当光标距离极端(上,下,左,右)多少时发生窗口滚动 set scrolloff=2 &quot;当使用vimdiff比较文件,相比较的比较文件同步滚动,但是splite分割窗口, 两个窗口也同步, 有时候挺有用的． &quot;set scrollbind &quot;自动读写相关 &quot; autoread not work: https://stackoverflow.com/questions/2490227/how-does-vims-autoread-work &quot; manually exec :e set autoread &quot; read open files again when changed outside Vim ( 同步 ) set autowrite &quot; write a modified buffer on each :next , ... ( 跳到另一个文件时,自动保存上个文件 ) set modified &quot;设置VIM行号 set nu &quot;Tab 宽度 set ts=4 &quot;自动缩进的时候, 缩进尺寸 set sw=4 set softtabstop=4 &quot;显示括号配对情况 wrong set sm &quot;smartmatch &quot; 开启新行时使用智能自动缩进 set smartindent &quot; 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感 set ignorecase smartcase &quot; 输入搜索内容时就显示搜索结果 set incsearch &quot; 搜索时高亮显示被找到的文本 set hlsearch &quot;use backspace delete a word. set backspace=indent,eol,start &quot;indent: 如果用了:set indent,:set ai 等自动缩进,想用退格键将字段缩进的删掉,必须设置这个选项.否则不响应. &quot;eol:如果插入模式下在行开头,想通过退格键合并两行,需要设置eol. &quot;start：要想删除此次插入前的输入,需设置这个. &quot;显示TAB健 &quot; set list &quot; set listchars=tab:&gt;-,trail:- &quot;允许backspace和光标键跨越行边界 ( 不习惯 ) &quot;set whichwrap+=&lt;,&gt;,h,l &quot;内容多时,是否换行显示 set nowrap &quot; characters to show before wrapped lines set showbreak=&lt;&lt;&gt;&gt; &quot;启动的时候不显示那个援助乌干达儿童的提示 set shortmess=aoOWtI &quot;通过使用: commands命令，告诉我们文件的哪一行被改变过 ( 不习惯 ) &quot; set report=1 &quot;在被分割的窗口间显示空白，便于阅读 (没看到效果) &quot;stl:\\ : 当前窗口状态栏显示&#39;空格&#39; (&#39;\\&#39;转义字符) &quot;stlnc:- : 非当前窗口状态栏显示--- &quot;vert:\\| : 垂直分割线为| &quot;fold:- : 若设置折叠功能,折叠后显示--- &quot;set fillchars=stl:\\ ,stlnc:-,vert:\\|,fold:-,diff:- set fillchars=stl:\\ ,stlnc:\\ ,vert:\\|,fold:-,diff:- &quot;set fillchars=vert:\\ ,stl:\\ ,stlnc:\\ &quot;带有如下符号的单词不要被换行分割 set iskeyword+=_,$,@,%,# &quot; 中文帮助 &quot; set helplang=cn &quot; 设定doc文档目录 &quot; let helptags=$VIMFILES.&#39;/doc&#39; &quot; 保留历史记录 set history=500 &quot; 英文单词在换行时不被截断 set linebreak &quot; 设置每行多少个字符自动换行，加上换行符 set textwidth=106 &quot; 选中已有行执行 gq 可以自动换行 或者 gq=G 或者 gggqG &quot;highlight column after &#39;textwidth&#39; &quot; set cc=+1 &quot; fo = formatoptions: &quot; t：根据 textwidth 自动折行； &quot; c：在（程序源代码中的）注释中自动折行，插入合适的注释起始字符； &quot; r：插入模式下在注释中键入回车时，插入合适的注释起始字符； &quot; q：允许使用“gq”命令对注释进行格式化； &quot; n：识别编号列表，编号行的下一行的缩进由数字后的空白决定（与“2”冲突，需要“autoindent”）； &quot; 2：使用一段的第二行的缩进来格式化文本； &quot; l：在当前行长度超过 textwidth 时，不自动重新格式化； &quot; m：在多字节字符处可以折行，对中文特别有效（否则只在空白字符处折行）； &quot; M：在拼接两行时（重新格式化，或者是手工使用“J”命令），如果前一行的结尾或后一行的开头是多字节字符，则不插入空格，非常适合中文 set fo+=Mm &quot; 光标可以定位在没有实际字符的地方 &quot;set ve=block &quot;显示匹配的括号([{和}]) set showmatch &quot; 短暂跳转到匹配括号的时(0.5s) set matchtime=1 &quot;多少个键被敲下后执行一次交换文件刷新 &quot;set updatecount=40 &quot;设置敲入40个字符后执行 &quot;交换文件刷新后的超时时间 set updatetime=5000 &quot;x毫秒秒后刷新 &quot;:preserve &quot;若设置的时间过长,该命令会手工的存入交换文件中. &quot; When using make, where should it dump the file, please see ./bundle/.config/errormarker.vim_conf.vim &quot; set makeprg=make\\ -j4 &quot; set makeprg=ant set makeef=errors &quot;lz 如果设置本选项,执行宏,寄存器和其它不通过输入的命令时屏幕不会重画.另外,窗口标题的刷新也被推迟.要强迫刷新,使用:redraw. &quot;set lz &quot;lazyredraw / &#39;lz&#39; (缺省关闭) &quot; set redrawtime=4000 &quot;过长的行显示不全 set display=lastline &quot; horiz split new windows below current set splitbelow &quot; vert split new windows to right of current set splitright &quot; Ignore compiled files set wildignore=*.o,*~,*.pyc,*.sh,*.png,.git\\*,.hg\\*,.svn\\* &quot;简单配置&quot; &quot;Gui选项 放到.gvimrc&quot; set tabline=%!MyTabLine() &quot; custom tab pages line if has(&quot;gui_running&quot;) &quot;set noruler set guifont=Monospace\\ 12 &quot;在Linux下设置字体的命令是： &quot;set guicursor=a:blinkon0 &quot;停止光标闪烁 set guioptions= &quot;set guioptions=e &quot; GUI Tabbar &quot;set guioptions+=m &quot; 菜单栏 &quot;set guioptions+=T &quot; 工具栏 &quot; set guioptions+=b &quot; 底边滚动条 &quot; set guioptions+=l &quot; 左边滚动条 &quot;set guioptions+=L &quot; 垂直分隔窗口左边滚动条 &quot; set guioptions+=r &quot; 右边滚动条 &quot;set guioptions+=R &quot; 垂直分隔窗口右边滚动条 set mousemodel=popup map! &lt;S-Insert&gt; &lt;MiddleMouse&gt; &quot;MiddleMouse: 粘贴 colorscheme spring set kp=man\\ -P\\ more &quot; remove the [m when using K man help map &lt;M-0&gt; :tabl&lt;CR&gt; map &lt;M-1&gt; 1gt map &lt;M-2&gt; 2gt map &lt;M-3&gt; 3gt map &lt;M-4&gt; 4gt map &lt;M-5&gt; 5gt map &lt;M-6&gt; 6gt map &lt;M-7&gt; 7gt map &lt;M-8&gt; 8gt map &lt;M-9&gt; 9gt map! &lt;M-0&gt; &lt;esc&gt;:tabl&lt;CR&gt; map! &lt;M-1&gt; &lt;esc&gt;1gt map! &lt;M-2&gt; &lt;esc&gt;2gt map! &lt;M-3&gt; &lt;esc&gt;3gt map! &lt;M-4&gt; &lt;esc&gt;4gt map! &lt;M-5&gt; &lt;esc&gt;5gt map! &lt;M-6&gt; &lt;esc&gt;6gt map! &lt;M-7&gt; &lt;esc&gt;7gt map! &lt;M-8&gt; &lt;esc&gt;8gt map! &lt;M-9&gt; &lt;esc&gt;9gt endif &quot;Gui选项 放到.gvimrc&quot; &quot;高亮 注释代码的颜色&quot; &quot;hi Comment ctermfg=6 &quot;hi cComment ctermfg=LightBlue guifg=LightBlue &quot;hi cCommentL ctermfg=DarkGray guifg=DarkGray &quot;高亮 注释代码的颜色&quot; &quot;高亮 menu color &quot; highlight Pmenu ctermbg=LightGreen ctermfg=black guibg=LightGreen highlight PmenuSel ctermbg=LightBlue guibg=LightBlue highlight PmenuSbar ctermbg=Blue guibg=Blue highlight PmenuThumb ctermbg=Yellow guibg=Yellow &quot;高亮 menu color &quot; &quot;高亮 当前行(列)&quot; set cursorline &quot; set cursorcolumn &quot; ctermfg : red(1) yellow(2) blue green grey brown cyan magenta 数字 hi CursorLine term=none cterm=underline ctermbg=none ctermfg=none gui=underline guibg=NONE &quot; hi CursorColumn term=none cterm=bold ctermbg=none ctermfg=none gui=bold guibg=NONE &quot;高亮 当前行(列)&quot; &quot; 高亮列&quot; hi ColorColumn ctermbg=darkgrey guibg=lightgrey &quot;&quot; &quot;高亮tab标签&quot; &quot;hi! TabWinNum term=bold,underline cterm=underline gui=bold,underline ctermfg=green guifg=Green ctermbg=darkgrey guibg=DarkGrey &quot;hi! TabWinNumSel term=bold,underline cterm=underline gui=bold,underline ctermfg=magenta ctermbg=blue guifg=Magenta guibg=#0000ff &quot;hi! TabPunct term=bold,underline cterm=underline gui=bold,underline ctermfg=cyan guifg=cyan ctermbg=darkgrey guibg=DarkGrey &quot;hi! TabPunctSel term=bold,underline cterm=underline gui=bold,underline ctermfg=magenta ctermbg=blue guifg=Magenta guibg=#0000ff hi! TabLineFill ctermfg=darkcyan guifg=darkgrey hi! TabLineFillEnd ctermfg=lightred ctermbg=black guifg=lightred guibg=black hi! TabLineSel term=bold ctermfg=blue ctermbg=green gui=bold guifg=blue guibg=green &quot;hi! TabModded term=underline cterm=underline ctermfg=black ctermbg=yellow gui=underline guifg=black guibg=yellow &quot;hi! TabExit term=underline,bold ctermfg=red guifg=#ff0000 guibg=darkgrey cterm=underline gui=underline &quot;hi! TabExitSel gui=underline term=underline,bold guifg=green guibg=blue cterm=underline ctermfg=green ctermbg=blue &quot;hi! TabSep term=reverse,standout,underline cterm=reverse,standout,underline gui=reverse,standout,underline ctermfg=black ctermbg=white &quot;高亮tab标签&quot; &quot;高亮 其他&quot; &quot;hi statusline cterm=bold ctermfg=LightGreen ctermbg=DarkMagenta gui=bold guifg=Green guibg=DarkMagenta hi Folded term=none cterm=bold ctermbg=none ctermfg=none gui=bold guibg=NONE hi FoldColumn term=none cterm=bold ctermbg=none ctermfg=none gui=bold guibg=NONE hi SignColumn term=none cterm=bold ctermbg=none ctermfg=none gui=bold guibg=NONE hi VertSplit term=none cterm=bold ctermbg=none ctermfg=none gui=bold guibg=NONE hi DebugBreak term=bold cterm=bold ctermbg=cyan ctermfg=none gui=bold guibg=magenta guifg=NONE hi Cursor term=none cterm=bold ctermbg=white ctermfg=none &quot;高亮 其他&quot; &quot;字符编码(多字节)&quot; if has(&quot;multi_byte&quot;) set fileencodings=ucs-bom,utf-8,gb18030,gbk,gb2312,chinese,big5,latin1,cp936 set termencoding=utf-8 set encoding=utf-8 endif &quot;VIM中显示信息都为英文的. language en_US.utf8 &quot;字符编码(多字节)&quot; &quot;设置C/C++语言的具体缩进方式 eg. switch case 缩进&quot; &quot;打开 C/C++ 风格的自动缩进 ( =a{ , gg=G 代码美化 ) set cin set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,&gt;1s,=1s,:1s set cino=:4g0t0(sus &quot;工作需要不缩进,不习惯也要习惯 &quot; set cino=:0g0t0(sus &quot; :0 -- switch 语句之下的 case 语句缩进 0 个空格 &quot; g0 -- class,struct,等权限控制语句(public,protected,private)相对class,struct等所在的块缩进 0 个空格 &quot; t0 -- 如果函数返回值与函数名不在同一行，则返回值缩进 0 个空格 &quot; (sus - 当一对括号跨越多行时，其后的行缩进前面 sw 指定的距离 &quot;设置C/C++语言的具体缩进方式 eg. switch case 缩进&quot; &quot;vim折叠功能&quot; &quot;折叠方式,可用选项 ‘foldmethod’ 来设定折叠方式：set fdm=*** &quot;有 6 种方法来选定折叠： &quot;manual 手工定义折叠 &quot;indent 更多的缩进表示更高级别的折叠 &quot;expr 用表达式来定义折叠 &quot;syntax 用语法高亮来定义折叠 &quot;diff 对没有更改的文本进行折叠 &quot;marker 对文中的标志折叠 &quot;常用的折叠快捷键 &quot;zf 创建折叠 (marker 有效) &quot;zo 打开折叠 &quot;zO 对所在范围内所有嵌套的折叠点展开 &quot;zc 关闭当前折叠 &quot;zC 对所在范围内所有嵌套的折叠点进行折叠 &quot;[z 到当前打开的折叠的开始处。 &quot;]z 到当前打开的折叠的末尾处。 &quot;zM 关闭所有折叠 (我喜欢) &quot;zr 打开所有折叠 &quot;zR 循环地打开所有折叠 (我喜欢) &quot;zE 删除所有折叠 &quot;zd 删除当前折叠 &quot;zD 循环删除 (Delete) 光标下的折叠，即嵌套删除折叠 &quot;za 若当前打开则关闭，若当前关闭则打开 ( 这个就足够了) &quot;zA 循环地打开/关闭当前折叠 &quot;zj 到下一折叠的开始处 ( 我喜欢 ) &quot;zk 到上一折叠的末尾 ( 我喜欢 ) &quot;set foldmethod=indent &quot;set foldmethod=marker &quot;要想在{ } 代码块中折叠，按空格键 &quot;syntax 与 c.vim 中的 \\cc 注释功能冲突 &quot;set foldmethod=syntax set foldmethod=marker set foldenable &quot; 开始折叠 set foldcolumn=0 &quot; 设置折叠区域的宽度 set foldlevel=0 &quot; 设置折叠层数为 &quot;set foldopen=all &quot;set foldclose=all &quot; 设置为自动关闭折叠 &quot;使&quot;用空格打开或关闭折叠 nnoremap &lt;space&gt; @=((foldclosed(line(&#39;.&#39;)) &lt; 0) ? &#39;zC&#39; : &#39;zO&#39;)&lt;CR&gt; &quot;vim折叠功能&quot; &quot;文件比较&quot; &quot;:vertical diffsplit FILE_RIGHT &quot;与已打开的文件进行比较 &quot;设置不同之处显示上下三行 set diffopt=context:3 &quot;命令模式（ESC键进入）： &quot;[c 跳转到下一个差异点 &quot;]c 跳到上一个差异点 &quot;dp 左边文件差异复制到右边文件(直接在键盘上行按下dp) &quot;do 右边文件差异复制到左边文件(直接在键盘上行按下do) &quot;zo 隐藏相同行 &quot;zc 展开向同行 &quot;u 撤销 &quot;Ctrl+ww 文件切换 &quot; &quot;:qa! 退出不保存 &quot;:wa 保存 &quot;:wqa 保存退出 &quot;:diffupdate 重新比较 &quot;文件比较&quot; &quot;单词列表匹配&quot; &quot;ctrl+x ctrl+k &quot;apt-get install wordlist set dictionary=~/.vim/dict/math.txt set dictionary+=~/.vim/dict/wordlist.txt set cpt=.,w,b,u,t,k,i &quot; set cpt=. &quot; . scan the current buffer (&#39;wrapscan&#39; is ignored) &quot; w scan buffers from other windows &quot; b scan other loaded buffers that are in the buffer list &quot; u scan the unloaded buffers that are in the buffer list &quot; U scan the buffers that are not in the buffer list &quot; k scan the files given with the &#39;dictionary&#39; option &quot; kspell use the currently active spell checking |spell| &quot; k{dict} scan the file {dict}. Several &quot;k&quot; flags can be given, &quot; patterns are valid too. For example: &gt; &quot; :set cpt=k/usr/dict/*,k~/spanish &quot; s scan the files given with the &#39;thesaurus&#39; option &quot; s{tsr} scan the file {tsr}. Several &quot;s&quot; flags can be given, patterns &quot; are valid too. &quot; i scan current and included files &quot; d scan current and included files for defined name or macro &quot; |i_CTRL-X_CTRL-D| &quot; ] tag completion &quot; t same as &quot;]&quot; &quot;单词列表匹配&quot; &quot;打开文件后自动回到上一次最后编辑的地方&quot; &quot;如果不起作用查看 ~/.viminfo 文件属性 au BufReadPost * \\ if line(&quot;&#39;\\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#39;\\&quot;&quot;) &lt;= line(&quot;$&quot;) | \\ exe &quot;normal! g&#39;\\&quot;&quot; | \\ endif &quot;打开文件后自动回到上一次最后编辑的地方&quot; &quot;completeopt 弹出菜单 输入字母实现即时的过滤和匹配 ( 参考 neocomplcache )&quot; &quot;&quot;关掉智能补全时的预览窗口 (Scratch) &quot;&quot; menu 使用弹出菜单来显示可能的补全 &quot;&quot; longest 只插入匹配的最长公共文本 &quot;&quot;set completeopt=menuone,menu,longest,preview &quot; set completeopt=menu set completeopt=longest,menu &quot;completeopt 弹出菜单 输入字母实现即时的过滤和匹配 ( 参考 neocomplcache )&quot; &quot; 设置Logcat文件类型&quot; &quot; au BufRead,BufNewFile *logcat* set filetype=logcat &quot; &quot;a.vim实现源文件与头文件切换&quot; let alternateNoDefaultAlternate = 1 &quot; &quot;按q之后按:进入histroy command &quot; 0~ 1~ workaround: https://github.com/vim/vim/issues/1671 if has(&quot;unix&quot;)&quot; let s:uname = system(&quot;echo -n \\&quot;$(uname)\\&quot;&quot;) if !v:shell_error &amp;&amp; s:uname == &quot;Linux&quot; set t_BE= &quot; 影响R concose set t_SH= endif endif&quot; &quot; gu gU 大小写互转 &quot; gitm89$ &quot; workaround for autoread not work au FocusGained,BufEnter * :silent! ! 4 依赖 1. 要求vim版本：vim8.0 or high 2. 管理插件: git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 3. 安装插件: Open vim, 执行:PluginInstall 4. cd bundle/vimproc.vim; make -f make_unix.mk 5. 保证系统clang版本3.9 or high， 到YouCompleteMe执行python3 ./install.py --clang-completer --clangd-completer or --all (时间比较久) ./install.py --clangd-completer --clang-completer --go-completer --ts-completer --java-completer python3: 修改一下install.sh 6. jedi补全sudo pip3 install -U jedi git clone https://github.com/davidhalter/jedi sudo python setup.py install or (推荐) sudo pip3 install -e git://github.com/davidhalter/jedi.git#egg=jedi 安装numpydoc: sudo apt-get install python-numpydoc sudo apt-get install python3-numpydoc (ubuntu16) 补全(某些)时有个错误: docscrape.py:140: UserWarning: Unknown section Note 打开文件加一个&quot;Note&quot; Section 7. 使用universal-ctags, https://github.com/universal-ctags/ctags 下载编译 8. 使用markdown, 并根据对应的配置里面的说明进行修改 `npm -g install instant-markdown-d` 9. Js `cd bundle/tern_for_vim; npm install` sudo npm i -g eslint eslint-plugin-vue 10. fzf 把export FZF_DEFAULT_OPTS=&quot;--bind=&#39;ctrl-o:execute(vim {})&#39;&quot; 放到~/.fzf.bash cd ./bundle/fzf/; ./install --all sudo apt-get install silversearcher-ag sudo apt-get install ripgrep (ubuntu18.10) or git clone https://github.com/BurntSushi/ripgrep cd ripgrep ; cargo build --release; ./target/release/rg --version or cargo install ripgrep (推荐) 11. LeaderF cd ./bundle/LeaderF; ./install.sh 12. jupyter sudo pip3 install jupyter_contrib_nbextensions jupyter nbextensions_configurator enable --user # Now clone the repository cd $(jupyter --data-dir)/nbextensions git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding chmod -R go-w vim_binding jupyter nbextension enable vim_binding/vim_binding 配置jupyter jupyter notebook --generate-config jupyter notebook password 13. 语法检查 sudo apt-get install pyflakes sudo apt-get install python-flake8 (推荐) 14. 数学公式 sudo apt-get install texlive","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"求导法则","date":"2018-06-24T08:25:43.000Z","path":"2018/06/24/Books/Math/derivative_rules/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 1 基本求导法则 2 复合求导法则","tags":[{"name":"Math","slug":"Math","permalink":"https://qrsforever.github.io/tags/Math/"}]},{"title":"(原创)本地规则引擎介绍","date":"2018-06-14T07:48:14.000Z","path":"2018/06/14/Note/IOT/Rule-Engine-Design2/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Elink Rule Schema Device Schema Rule Model Design LHS Tree Clp Struct Rule Class UML Clp Script Design Act Auto Gen Rule Others Local Build Sync Elink Script Rule Categories TODO 1 Elink 1.1 Rule Schema { &quot;ruleName&quot;:&quot;example&quot;, &quot;ruleId&quot;:&quot;123456&quot;, &quot;description&quot;:&quot;this is a example for rule definition&quot;, &quot;trigger&quot;:{ &quot;triggerType&quot;:&quot;auto|manual&quot;, &quot;switch&quot;:{ &quot;enabled&quot;:&quot;on&quot;, &quot;timeCondition&quot;:&quot;on&quot;, &quot;deviceCondition &quot;:&quot;on&quot;, &quot;notify&quot;:&quot;on&quot;, &quot;manual&quot;:&quot;on&quot; } }, &quot;conditions&quot;:{ &quot;conditionLogic&quot;:&quot;and&quot;, &quot;timeCondition&quot;:[ { &quot;year&quot;:&quot;2018&quot;, &quot;month&quot;:&quot;10&quot;, &quot;day&quot;:&quot;10|13|17&quot;, &quot;hour&quot;:&quot;every&quot;, &quot;minute&quot;:&quot;every&quot;, &quot;second&quot;:&quot;1&quot; } ], &quot;deviceCondition&quot;:{ &quot;deviceLogic&quot;:&quot;or&quot;, &quot;deviceStatus&quot;:[ { &quot;deviceId&quot;:&quot;0007A895C8A7&quot;, &quot;propName&quot;:&quot;CurrentTemperature&quot;, &quot;propValue&quot;:&quot;v&gt;50&quot; }, { &quot;deviceId&quot;:&quot;DC330D799327&quot;, &quot;propName&quot;:&quot;onOffLight&quot;, &quot;propValue&quot;:&quot;v==true&quot; } ] } }, &quot;actions&quot;:{ &quot;notify&quot;:{ &quot;title&quot;: &quot;xxx&quot;, &quot;message&quot;:&quot;Girlfriend Birthday!&quot; }, &quot;deviceControl&quot;:[ { &quot;deviceId&quot;:&quot;0007A895C7C7&quot;, &quot;propName&quot;:&quot;CurrentTemperature&quot;, &quot;propValue&quot;:&quot;50&quot; }, { &quot;deviceId&quot;:&quot;DC330D79932A&quot;, &quot;propName&quot;:&quot;onOffLight&quot;, &quot;propValue&quot;:&quot;true&quot; } ], &quot;manualRuleId&quot;:[ &quot;1528374365.417.48775&quot;, &quot;1528424679.929.67961&quot; ] } } 1.2 Device Schema { &quot;result&quot;: { &quot;description&quot;: &quot;烟雾报警器&quot;, &quot;id&quot;: 12, &quot;profile&quot;: { &quot;OnlineState&quot;: { &quot;tag&quot;: &quot;在线状态&quot;, &quot;write&quot;: &quot;F&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;read&quot;: &quot;T&quot;, &quot;range&quot;: { &quot;2&quot;: &quot;离线&quot;, &quot;1&quot;: &quot;在线&quot; } }, &quot;PowerOnOff&quot;: { &quot;tag&quot;: &quot;开关状态&quot;, &quot;write&quot;: &quot;F&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;read&quot;: &quot;T&quot;, &quot;range&quot;: { &quot;2&quot;: &quot;关闭&quot;, &quot;1&quot;: &quot;开启&quot; } }, &quot;SecurityControl&quot;: { &quot;tag&quot;: &quot;布防开关&quot;, &quot;write&quot;: &quot;T&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;read&quot;: &quot;T&quot;, &quot;range&quot;: { &quot;2&quot;: &quot;关闭&quot;, &quot;1&quot;: &quot;开启&quot; } }, &quot;Battery&quot;: { &quot;tag&quot;: &quot;剩余电量&quot;, &quot;write&quot;: &quot;F&quot;, &quot;type&quot;: &quot;enum&quot;, &quot;read&quot;: &quot;T&quot;, &quot;range&quot;: { &quot;2&quot;: &quot;正常&quot;, &quot;1&quot;: &quot;低电量&quot; } } } }, &quot;status&quot;: 1, &quot;request&quot;: &quot;/api/device/profile&quot; } 规则引擎的设计参考了Elink的json schema, 但设计上并不会受限该schema, 如果不加新的特殊需求, 设计模型不会大改. 2 Rule Model Design 2.1 LHS Tree LHSNode Tree ********* &quot;and&quot;: condition logic *** LHSNode ** * * *** &quot;and&quot; *** / ********* \\ / | \\ child / | \\ child / cond | \\ / | \\ / | \\ / | \\ / | \\ / | \\ ********* +-------------+ ********* *** LHSNode *** | Condition | *** LHSNode *** * * | | * * *** &quot;or&quot; *** | &quot;and&quot; | *** &quot;or&quot; *** / ********* \\ +-------------+ ********* / \\ / \\ &quot;and&quot;: slot logic, only support &quot;and&quot; / cond cond \\ / \\ +---------------------------+ / \\ | +------+ | +-------------+ +-------------+ | | | | | Condition | | Condition | Fact Instance | | | | | | \\ / | | | &quot;and&quot; | | &quot;and&quot; | \\ type / | | +-------------+ +-------------+ \\ / v v | Condition &lt;---&gt; Device | TimeEvent | SlotPoint &lt;---&gt; Property | -----------+-----------+-----------+--------------- | | | | v v +-------------+ +-------------+ &quot;&amp;&quot;: cell logic | SlotPoint | | SlotPoint | &quot;|&quot;: cell logic | | | | &quot;~&quot; | &quot;&amp;&quot; | | &quot;|&quot; | +-------------+ +-------------+ | | | | v v +-------------------+ +-------------------+ | Cell | | Cell | Compare Symbol: &quot;=, &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;&quot; | | | | Connective Symbol: &quot;&amp;, |, ~&quot; |(v &gt; 10) &amp; (v &lt; 20)| |(v = 10) | (v &gt; 20)| +-------------------+ +-------------------+ 2.2 Clp Struct ruleID ^ -----&gt; comment, here we want is rule name. | / | / -----&gt; MultiSlot (defrule rul-0001 &quot;this is an example&quot; / +-------- (and / | (and ------------------------------------------------------- | ?fct_t1 &lt;- (datetime ?clock ?year ?month ?day ?hour ?minute ?second $?others) ---+ | 1 (test (= ?year 2018)) | Condition: Fact | layer (test (= ?month 06)) | (not use Template) | (test (or (= ?day 20) (= ?day 21) (= ?day 22) )) ---+ | ) -----------\\ | (or \\------&gt; Cell LHSNode | (object (is-a TempSensor) ---+ | (ID ?id &amp;:(eq ?id ins-0007A895C8A7)) | | 2 (CurrentTemperature ?CurrentTemperature &amp;:(&gt; ?CurrentTemperature 50)) | | layer ) | | (object (is-a Light) | Condition: Instance | (ID ?id &amp;:(eq ?id ins-DC330D799327)) /-----&gt; Cell | | (onOffLight ?onOffLight &amp;:(= ?onOffLight 1)) / | | ) \\ ------------------- ---+ | ) \\ +--&gt; timeout-ms +-------- ) --------&gt; SlotPoint | +--&gt; retry-count =&gt; | | +-------- (bind ?c (create-rule-context rul-0001 5000 5)) ------&gt; create the rule context | (if (eq ?c FALSE) then (return)) | (send ?c act-control ins-0007A895C7C7 CurrentTemperature 50) ---&gt; action: device control RHSNode | (send ?c act-control ins-DC330D79932A onOffLight 1) | (send ?c act-notify 10000001 &quot;tellYou&quot; &quot;Girlfriend Birthday&quot;) ---&gt; action: message notify +--------- (send ?c act-scene rul-1000) ---&gt; action: active scene ) ---------------------------------------------------------------------------------------------------------------------------------------- /---&gt; DEVICE is superclass + -------------- (defclass SmogAlarm / | (is-a DEVICE) -------/ | /---- (role concrete) (pattern-match reactive) ----&gt; can triggered by rule Class | v (slot OnlineState (type NUMBER) (allowed-numbers 2 1)) | (not abstract) (slot PowerOnOff (type INTEGER) (allowed-numbers 2 1)) | (slot SecurityLevel (type SYMBOL) (allowed-symbols low normal high)) | (slot Battery (type NUMBER) (allowed-numbers 2 1)) +---------------- ) / / v (INTEGER or FLOAT) 定义Rule; (defrule rule-name ${LHSNode} =&gt; ${RHSNode}) LHSNode := [Condition+], Condition可以由Fact和Object(instance)组成 一个Fact或者Object由一个或多个单槽(SlotPoint)/多槽组成: Fact := [SingleSlot+], Object := [(SingleSlot|MultiSlot)+] 一个槽点比如Fact中的\"年|月|日|时|分|秒\", Object中的属性, 槽点(属性)值可进行逻辑比较, 构成触发点, 取名为Cell 时间Fact不采用Template原因在程序实现更方便 一旦RHSNode被执行, 首先为该Rule创建Context, Context销毁之时就是Rule的执行得到结束之日(异步). TODO 1. 一个Rule在Context没有销毁之前多次触发, 并无响应, 只有等到Context得到success结果或者超时结束,下次触发Rule方有效. 2.3 Rule Class UML +---------------+ +--------------+ | Condition | +------------+ +----------+ | Action | |---------------| | SlotPoint | | _Cell_ | |--------------| | mSlotLogic | -----&gt; |------------| ------&gt;|----------| | mType | | mType | / | mCellLogic | / | nSymbol | | mCall | ^ | mCls | / | mSlotName | / | nValue | | mID | \\ | mID | / | mCells |◆ ---/mCells +----------+ | mSlotName | \\ | mSlots |◆ ----/mSlots +------------+ | mSlotValue | -------+ +---------------+ +--------------+ 1:n | mActions ^ +-----------+ mCondLogic: and/or/not | | | | mSlotLogic: and +------------+ +------------+ | +--------------+ | mCellLogic: &amp;,|,~ | SlotInfo | | RHSNode | | | LHSNode | | nSymbol: =,&gt;,&lt;,&gt;=,&lt;=,&lt;&gt; |------------| | -----------| | |--------------| | | nName | | mActions | | | mCondLogic | /mChildren | nValue | +------------+ +--------◇ | mConditions | / +------------+ ^ mConditions| mChildren |-/ +---------------+ ^ | +--------------+ | RulePayload | mSlots | 1:n +----------\\ ^ |---------------| | \\ | | mRuleName | ◆ +-------------+ \\ | | mRuleID | +-------------------+ | DataChannel | \\ | mLHS | mVersion | | InstancePayload | |-------------| \\ +----------◇ | mLHS | |-------------------| | | -----------------------◇ | mRHS | /--| mInsName | |send(payload)| mLHS |---------------| / | mClsName | +-------------+ | toString() | / | mSlots | △ ^ ^ △ +---------------+ / +-------------------+ | | | | | / | | | | | | +---------------+ | | +----------------+ | | | | | | | | | | | | ▽ | +------------------+ | | +--------------------------+ +----------+ ◁ --+ +-----------------+ | RuleDataChannel | | | | DeviceDataChannel | | Payload | | ClassPayload | mCloudMgr|------------------| | | | ------------------------ | |----------| ◁ -------------|-----------------| +----◆ | mCloudMgr | | | | mDeviceMgr | | type() | | classname | | | mHandler | | | | mHandler | +----------+ | superclass | | +------------------+ | | |--------------------------| | mSlots | version | | △ | | | onStateChanged() | | +---◇ | mSlots | | | | | | onPropertyChanged() |-------------+ 1:n | |-----------------| | | | | | send() | | | toString() | | +------------------------+ | | +--------------------------+◆ ---------------------+ | +-----------------+ | | ElinkRuleDataChannel | | | △ ◆ mHandler | | | |------------------------| | | | | | | | | | | | | +----------+ | | | | onRuleSync() | | | +-------------------------+ | | | +---------------+ | | send() | | | | ElinkDeviceDataChannel | | | | | Slot | | +------------------------+ | | |-------------------------| | | +---&gt; |---------------| | | | | onProfileSync() | | | | mType | | | | +-------------------------+ | | | mName | | | | | | | mMin/mMax | | +-------------------------+ | | mDeviceMgr | | | mAllowList | | | CloudManager | | | v | |---------------| | |-------------------------| | | +----------------------------------------+ | | toString() | +---&gt;| | | | | DeviceManger | | +---------------+ | registRuleSyncCallback | | | | -------------------------------------- | | | | | | | | | +-------------------------+ | | | registDeviceStateChangedCallback | | | | | registDevicePropertyChangedCallback | | | | | registDeviceProfileSyncCallback | | +-----------------------------------+ | | setProperty | | | +-----------------------------------+ +----------------------------------------+ | | | | | | +----------------------------+ +----------------+ | | | +----▷ | MessageHandler::Callback | &lt;----◇ | MessageHandler | ◁ ---------+ | | | | +----------------------------+ |----------------| | | | | | | mCallback | | | | | | +----------------+ | | | | +----------------------+ | | | | | RuleEngineService | | v | | |----------------------| mUrgentHandler +--------------------+ | | | mUrgentHandler |◇ --------------------------------------------------&gt;| RuleEventHandler | | | | | mCore +----------------------+ ------&gt;|--------------------| | | | mCore/mCoreUrgent | ◆ -------------&gt; | RuleEngineCore | / | handleMessage | | | | mServerRoot | |----------------------| / +--------------------+ | +--| mDeviceChannel | mEnv | mHandler | /mHandler ^ | +----| mRuleChannel | +-------◆ | mEnv |◆ | | | mOfflineInsesCalled | | |----------------------| ------+ | |----------------------| | | driver() | / | | callInstancePush | | | | / +------------------+ | callMessagePush | | | handleTimer | / | RuleEventThread | | setDeviceChannel | | | handleClassSync | | |------------------| | setRuleChannel | | | handleRuleSync | | | mMessageQueue | | handleMessage | | | handleInstanceAdd | | +------------------+ +----------------------+ | | handleInstanceDel | | △ ◇ v | handleInstancePut | | | mStore | +---------------+ +----------------------+ | | | | Environment | | | | | |--\\ | +---------------------+ | +---------------+ \\ CLP | | RuleUrgentThread | | Clipscpp ------&gt; clips6.30 | |---------------------| \\ | | mService | \\ | +---------------------+ \\ +----------------------+ | \\ | RuleEngineStore | | ---------&gt; |----------------------| | /--------------◆ | mDB | | / mDB | mHandler |◆ -----------------------+ / | mDefTable | mHandler | |----------------------|\\ | | open/close | \\ +---------------------+ v | updateClassTable | \\ mTables | DefTable | +--------------+ | updateRuleTable | --------&gt; |---------------------| |SQLiteDatabase| | queryClassFilePaths | | mDB | | | | queryRuleFilePaths | | mUpdateHistoryList | | | | | |---------------------| +--------------+ +----------------------+ | updateOrInsert | | getFilePaths | | getDefInfos | | _Update | +---------------------+ △ △ / \\ / \\ | | | | +------------------+ +-----------------+ | DefClassTable | | DefRuleTable | | | | | +------------------+ +-----------------+ 核心驱动: RuleEngineService RuleEngineCore RuleEngineStore 数据通道: RuleDataChannel DeviceDataChannel 载体转换: ClassPayload InstancePayload RulePayload 辅助工具: MessageHandler SQLiteDatabase Log 2.4 Clp Script Design (auto) (manual) device property profile rule online offline changed scene TestCase ---------------------------------------------------------------------------------------------------&gt; | | | | ║ | | | | | | mainHandler | | mainHander() | | | | ║ | | v v v v v ▼ v v MainThread -------------------------------------------------------------------------------------------------------------&gt; \\ profile rule \\ \\ ║ \\ \\ \\ json json \\ \\ ruleHandler \\ \\ \\ \\ \\ | | ║ | | \\ \\ \\ | | ▼ | | \\ \\ \\ v T v T T v T v T T T T RuleThread --------------+----------+---------+---------+---+-----+---------+---------+---------+---------+-----&gt; ^ T add | del | | \\ | / | | | | ruleHander() | | | | \\ | / | | | | | | | | | | | | | | | +--\\ +--\\ +--\\ +--\\ v v v /--+ /--+ /--+ /--+ \\ \\ \\ \\+---------+/ / / / T: timer (default 1s) \\ \\ \\ | refresh | / / / -----------------------------&gt;| |&lt;---------------------------- | run | +---------+ | +--------+ (LHS) | ----▷ | USER | +--------------------------------------------------------------+ / +--------+ salience | / △ | +-------------------+ / | v | RuleContext | / | +--------+ |-------------------| / / +---| Rule-1 | | rule-id | / / | +--------+ | timeout-ms | +---------+ +-----------+ +----------------+ | | retry-count |---------▷ | Context | | DEVICE | | SmogAlarm | +-&gt; +--------+ | current-try | | | |-----------| |----------------| +---| Rule-2 | | start-time | +---------+ | ID |◁ ------| OnlineState | | +--------+ | act-error | | UUID | | PowerOnOff | | | unanswer-list | | Class | | Battery | +-&gt; +--------+ | response-rules | +-----------+ +----------------+ +---| Rule-3 | |-------------------| | +--------+ | try-again | | | unanswer-count | +-&gt; +--------+ | act-control | | Rule-4 | | act-notify | +--------+ | act-scene | | +-------------------+ | +-------------------------+----------------------+------------+ | | | | | | Action | | | v +------------------------- &gt; act-control ------------&gt; act-notify -----------&gt; act-scene | send-message (RHS) | ^ | ^ / | | act-step-control | | true | | true / | | success | | | | v | or | +------&gt; make-rule | +------&gt; make-rule | fail | | false (response) | | false (response) | v | v | v RuleEngineService ----------------------------------------------------------------------------------------------&gt; ins-push txt-push msg-push 规则分为联动(Auto)和手动(Manual)两种, 联动: 设备属性变化触发相关规则 手动: 触发场景,比如回家模式 RuleThread是专门的规则线程, 作用: 延时Timer以及RefreshAgenda/Run(触发Rule,执行Action), 这样设计相对简单, 避免Rule多线程问题 脚本Actions中的方法act-control/act-notify会调用RuleEngineService中的ins-push/txt-push(返回false:异步, 返回true:同步) 如果ins-push/txt-push是异步(return:false)方式, 则act-xxx会自动创建等待结果的规则, 当父规则Context销毁, 该auto规则删除 如果联动规则触发了场景规则被调用, act-scene也会自动创建等待(子规则)结果规则, 且它触发的规则也会创建Context. act-xxx方法是RHS中Action, 每个action的执行可以是同步异步(3,4). 如果异步则会自动创建规则(autorule)用以等待结果, 并将之存入 response-rules中, 除此之外, 把自身funcall注入unanswer-list中,如果autorule检查到action执行成功, 会将funcall从unanswer-list移除, Rule是判断unanswer-list的size决定自身是否执行成功的(size=0: success). RuleEngineService根据T(default:1是)定时给脚本喂时间, 这 样Rule就可以实现超时机制, (单次)超时后, 首先检查current-try次数, 如果小于retry-count, 则从unanswer-list中取出没有完成的 funcall,并且执行. 如果规则被触发, 但是RHS中的Action控制的设备Poweroff, RuleEngineService会得知该事件, 并在设备上线后刷新与之相关的Rules 2.5 Act Auto Gen Rule act-control(ins-04FA8309822A, CleaningMode, 2): +---&gt; &#39;_&#39; represent inner auto generate | | +---&gt; parent rule name that call act-control in RHS | | | | +--&gt; sign this rule is for reponse |------------------------ | (defrule _rul-1529578016.389.86822-response-ins-04FA8309822A |---&gt; action id (here is instance name) (declare (salience 1000)) -----------------+ (object (is-a SweepingRobot) (ID ?id &amp;:(eq ?id ins-04FA8309822A)) (CleaningMode ?v &amp;:(eq ?v 2))) =&gt; (send [rul-1529578016.389.86822] action-success &quot;act-control ins-04FA8309822A CleaningMode 2&quot;) ) -------------------------- -------------- --------------------------------------------- | | | +--&gt; parent rule context +--&gt; rule context method | modify unanswer-list v arguments of action-success 将设置instance(设备)的属性值作为条件,被控制的设备属性值如果上报值符合条件,证明控制成功 act-notify(n-350490027, \"tellYou\" \"Girlfriend Birthday\"): notify id (assert (rule-response notifyid success)) ----------- | (defrule _rul-1529583875.818.80441-response-n-350490027 | (declare (salience 1000)) | (rule-response n-350490027 success) &lt;--------------------+ =&gt; (send [rul-1529583875.818.80441] action-success &quot;act-notify n-350490027 \\&quot;tellYou\\&quot; \\&quot;Girlfriend Birthday\\&quot;&quot;) ) 通过响应Fact(rule-response notifyid success)判断消息通知是否执行成功. act-scene(rul-1529578676.958.69587): (assert (rule-response ruleid success)) rule name: nest call | ------------------------ | (defrule _rul-1529578775.206.24324-response-rul-1529578676.958.69587 | (declare (salience 1000)) | (rule-response rul-1529578676.958.69587 success) &lt;----------------+ =&gt; (send [rul-1529578775.206.24324] action-success &quot;act-scene rul-1529578676.958.69587&quot;) ) 通过响应Fact(rule-response ruleid success)判断消息通知是否执行成功. 3 Others 3.1 Local Build make 除了clips代码(编译后在Makefile中指定), 其他依赖模块会依次编译: @cd $(MISC_DIR); make; @cd $(MESSAGE_DIR);make; @cd $(LOG_DIR);make; @cd $(CLIPSCPP_DIR);make; @cd $(PAYLOAD_DIR);make; @cd $(DRIVER_DIR);make; make clean 依赖模块会依次清除: @cd $(MISC_DIR); make clean; @cd $(MESSAGE_DIR);make clean; @cd $(LOG_DIR);make clean; @cd $(CLIPSCPP_DIR);make clean; @cd $(PAYLOAD_DIR);make clean; @cd $(DRIVER_DIR);make clean; 3.2 Sync Elink Script 自动同步云端的profile和rules: cd test; ./sync_from_cloud.py 脚本通过请求获取信息, 其中Token可能改变, 需要定时修改 class ElinkRequest(object): &quot;&quot;&quot;Docstring for RequestHeader. &quot;&quot;&quot; def __init__(self, uri): self._ip = &quot;10.185.30.96&quot; self._host = &quot;smarthome.lecloud.com&quot; self._token = &quot;238XXXvKm3oZNGEm1Sm2T6Udm2Wnr4nikdxi6fm1kfU4Pj17RxSDAv5B2n3m5RMitfRw0b6VGLjoVsJejE4z3B9Z0Bt1cm3ewDuBBuOwLkRrUxinrb3zGkwUm4&quot; self._uri = uri 脚本只供开发调试使用 3.3 Rule Categories classified into three major categories: global rules which cannot be disable, such as: retract the fact of datetime which asserted per second (defrule retract-datetime (declare (salience ?*SALIENCE-LOWEST*)) ?f &lt;- (datetime $?) =&gt; (retract ?f) ) 一个fact被声明, 将不会消失, 但可以通过modify修改, 也可以retract将其收回. custom rules configured through UI which can enable or disable. the naming conventions of the rule is: ; \"rul-\" is the prefix of the custom rule name (defrule rul-1529578775.206.24324 \"autotest3\" (object (is-a AirClean1) (ID ?id &amp;:(eq ?id ins-0007A895C8A7)) (WorkMode ?WorkMode &amp;:(= ?WorkMode 5)) ) =&gt; (bind ?c (create-rule-context rul-1529578775.206.24324)) (if (eq ?c FALSE) then (return)) (send ?c act-scene rul-1529578676.958.69587) ) 用户有权开启/关闭自己配置的规则, 设计上一个custom rule对应一个clp文件, 方便删除更新. auto-gen rules which have short life cycle, disappeared when got the response of the action or rule context destroied. ; &quot;_rul-&quot; is the prefix of the auto-gen rule name (defrule _rul-1529578775.206.24324-response-rul-1529578676.958.69587 (declare (salience 1000)) (rule-response rul-1529578676.958.69587 success) =&gt; (send [rul-1529578775.206.24324] action-success &quot;act-scene rul-1529578676.958.69587&quot;) ) 用户不可见, Action方法中内部生成, 当Action有response(或者Rule超时/失败)则自动删除 4 TODO 不使用模板的MultiSlot的Fact作为条件, Slot是有顺序的, 判断Fact时, 可以省略后面的, 不可以从中间省略, 例如: 正确: ?fct_t1 &lt;- (time ?year ?month ?day ?hour ?minute ?second $?others) ?fct_t2 &lt;- (time ?year ?month ?day ?hour ?minute $?others) ?fct_t3 &lt;- (time ?year ?month ?day ?hour $?others) 错误(语法正确, 意义错误, second其实是hour): ?fct_t4 &lt;- (time ?year ?month ?day ?second $?others) 使用带模板的Fact作为条件, 模板Slot没有顺序限制, 但需要谨记在使用完之后retract掉, 否则不会消失, 例如: (defrule test ?fct_t1 &lt;- (datetime (year ?y &amp;:(= ?y 2018) (second ?s)) =&gt; (retract fct_t1) ) 触发rule:test (assert (datetime (year 2018) (second 10))) 不触发rule, 所以这个fact没有被retract, 该fact一直存在, 浪费MEM, 可以使用Object(Instance)取代 (assert (datetime (year 2019) (second 10))) 云端下发的规则ID及为某个设备创建实例ID时, 为了避免规则ID和实例ID可能是纯数字, 比如设备实例其实就是DeviceID, 使用下面API转: 加ins-前缀 std::string innerOfInsname(std::string name); std::string outerOfInsname(std::string name); 加rul-前缀 std::string innerOfRulename(std::string name); std::string outerOfRulename(std::string name); 暂时不支持运行时更新设备类, 比如Light, 原因是如果该类在Rule的条件LHS中引用, 该类将无法直接删除更新. 运行时动态使能的设计(未设计) 对中文的支持(支持) 简单规则测试 (see TempSimulateSuite.cpp) (finished) RULE LHS ACTION PASS ? autotest1 instance act-control Yes autotest3 instance act-scene Yes autotest4 instance act-notify Yes manualtest1 fact act-control Yes manualtest3 fact act-control Yes LHS带有and和or的规则测试 (defrule rul-0000000000.000.00001 &quot;tv-light-rule&quot; (and (object (is-a Light) (ID ?ins-38D269B0EA1801010311 &amp;:(eq ?ins-38D269B0EA1801010311 ins-38D269B0EA1801010311)) (PowerOnOff ?PowerOnOff &amp;:(= ?PowerOnOff 1)) ) (object (is-a Letv) (ID ?ins-00000000000000000002 &amp;:(eq ?ins-00000000000000000002 ins-00000000000000000002)) (PowerOnOff ?PowerOnOff &amp;:(= ?PowerOnOff 1)) ) (object (is-a LightSensor) (ID ?ins-00000000000000000001 &amp;:(eq ?ins-00000000000000000001 ins-00000000000000000001)) (Quantity ?Quantity &amp;:(&gt;= ?Quantity 10 )&amp;:(&lt;= ?Quantity 20)) ) ) =&gt; (bind ?c (create-rule-context rul-0000000000.000.00001)) (if (eq ?c FALSE) then (return)) (send ?c act-control ins-38D269B0EA1801010311 Brightness 2) ) TestCase: TEST_RULE_AND Pass 在and逻辑下, object slot (ID ?id) id变量名必须不能一样(这里使用did), 否则and条件永远不成立 (defrule rul-0000000000.000.00002 &quot;emergency-alarm-rule&quot; (or (object (is-a EmergencyButton) (ID ?ins-38D269B0EA1886D3E200 &amp;:(eq ?ins-38D269B0EA1886D3E200 ins-38D269B0EA1886D3E200)) (PowerOnOff ?PowerOnOff &amp;:(= ?PowerOnOff 1)) ) (object (is-a SmogAlarm) (ID ?ins-00124B00146D743D00 &amp;:(eq ?ins-00124B00146D743D00 ins-00124B00146D743D00)) (PowerOnOff ?PowerOnOff &amp;:(= ?PowerOnOff 1)) ) ) =&gt; (bind ?c (create-rule-context rul-0000000000.000.00002)) (if (eq ?c FALSE) then (return)) (send ?c act-notify n-714636915 &quot;Your house is dangerous!&quot; &quot;Warning&quot;) ) TestCase: TEST_RULE_OR Pass LHS.Condition.SlotPoint带有的&amp;和|\"规则测试 RHS触发的Action中设备如果不在线(poweroff), 那么需要在设备上线后重新刷新相关规则(条件重新判断) TestCase: TEST_RULE_INS_ONLINE_LATER Pass RHS触发的Action中设备的最终状态,需要按一定step,逐步达到该效果. TestCase: TEST_RULE_STEP_CONTROL Pass 用户只是要最终状态, 至于如何达到这个状态(begin, step)用户其实不需要关注, 所以这个功能暂时没有实际意义","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"Message-Handler","date":"2018-05-31T05:30:25.000Z","path":"2018/05/31/Design/C++/Message-Handler/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 框架图 0.1 框架图 +--------------------------------------------------------------------------------------------------+ | | | | | +-----------------+ | | | Message | | | --&gt;|-----------------| | | +----------------+ / | what | | | | MessageQueue | / | arg[1|2|3] | target | | -----&gt;|----------------| / | target |◇ ------+ | / | mMessages |-------/ |-----------------| | / |----------------| mMessage | obtain | | / | enqueueMessage | | recycle | v / | removeMessage | | next | +--------------------+ / | nextMessage | +-----------------+ | MessageHandler | / +----------------+ |--------------------| mMessageQueue / | mMessageQueue |---------------/ | mMessageHandler |◆ -----------------+ |--------------------| mMessageHandler | | dispatchMessage | | +------------+ | sendMessage[Delay] | | +-----▷ | Thread | | handleMessage | | | |------------| +--------------------+ | | | PID | △ | | |------------| | | | | run | | | | +------------+ | v | +-------------------+ +----------------------+ | RuleEngineHandler | | MessageHandlerThread | |-------------------| |----------------------| | handleMessage | | mMessageQueue | +--------------------------------------+ +-------------------+ |----------------------| |while(true) | | run |-----&gt;| msg = mMessageQueue-&gt;nextMessage() | +----------------------+ | msg-&gt;target-&gt;dispatchMessage() | +--------------------------------------+","tags":[{"name":"C++","slug":"C","permalink":"https://qrsforever.github.io/tags/C/"}]},{"title":"Log-Pool","date":"2018-05-31T05:30:25.000Z","path":"2018/05/31/Design/C++/Log-Pool/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 框架图 0.1 框架图 +-------------------+ +----------------+ | RingBuffer | | MessageHandler | | DataSink | ----&gt;|-----------------------| |-------------------| |----------------| / | mBufHead | | mMessageQueue | | mRingBuffer |-------/ | mBufLength | | mMessageHandler | | m_dataSize | mRingBuffer |-----------------------| |-------------------| |----------------| | get[Write/Read]Head | | handleMessage | | onDataArrive | | submit[Write/Read] | +-------------------+ +----------------+ +-----------------------+ △ △ ^ | | | +-----------+-----------+ +-------------------------------------------------------------------------------+ | +------------+ | | | | | +-----------------+ | | | +-------&gt; | LogPool | v | | | |-----------------| mFilterHead +-----------+ | | | | mFilterHead |◇ --------------------------------&gt;| LogFilter | | | | |-----------------| |-----------| | | | | attachFilter | | m_next |◇ ----+ | | | detachFilter | |-----------| m_next | | | | | pushBlock | | | | onDataArrive | +-----------+ | | | receiveData | △ △ △ | | | | | | | | | | handleMessage | | | | | | +-----------------+ +----------------------+ | +-----------------------+ | | | | | | | | | | | | +-----------+ +-----------------+ +----------------+ +-----------------+ | | | LogThread | | ConsoleFilter | | FileFilter | | NetworkFilter | | | |-----------| |-----------------| |----------------| |-----------------| | | | | | | | | | | | | Create |-----------| | pushBlock | | pushBlock | | pushBlock | | +---------| run | +-----------------+ +----------------+ +-----------------+ | +-----------+ | | | | | | | ▽ | +----------------------+ +---------------+ | | MessageLooper | | Logger | | |----------------------| |---------------| mDataSink | | mMsgQueue | | mDataSink |◇ ------------------------------------------------+ |----------------------| |---------------| | run | | log | +----------------------+ +---------------+","tags":[{"name":"C++","slug":"C","permalink":"https://qrsforever.github.io/tags/C/"}]},{"title":"(原创)IOT之规则引擎","date":"2018-05-27T13:04:19.000Z","path":"2018/05/27/Note/IOT/Rule-Engine-Design/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Design Framework Class Message Log Rule Engine Driver Develop Module Tasks Module Sample TODO Test Supported 1 Design 1.1 Framework v0.0.1 ╔═════════════════╦════════════════════════════════════════╗ ******* | ║ ║ ║ *** Cloud *** | ║ ║ Log / MQ / Json / DataChannel / Time ║ ******* | Rule ║ ║ ║ | | --------&gt; ║ Rules ╠════════════════════════════════════════╣ | | ║ Assemble ║ ║ +-------&gt; | ║ ║ Rule Engine Driver ║ json rule | ║ ║ ║ | ║ ║ ║ | ╠════════════╦════╩══════╦═╦═══════════════════════════════╣ +-----------+ ║ ║ ║ ║ ║ | | ║ Global ║ Devices ║ ║ Clips C++ Interface ║ | convert | ║ ║ ║ ║ ║ | | ╠═══════════CLP══════════╣ ╠═══════════════════════════════╣ +-----------+ ║ ║ ║ ║ ║ 1.json rule parse ║ Rules ║ Utils ║ ║ Clips Core ║ 2.map profile/alias ║ ║ ║ ║ ║ ╚════════════╩═══════════╩═╩═══════════════════════════════╝ 说明: 云端下发的json规则, 需要转换成Rule对象(这个转换不属于规则引擎模块, 只提供Rule类头文件), 传递给rule translate模块. 云端下发的json规则本地化存储不属于规则引擎模块负责, 但传给rule translate模块翻译后的clip规则文件, 规则引擎模块负责存储该文件. 触发规则引擎的事件(属性变化等)需要胡老师提供注册回调的API 规则引擎触发的动作(改变属性等)需要胡老师提供相关调用的API (同步异步) 1.2 Class 1.2.1 Message v0.0.1 +--------------------------------------------------------------------------------------------------+ | | | | | +-----------------+ | | | Message | | | --&gt;|-----------------| | | +----------------+ / | what | | | | MessageQueue | / | arg[1|2|3] | target | | -----&gt;|----------------| / | target |◇ ------+ | / | mMessages |-------/ |-----------------| | / |----------------| mMessage | obtain | | / | enqueueMessage | | recycle | v / | removeMessage | | next | +--------------------+ / | nextMessage | +-----------------+ | MessageHandler | / +----------------+ |--------------------| mMessageQueue / | mMessageQueue |---------------/ | mMessageHandler |◆ -----------------+ |--------------------| mMessageHandler | | dispatchMessage | | +------------+ | sendMessage[Delay] | | +-----▷ | Thread | | handleMessage | | | |------------| +--------------------+ | | | PID | △ | | |------------| | | | | run | | | | +------------+ | v | +-------------------+ +----------------------+ | RuleEngineHandler | | MessageHandlerThread | |-------------------| |----------------------| | handleMessage | | mMessageQueue | +--------------------------------------+ +-------------------+ |----------------------| |while(true) | | run |-----&gt;| msg = mMessageQueue-&gt;nextMessage() | +----------------------+ | msg-&gt;target-&gt;dispatchMessage() | △ +--------------------------------------+ +-------------------+ | | RuleEngineThread | | |-------------------|-------------------------+ | | |-------------------| | run | +-------------------+ 说明: 支持延时消息, 可以间接实现Timer 所有与RuleEgineDriver交互的事件尽可能使用消息驱动, 比如: PropertyEvent, RuleEvent, TimerEvent, SystemEvent what arg1 arg2 obj comment PropertyEvent REPORT undef undef 属性上报事件 ERROR undef undef 属性错误事件 RuleEvent ADD undef undef 规则添加事件 UPDATE undef undef 规则更新事件 TimerEvent undef undef undef 目前只用来做定时器 SystemEvent undef undef undef 系统消息 RuleEngine需要单独的线程处理事件, 任何Dispatch出去的消息执行过程不得有阻塞 1.2.2 Log v0.0.1 +-----------------------+ +-------------------+ +----------------+ | RingBuffer | | MessageHandler | | DataSink | ----&gt;|-----------------------| |-------------------| |----------------| / | mBufHead | | mMessageQueue | | mRingBuffer |-------/ | mBufLength | | mMessageHandler | | m_dataSize | mRingBuffer |-----------------------| |-------------------| |----------------| | get[Write/Read]Head | | handleMessage | | onDataArrive | | submit[Write/Read] | +-------------------+ +----------------+ +-----------------------+ △ △ ^ | | | +-----------+-----------+ +-------------------------------------------------------------------------------+ | +------------+ | | | | | +-----------------+ | | | +-------&gt; | LogPool | v | | | |-----------------| mFilterHead +-----------+ | | | | mFilterHead |◇ --------------------------------&gt;| LogFilter | | | | |-----------------| |-----------| | | | | attachFilter | | m_next |◇ ----+ | | | detachFilter | |-----------| m_next | | | | | pushBlock | | | | onDataArrive | +-----------+ | | | receiveData | △ △ △ | | | | | | | | | | handleMessage | | | | | | +-----------------+ +----------------------+ | +-----------------------+ | | | | | | | | | | | | +-----------+ +-----------------+ +----------------+ +-----------------+ | | | LogThread | | ConsoleFilter | | FileFilter | | NetworkFilter | | | |-----------| |-----------------| |----------------| |-----------------| | | | | | | | | | | | | Create |-----------| | pushBlock | | pushBlock | | pushBlock | | +---------| run | +-----------------+ +----------------+ +-----------------+ | +-----------+ | | | | | | | ▽ | +----------------------+ +---------------+ | | MessageLooper | | Logger | | |----------------------| |---------------| mDataSink | | mMsgQueue | | mDataSink |◇ ------------------------------------------------+ |----------------------| |---------------| | run | | log | +----------------------+ +---------------+ 说明: 1. 日志采用循环Buffer输入输出, 在独立的日志线程处理buffer中日志 2. 日志可以实现多个后端输出如 Console/File/Network等 1.2.3 Rule Engine Driver v0.0.1 +--------------+ +---------------+ | DeviceShadow | | PropertySlot | |--------------| +----&gt;|---------------| | mClsName | | | mName | | mSlots |◇ ---+ | mType | |--------------| mSlots |---------------| | | | | +--------------+ +---------------+ ^ +----------------------+ | -----&gt;| RuleEngineHandler | | / |----------------------| | / /--◇ | mDriver | | +-----------------------+ / / |----------------------| | | RuleEngineDriver | / / | handleMessage | | 1:n |-----------------------| / / | | +--------◇ | mShadows | mHandler/ / | handleRuleEvent | mShadows | mHandler |◇ ------/ / | handlePropertyEvent | | mClips |&lt;---------/ | handleTimerEvent | |-----------------------| mDriver +----------------------+ | [setup/start]Clips | | | | | | | | doPropertyEvent | -------+ +------\\ | doTimerEvent | / \\ | doRuleEvent | / \\ +-----------------------+ / \\ +---------------------+ +----------------------+ | | | | |DeviceManagerWrapper | | CloudRuleCovert | | | | | +---------------------+ +----------------------+ 说明: 2 Develop 2.1 Module Tasks Common Modules: Message Queue and Message Handle, Log, Timer C++ Clips Interface Rule Engine Manage CLP files: Global, Devices, Utils, Rules Rules Translate 2.2 Module Sample 3 TODO 3.1 Test Supported Items Support Sample math: =,!= yes not impl math: +,-,*,/ yes not impl math: &gt;,&lt; yes not impl logic: and,or yes not impl timer no not impl update trigger yes not impl state trigger no not impl","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Iotivity之SmartHome","date":"2018-05-16T06:09:38.000Z","path":"2018/05/16/Note/IOT/Iotivity-SmartHome/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Discovery Payload Discovery UML RemoteResource UML 1 Discovery Payload device --- \\ v /oic/res +------------------------------------------+ +--------+ +--------------------+ | OCDiscoveryPayload | +--&gt; |oic.wk.d| --&gt; |oic.d.airconditioner| |------------------------------------------| | +--------+ +--------------------+ |sid : f9f0a646-fd3d-35c7-d4a7-68e3afe9f64e| | |name: null | type: null | iface: null | | | resources |(multiple devices | types |------------------------------------------| not support) | | next | --&gt; null | ifaces +---------------+ +--------+ +------------------------------------------+ | +-----&gt; |oic.if.baseline|---&gt;|oic.if.r| ◇ | | +---------------+ +--------+ | resources | | | | | v ◇ ◇ +---------------------+ +---------------------+ +---------------------+ +---------------------+ | OCResourcePayload | | OCResourcePayload | | OCResourcePayload | | OCResourcePayload | |---------------------| |---------------------| |---------------------| |---------------------| | uri: /oic/sec/doxm | | uri: /oic/sec/pstat | | uri: /oic/d | | uri: /oic/p | | types/ifaces | | types/ifaces | | types/ifaces | | types/ifaces | |---------------------| |---------------------| |---------------------| |---------------------| | next | --&gt; | next | --&gt; | next | --&gt; | next | +---------------------+ +---------------------+ +---------------------+ +---------------------+ | | v +---------------------+ +---------------------+ +---------------------+ | OCResourcePayload | | OCResourcePayload | | OCResourcePayload | |---------------------| |---------------------| |---------------------| | uri:/temperature | | uri: /binaryswitch | |uri:/oic/introspectio| | types/ifaces | | types/ifaces | | types/ifaces | |---------------------| |---------------------| |---------------------| | next | &lt;-- | next | &lt;-- | next | +---------------------+ +---------------------+ +---------------------+ ◇ ◇ ◇ ◇ | | | | +--------------------+ | | | | +--------------------+ | oic.r.temperature | &lt;----+ | | +----&gt; |oic.r.switch.binary | +--------------------+ | | +--------------------+ | | +----------------+ | | +----------------+ |oic.if.baseline | &lt;----+ +---&gt; |oic.if.baseline | +----------------+ +----------------+ 1. foreach(uri:device) ---&gt; &quot;/oic/d&quot; ---&gt; airconditioner 2. foreach(uri:device) ---&gt; &quot;/binaryswitch&quot; &amp; &quot;/temperature&quot; --&gt; BinarySwitch &amp; Temperature +----------------+ +-------------------+ +-----------------+ | OCRepPayload | ------------&gt; | PayloadConverter | ------------&gt; | PropertyBundle | | | &lt;------------ | | &lt;------------ | | +----------------+ +-------------------+ +-----------------+ 2 Discovery UML (app) ((6)) +------------------------+ | MyDiscoveryDelegate | +------------------------+ | | (abtract) ▽ +-------------------------+ +---------------------+ | DeviceDiscoveryDelegate |&lt;--+ | OCDiscoveryPayload | +---------------+ +-----------------------+ |-------------------------| | |---------------------| | ns:SH_Impl | | DiscoveryQuery | | onFindRemoteDevice | | | base | |---------------| |-----------------------| +-------------------------+ | | | | g_config | | m_deviceType | △ | | sid/name/type/iface | |---------------| | m_hostAddress |\\ | | | resources | | start() | |-----------------------| \\ | | |---------------------| | stop() | | [get/set]DeviceType | \\ | m_delegate | | next | | process() | +-----------------------+ \\ +-------------------+ | +---------------------+ +---------------+ \\ | DeviceDiscovery | | ◇ -----+ |-------------------| | | resources static queryParam | | m_delegate | | | +---------------------- | |-------------------| | v |ClientCallbackWrapper: OCDoRequest(&quot;/oic/res&quot;) v | setDelegate | | +------------------------+ | \\ /----------------------------- findRemoteDevices |((1)) | | OCResourcePayload | |---\\ DeviceDiscoveryCallback: / +-------------------+ | |------------------------| | | v single instance | | uri/types/Interfaces | | | findRemoteDevices[withQuery] &lt;----+ | | anchor/port/secure/rel | | | ((2)) \\ | +----------------+ | |------------------------| | \\ \\ | | OCCallbackData | OCStack | | next | |---\\ RemoteResourceCallback ------------+ | |----------------| | +------------------------+ | | | | | context | | | | on[Get/Set/Observe] &lt;-------+-----+------- cb | | | | [[6]] \\ | | cd | | | \\ \\ | +----------------+ |callback from ocstack: |---\\ +--------------------------+ | | ◇ | | | CallbackHelper | | | | context | 1. discovery for all resoures | |--------------------------| | | | | 2. resources for get/set/post | |[set/destroy]RemoteDevice | | | v | | +--------------------------+ | | +-----------------------+ | | | | | ClientCallbackContext | | \\ | | |-----------------------| delegate | delegate \\ | | | delegate ----------------------+--------------+ | | | query | real callback | | | |-----------------------|after doing some work | | | | getDelegate | | | | | getQuery | | | | +-----------------------+ v | | talk with ocstack using callback +------------------------------+ onGet &lt;--- context.delegate | | | SHBaseRemoteResourceDelegate | | | |------------------------------| onSet &lt;--- context.delegate | l| ((3)) [[7]] | on[Get/Set/Observe] | | o| SHBaseRemoteDeviceBuilder +------------------------------+ onObserve &lt;--- context.delegate | o| | | p| | | ||--&gt; createSHBaseRemoteDevice | || uri : &quot;/oic/d&quot; | || type: &quot;oic.d.airconditioner&quot; || || CallbackHelper || | || | ||--&gt; setRemoteDevice || | ((4)) || | SHBaseRemoteResourceBuilder || | | || | | || |--&gt; createSHBaseRemoteResource || | uri : &quot;/binaryswitch&quot; | uri : &quot;/temperature&quot; || | type: &quot;oic.r.switch.binary&quot; | type: &quot;oic.r.temperature&quot; || | || || ((5)) ||--&gt; delegate-&gt;onFindRemoteDevice(remoteDevice) || 3 RemoteResource UML (base: only for on[Get/Set/Observe) +------------------------------+ +--------&gt; | SHBaseRemoteResourceDelegate | [[5]] | |------------------------------| ◁ ----------------------------------------------+ +-&gt; get | | on[Get/Set/Observe] | | doRequest | | +------------------------------+ | +---------| | [[7]] △ | | OCStack | | | | | +-&gt; post | m_delegate | | | | (ocstack cb proxy) | +---------------------------+ | | ◇ | | SHBaseRemoteResource | | | +-------------------------------+ m_Impl | |---------------------------| | | | SHBaseRemoteResource_Impl | &lt;---------------+-------------◇ | m_Impl | | | |-------------------------------| | |---------------------------| | | | uri/types/ifaces/devAdrr | | | setDelegate | | | | m_observeHandle/m_endpoints | | | [set/get]PropertyBundle | [[4]] | | | m_delegate | | | [start/stop]Observe | | | |-------------------------------| ---------+-------------&gt; | getter* setter* | | | | hasResourceType | / | +---------------------------+ | | | startObserve | / | △ △ | | | setDelegate | / | | | | +------[set/get]PropertyBundle | / | +---------------+ +-------------+ | | getter* | / | | | | +-------------------------------+ / | | | | / +---------------------------------------+ +--------------------------------------+ m_resources 0:n / | RemoteBinarySwitchResource | | RemoteTemperatureResource | +-------------------/ |---------------------------------------| |--------------------------------------| | | m_delegate (app api proxy) | | m_delegate | ◇ |---------------------------------------| |--------------------------------------| +------------------------------+ | setRemoteBinarySwitchResourceDelegate | [[2]] | setRemoteTemperatureResourceDelegate | | SHBaseRemoteDevice_Impl | | on/off [[3]] | | [set/get]Temperature | |------------------------------| | getState | | setTemperatureWithUnits | | m_resources | | [[8]] on[Get/Set/Observe] | | on[Get/Set/Observe] | | m_deviceTypes | +---------------------------------------+ +--------------------------------------+ | m_deviceId | ◇ ^ ^ ◇ |------------------------------| | m_delegate | | m_delegate | | [set/get][DeviceId/Types] | | | | | | hasDeviceType | | +------+ +-----+ | | getResourceWithResourceType | (abstract) v | | v (abstract) | getResourceWithResourceUri | +------------------------------------+ | | +-----------------------------------+ | getAllResources | | RemoteBinarySwitchResourceDelegate | | | | RemoteTemperatureResourceDelegate | | addResource (check type) | |------------------------------------| | | |-----------------------------------| +------------------------------+ | [[9]] onTurn[On/Off] | | | | on[Get/Set]Temperature | ^ | onGetState | | | +-----------------------------------+ | +------------------------------------+ | | △ | △ | | | | m_Impl | | | | ◇ | | | | +------------------------------+ (app) | [[10]] | | | (app) | SHBaseRemoteDevice | +---------------------------------------+ | | +-----------------------------------+ |------------------------------| | | | | | | | m_Impl | | MyRemoteBinarySwitchResourceDelegate | | | |MyRemoteTemperatureResourceDelegate| |------------------------------| | | | | | | | getDevice[Id/Types] | +---------------------------------------+ | | +-----------------------------------+ | getResourceWithResourceType | | | | getResourceWithResourceUri | | | +------------------------------+ | | △ | | | | | | | | on()--&gt;getPropertyBundle--&gt; DoRequest [[1]] | | | +------------------------------+ | |off()--&gt;setPropertyBundle--&gt; DoRequest | RemoteAirConditionerDevice | | | |------------------------------| m_remoteBinarySwitch | | | m_remoteBinarySwitch |◇ ------------------------------------------------+ | | m_remoteTemperature |◇ -----------------------------------------------------+ +------------------------------+ m_remoteTemperature","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Iotivity之Payload","date":"2018-05-10T04:41:16.000Z","path":"2018/05/10/Note/IOT/Iotivity-Payload/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Payload类图 1 Payload类图 +-----------------+ +-------------------+ |OCSecurityPayload|----------------------+ / | OCPresencePayload | |-----------------| | / |-------------------| | base | ▽ / | base | | | +-------------+ / | | | secureData/size | | OCPayload | ◁ ----------- | sequenceNumber | +-----------------+ |-------------| | maxAge/trigger | | type | | resourceType | +-------------+ +-------------------+ △ △ | | /--------+ | (inner) / | (outter) +---------------------+ / | +----------------------+ | OCDiscoveryPayload |/ +---------- | OCRepPayload | sid |---------------------| |----------------------| | | base | | base | deviceid | | | | | sid/name/type/iface | | uri/types/interfaces | +----◇ | resources | | values |◇ -----+ | |---------------------| |----------------------| | | | next | | next | | | +---------------------+ +----------------------+ | | | v OCRepPayloadCreate | +------------------------+ OCRepPayloadAppend v | OCResourcePayload | OCRepPayloadSetPropXXX +--------+ +-------------------+ |------------------------| | NULL | | OCRepPayloadValue | | uri/types/Interfaces | | INT | |-------------------| | anchor/port/secure/rel | | DOUBLE | | name | |------------------------| OCDiscoveryPayloadCreate | BOOL |&lt;---| propType | | next | OCDiscoveryPayloadAddNewResource | STRING | | value?(union) | +----------|-------------+ OCDiscoveryPayloadAddResource | OJBECT | |-------------------| | | ARRAY | | next | | +--------+ +-------|-----------+ link all filter ok source | | for collection using.","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Iotivity之Resource-Encapsulation","date":"2018-05-08T04:58:38.000Z","path":"2018/05/08/Note/IOT/Iotivity-RE/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Server端类图 Client端类图 Sample实例流程图 1 Server端类图 +----------------------+ | RCSRepresentation | |----------------------| | uri/types/ifaces | +-------------------------◇ | m_attributes | | | m_children | | |----------------------| | | | | | fromOCRepresentation | ------------------------\\ | | toOCRepresentation | \\ | | Getter/Setter | \\ | +----------------------+ \\ | \\ | \\ | \\ | \\ | \\ | +---------------------------+ +--------------------------+ \\ v | ResourceAttributesBuilder | | OCRepresentationBuilder | \\ +----------------------+ |---------------------------| |--------------------------| +--------------------+ | RCSResourceAttributes|&lt;----| m_target | | m_target |----&gt;|OC::OCRepresentation| +----------------------+ |---------------------------| |--------------------------| +--------------------+ | m_values | | extract() | | extract() | ^ +----------------------+ +---------------------------+ +--------------------------+ | | visit() | \\ / | +----------------------+ \\ / |m_ocRep ^ \\ / ◇ | +-------------------------------+ +--------------------+ | | ResourceAttributesConverter | | RequestHandle | | |-------------------------------| |--------------------| | | fromOCRepresentation | | m_errorCode | false | | toOCRepresentation | --&gt; | m_customRep |----+ | +-------------------------------+ / | m_ocRep | | | / |--------------------| | | +-----------------+ / | getRepresentation | | | | RCSGetResponse | / +--------------------+ | | |-----------------| m_handler | △ | | | m_handler |◇ -----------------------------+ | | | |-----------------| | | | | defaultAction |----+ +-----------------+ +-----------------------+ | | +------- | create | | | RCSSetResponse | | SetRequestHandler | | | | +-----------------+ | |-----------------| |-----------------------| | | | | | m_handler |◇ ------&gt;| | | | v | |-----------------| | applyAcceptanceMethod | | | create(attrs) ---&gt; m_customRep = true | | defaultAction |-----+ +-----------------------+ | | | | create | | | | | +-----------------+ | | +---------------\\ | | | \\ +-----------------------------+------------------------------+ \\ +------------------+ | \\ | RCSRequest | | +------------------------+ \\ +----------------------------+ |------------------| | | Builder | \\ | RCSResourceObject | &lt;------◇ | m_resourceObject | | |------------------------| \\ |----------------------------| | m_ocRequest | | | m_uri | \\ | | +------------------+ | | m_types | \\ | m_resourceHandle | ◇ | | m_interfaces | ----◇ | m_resourceAttributes | | m_ocRequest | | m_defaultInterface | OC_SECURE | m_interfaceHandlers | v | | m_properties |--&gt; OC_OBSERVABLE | m_getRequestHandler | +---------------------------+ | | m_resourceAttributes | OC_DISCOVERABLE | m_setRequestHandler | | OC::OCResourceRequest | | |------------------------| |----------------------------| |---------------------------| | | build() | | set[Get/Set]RequestHandler | | messageID,representation | | +------------------------+ | [get/set]Attribute | | devAddr, query, options | | | server | notify | | payload | | +-&gt; server = RCSResourceObject()-----------&gt; | sendResponse | | resourceHandle | | | | entityHandler (*) -------+ | requestHandle | | +-&gt; registerResource() | handleRequest | | |---------------------------| | | | handleObserve | +--------getRequestHandlerFlag-------+ | +-&gt; bindInterfaceToResource() +----------------------------+ | getRequestHandle | | | | +---------------------------+ | | +-&gt; bindTypeToResource() | | | +--------------------------------+-----+ | +-&gt; server-&gt;init() | RequestFlag ObserverFlag | | | | | v v | 1:n +--------------------------+ handleRequest handleObserve | g_defaultHandlers -------&gt;| InterfaceHandler | | | | |--------------------------| &quot;get&quot; | &quot;post&quot; | | | m_getBuilder | -----------+------------- | | | m_setBuilder | | | | | |--------------------------| v v | | | getGetResponseBuilder | handleRequestGet handleRequestSet | | defaultAction | getSetResponseBuilder | | | | | +--------------------------+ v v | | m_customRep=false m_getRequestHandler m_setRequestHandler | +---------+----------------------------------------------------\\ | | | | &quot;oic.if.baseline&quot; &quot;oic.if.a&quot; &quot;oic.if.s&quot; &quot;oic.if.b&quot; \\ v v | | | | | | \\ RCSGetResponse RCSSetResponse | | v | v | \\ | | | |buildGetBaselineResponse | buildGetRequestResponse | \\ +----------+------------+ | |buildSetBaselineResponse | NullPtr | \\ | | | v v \\ v | | (attrs) buildGetRequestResponse buildGetBatchResponse \\ sendResponse | | buildSetRequestResponse buildSetBaselineResponse \\ | +------------------------------------------------------------------------------------------------------------------------------+ 2 Client端类图 &quot;Caching data [attributes] of remote resource&quot; single instance +-----------------------+ +------------------------------&gt; | ResourceCacheManager | | 1:n |-----------------------| | +-----◇ | s_cacheDataList | 1:n &quot;Monitor the state of remote resource&quot; | | | m_observeCacheList |◇ ------+ +----------------------+ | +-----◇ | cacheIDmap | | | ResourceBroker |--------------+ | | | observeCacheIDmap |◇ ------+ |----------------------| | | | |-----------------------| | | s_presenceList |◇ --+ | | (cache attrs) | | requestResourceCache | | | s_brokerIDMap | | | | RCSResourceAttributes | | updateResourceCache | | |----------------------| |1:n | | ^ | | getCachedData | | | hostResource [[2]] | | | | | | | findDataCache | | | findResourcePresence | | | (cb-2) | | | +-----------------------+ | +----------------------+ | | +--------+ | attributes | | | | | |brokerId| | ◇ v v +----------+ | |brokerCB| | +--------------------------+ +--------------------+ | | +--------+ | | DataCache | | ObserveCache | +------------v---------------+ | ^ | |--------------------------| |--------------------| | ResourcePresence | | | | | sResource |◇ ---+ +---◇ | m_wpResource | |----------------------------| | |1:n | | attributes | | | | m_attributes | | requesterList |◇ --------+ | | subscriberList | | | | m_reportCB | | primitiveResource |◇ ----------------------\\ |--------------------------| | | |--------------------| | expiryTimer (5s) | | | \\ | [add/delete]Subscriber | | | | [start/stop]Cache | |----------------------------| | | | | getCachedData | | | | getCachedData | +----| registerDevicePresence | | | | | on[Observe/Get/Timeout] | | | | onObserve | | |[add/remove]BrokerRequester | | | | | notifyObservers | | | +--------------------+ | | [get/timeOut/polling]CB | | | | +--------------------------+ | | only observe | | executeAllBrokerCB (cb-2) | | | | | | | +----------------------------+ | | | | | | | | | | | | | | +-----------------------------------+ +-----------------------------------+---+---+ | | | RCSRemoteResourceObject | | | | | | |-----------------------------------| | | | | | | m_primitiveResource |◇ --------------------------------+ | | | | | | m_cacheId | | | | | | | | m_brokerId | | | | | | | |-----------------------------------| | | | | | | | [from/to]OCResource |-----------+ v v v v | | [[1]] | start[Monitoring/Caching] | | +--------------------------------+ | | | [get/set]RemoteAttributes | | | PrimitiveResource | | | | get[Address/Uri/Types/Interfaces]| | |--------------------------------| | | +-----------------------------------+ | | create |---+ \\ | ^ | [[3]]| request[Get/Set/Put][With] | | \\ |1:n ? one to one ? |cb-1 from|remote | get[Uri/Host/Types/Interfaces] | | \\ |resourcePresenceList | +----------------------+ | requestObserve | | \\ ◇ | | OC::OCResource | +--------------------------------+ | +------------------------------+ | |----------------------| △ | | DevicePresence | | | m_clientWrapper | | | |------------------------------| | |----------------------| | | | resourcePresenceList | | | uri/types/Interfaces | +-----------------------+ | | address | | |devAddr/useHostString | | PrimitiveResourceImpl | &lt;----+ | presenceSubscriber |◇ ---------- | | |-----------------------| +--------------------------------+ | presenceTimer (15s) | | \\ | serverHeaderOptions | &lt;-------◇ | m_baseResource | -------------------------------+ | PrimitiveResource | |------------------------------| | \\ | observeHandle | +-----------------------+ PrimitiveResource | |--------------------------------| | addPresenceResource | | \\ | children/endpoints | -------------------------------| | create |---+ | [subscribe/timeOut]CB | | \\ | headerOptions | create |---+ | request[Get/Set/Put][With] | | | [add/remove]PresenceResource | | \\ | | request[Get/Set/Put][With] | | | get[Uri/Host/Types/Interfaces] | | +------------------------------+ | \\ |----------------------| get[Uri/Host/Types/Interfaces] | | | requestObserve | | | &quot;/oic/ad&quot; | | get/put/post/observe | requestObserve | | +--------------------------------+ | | | | subscribe/publish | -------------------------------+ | △ | | | +----------------------+ △ | | | | v | | | | | +------------------------+ +-----------------------+ | | | PresenceSubscriber | +-----------------------+ | | PrimitiveResourceImpl | &lt;----+ | |------------------------| | PrimitiveResourceImpl | &lt;----+ |-----------------------| | | m_handle | |-----------------------| ------◇ | m_baseResource | | |------------------------| -◇ | m_baseResource | +-----------------------+ | | [un]subscribePresence | +-----------------------+ | +------------------------+ +-------------+ | | +------------------+ | +---------------------------+ +--------------+ --&gt; | RCSAddressDetail | | | RCSDiscoveryManager | | RCSAddress | / |------------------| | | ------------------------- | |--------------| / | m_addr | | | | | m_detail |◇ ---------/ |------------------| | | discoverResource ((1)) | |--------------| | getAddress | | | discoverResourceByType | | multicast | +------------------+ | | discoverResourceByTypes | | unicast | | +---------------------------+ +--------------+ | | ^ +-------------------------+ | | | | DiscoveryRequestInfo | | | | m_address |-------------------------| | +--------------------------------+ +------------------◇ | m_address | | | RCSDiscoveryManagerImpl | | m_relativeUri | | |--------------------------------| 1:n | m_resourceTypes | | | m_discoveryMap |◇ ------------------------------&gt;| m_discoverCb ((4)) | &lt;---+ | | m_timer | m_discoveryMap | m_knownResourceIds | | | |--------------------------------| | |-------------------------| | | | startDiscovery ((2)) |&lt;---+ | +---| discover | | ((4)) +---| onResourceFound (call cb-1) | |loop | | | addKnownResource | | | | onPolling(60s) |----+ | | +-------------------------+ | | | onPresence | | (erase) | | | | cancel |-------------+ v ((3)) | | | subscribePresenceWithMulticast | (id) OC::OCPlatform::findResource | | +--------------------------------+ | | OC::OCResource | +------------------------------------------------------------------------------------------------------+ std::function DiscoverCallback 3 Sample实例流程图 SampleResourceServer RCSRemoteResourceObject SampleResourceClient | | ((1)) | |--&gt; startPresence |(param:rro) discoverResource &lt;--| 1 | | | |--&gt; initServer | discoverResourceByType | | (server use) cb-1 v | | | g_resource (RCSResourceObject) onResourceDiscovered | | | | ((4)) | ((2)) | | | |--&gt; setAutoNotifyPolicy | startDiscovery &lt;--| | | |--&gt; setSetRequestHandlerPolicy | | | | | | | m_discoveryMap.insert | | | | |--&gt; setAttribute(&quot;Brightness&quot;) | | | | |--&gt; setGetRequestHandler ---------+ | discovery &lt;--| | | |--&gt; setSetRequestHandler ---------+ | ((3)) | | | | | | | findResource &lt;--| | | | | |&quot;/oic/res?rt=oic.r.light&quot; | loop |--&gt; updateAttribute | | | | | |--&gt; rro-&gt;getUri | | g_resource (RCSResourceObject) | | | | | | |--&gt; rro-&gt;getAddress | | |--&gt; getAttributes | | | | | | |--&gt; g_discoveredResources.push_back(rro) | | |--&gt; getAttributeValue | | | | | | (client use) | | g_selectedResource (RCSRemoteResourceObject) | +----------------------------------------+------------+ | | | | | | [[1]] | v v cb-2 startMonitoring &lt;--| 2 requestHandlerForGet requestHandlerForSet onResourceStateChanged | | | | [[4]] | [[2]] | | | | | hostResource &lt;--| | | RCSGetResponse RCSSetResponse | | | | | | | | | initializeResourcePresence | | | | defaultAction | | addBrokerRequester &lt;--| | | +--------------------------------+ | | | | | | | [[3]] | | | | | | requestGet &lt;--| | | +-------------------------------\\ | | | \\ | (polling) | | \\ |--&gt; do nothing | | \\ | | | \\ | | \\ | | v cb-3 [get/set]RemoteAttributes &lt;--| 3 | onRemoteAttributesReceived | | | / | | | | (param) / | request[Get/Set] &lt;--| | | / | | | | / | request[Get/Set]With | | RCSResourceAttributes | | | ^ | | | | | | | ◇ | | RCSRepresentation | | \\ | | (param) \\ [get/set]WithInterface &lt;--| 4 | \\ cb-4 | | | \\ onRemote[Get/Set]Received | | if |--&gt; &quot;interface == test.custom&quot; | &quot;?if=test.custom&quot; | | | | | | | | |--&gt; attr[&quot;blob&quot;] = bin (new attr) | request[Get/Set]With &lt;--| | | | | | | | |--&gt; RCSGetResponse::create(attr) interfaces is empty | | | | | resourceTypes is empty | | | | m_customRep = true -----------------------------&gt; | | | | key : blob | | | | | else|--&gt; &quot;interface != test.custom&quot; | | | | | | | | | | | |--&gt; RCSGetResponse::defaultAction() | | | | g_defaultHandlers | | | | m_customRep = false -----------------------------&gt; | | | | | | &quot;oic.if.baseline&quot; &quot;oic.if.a&quot; &quot;oic.if.s&quot; &quot;oic.if.b&quot; | | | | | | startCachingWithCallback &lt;--|5 (observes) cb-5 | | subscriberList.findSubscriber(reportID) onCacheUpdated | | \\ ^ | | | \\ | | requestResourceCache &lt;--| | +-----------------+ | | | | | | +-------------+ | | | OBSERVE_WITH_POLLING | | | | | Report_Info | | +-&gt; NONE | | UPTODATE (10s) | | | |-------------| | | | | | | | | rf |---+-&gt; UPTODATE | | DataCache.init &lt;--| | | | reportID | | | | | | | | | | repeatTime | | +-&gt; PERIODICTY | | | | | | | timerID | | | | ObserveResource | | | | +-------------+ | | | | | | | | | | onGet onTimeOut | | | | +-------------+ | | | | | | | | | | fun |-------------------+ | | | (15s) | | | | +-------------+ | | | onObserve | | | | (main thread) +-----------------+ | | | | | | | runResourceControl | +---+ | | | | | | | addSubscriber &lt;--| | | | call v v | | |--&gt; updateAttribute |&lt;-- notifyObservers | | | { | (client) | | | RCSResourceObject::LockGuard | foreach: | | \\ notifyAllObservers | subscriberList | | } \\ (server) | | | autoNotify -----------------&gt; | | | DoResponse | | | | | getCachedAttributes &lt;--|6 | | | | | | getCachedData &lt;--| |","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Iotivity之Colloction流程","date":"2018-04-27T07:02:43.000Z","path":"2018/04/27/Note/IOT/Iotivity-Batch-LinkedList/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 资源Collection类图 Sample流程图 1 资源Collection类图 ((1)) +---------------+ OCBindResourceInterfaceToResource | room | |---------------| /a/room &lt;--| uri | (must first) core.room &lt;--| type | +-----------------------+ | interface |---&gt; |oic.if.baseline| next | | | +-------------------|---+ ((2)) +---------| childresHead | | OCBindResource | | entityHandler |----+ v | |---------------| | +----------------+ | | next | | |oic.if.b | next | | +---------------+ | +------------|---+ | | | v | v +---------------+ | +-----------------+ | fan | | |oic.if.ll | null | |---------------| v +-----------------+ /a/fan &lt;--| uri | roomCB core.fan &lt;--| type | oic.if.baseline &lt;--| interface | | | | childresHead | | entityHandler |---&gt; fanCB |---------------| +---------------+ | next -------------------------&gt; | light | +---------------+ |---------------| /a/light &lt;--| uri | core.light &lt;--| type | oic.if.baseline &lt;--| interface | | | | childresHead | | entityHandler |---&gt; lightCB |---------------| | next | +---------------+ 2 Sample流程图 HandleVirtualResource | ((3)) | OCDoRequest | | uri = &quot;/ioc/res&quot; | &quot;discover&quot; | ----------------------------------------&gt; | ((4)) | all resoures | | &lt;---------------------------------------- | | (if childresHead is not null) | ((5)) ((6)) | cb = discoveryReqCB HandleResourceWithEntityHandler | | | | | | ((6)) (default) OCDoRequest | HandleCollectionResourceDefaultEntityHandler | | | | &quot;/a/room?if=oic.if.b&quot; roomCB != 0 | | &quot;get&quot; | --------------------------------------------&gt; | roomCB == 0 | | &quot;/a/room?if=oic.if.ll&quot; (default) | ---------------------&gt; | | &quot;/a/room?if=oic.if.baseline&quot; ((7)) | | | roomCB &lt;-- | (get) | (get/put/post) | | | ---+----------------------+--- | (room,fan,light) | | | | OCRepPayloadSetPropInt &lt;--- | v v | OCRepPayloadAppend | oic.if.ll oic.if.b | | | oic.if.baseline | | &lt;----- OCDoResponse --- | | | | | ((7)) v ((7)) v | HandleLinkedListInterface HandleBatchInterface | (fan, light) | | | OCLinksPayloadArrayCreate &lt;---- | | | OCRepPayloadSetPropObjectArray | | | | | | | | foreach (child) +-- | &lt;------------------- OCDoResponse -------- | | | | lightCB &lt;-------- | &quot;light&quot; ((8)) | | | | cb = getReqCB | | &lt;------------------- OCDoResponse -----------------------------------| | | | | | | | | fanCB &lt;----------------- | &quot;fan&quot; | | | | | | +-- | &lt;------------------- OCDoResponse ---------------------------| | | | | OCDoRequest HandleResourceWithEntityHandler | | | (see above) | &quot;put&quot; | -------------------------------------------------------&gt; | | | | |","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Iotivity之Presence&Observe流程图","date":"2018-04-26T03:00:21.000Z","path":"2018/04/26/Note/IOT/Iotivity-Presence-Observe/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Presence流程图 Observe流程图 1 Presence流程图 ========Server===============================SDK===========================================Client============ SERVER ((1)) Platform::start OCInit2 ((2)) &quot;/oic/ad&quot; +------------------+ OCCreateResource --------&gt; | OCResource | ----&gt; |------------------| +-----------------+ / | uri,type,if,uuid | (no active) |PresenceResource | / | attrs,propers |----&gt; OC_OBSERVABLE |-----------------| handle / | actionsetHead | ^ | handle | ----------/ | childresHead | | | presenceTTL | /----- | observerHead | | +-----------------+ / | entityHandler | | / |------------------| | ((3)) observerHead / | next | | startPresence /------------------------------- +------------------+ | / ((4)) | / OCStartPresence | v OC_ACTIVE | +-------------------+ ChangeResouceProperty ---------------------+ (active) | ResourceObserver | TTL=0 |-------------------| &lt;------------ AddObserver | observeId | OCPresenceTrigger | resUri | SendPresenceNotification | see ? &lt;---+-TTL | | +--------+--------+ ocobserve.h | acceptFormat | | | | | | query,token | | v v v | devAddr | | CREATE CHANGE DELETE | lowQosCount (NON)| | | | | | forceHighQos (CON)| | OCCreateResource | OCDeleteResource |-------------------| | +-----------------------------------+ | next | | | OCBindResource (collection) | +-------------------+ Trigger: CREATE | | OCBindResourceTypeToResource | +------------------------------------------------------+ | OCBindResourceInterfaceToResource | | +------------+ +-----------------------------------+ | | OCPresence | | |------------| CLIENT | | TTL | | | timeout[l] | g_cbList [[1]] | | level | | thread2 Platform::start | +------------+ v OCInit2 listeningFunc | ^ +-------------------+ | | | | ClientCB | &quot;/oic/ad&quot; | [[2]] | | |-------------------|\\ /-----------------------+----- subscribePresence | | | requestUri | \\ [[3]] / SubscribeCallback | | | | sequenceNumber | \\ OCDoResource | | | +---| presence, TTL | \\ / +-----------+--------\\ thread2 | | payload, method | \\ / | ---&gt; presenceHandler | | callback (cb-1) | AddClientCB | cb-1 | +-------------------+ ( Don&#39;t Call OCSendRequest ) | | | | loop: | | ((5)) | thread2 | | createResource | --&gt; OCProcess | | ((6)) | | | | OCCreateResource | | | | | | | +----------------------------+ | | | v | | +--------&gt; SendPresenceNotification | | | SendAllObserverNotification | | | | | | | | v | &quot;/oic/ad&quot; ((7)) &quot;/oic/ad&quot; | | | AddServerRequest +-----------------&gt; OCSendResponse -------------------------------&gt; | | | \\ | | | \\ | | | \\ [[4]] ((8)) | | | g_svrRequestTree \\ OCHandleResponse &lt;------------------------------ | | | | +-------------------+ | | | | +----&gt; | OCServerRequest | | HandlePresenceResponse | | | |-------------------| | | | | | resourceUrl,reqID | | client = GetClientCBUsingUri(&quot;/oic/ad&quot;) | | | | reqToken, query | | | | | | payload, method | | ResetPresenceTTL | | | | ehResponseHandler | | | | | +-------------------+ | client-&gt;callback | | | | -------------------------------------------|-------&gt; | [[5]] | | | | thread2 | | | processFunc [[6]] | | | | OCProcessPresence | | | loop: | | | | | check ttl | | | --&gt; OCProcess ( only unicast make sense ) | | | | | | | | | | &quot;/oic/ad&quot; [[7.1]] check timeout[l] | | | | | &lt;---------------- OCSendRequest &lt;---------------------------- | (Unicast) | | | | timeout &quot;/oic/ad&quot; | | | | | ((9)) [[8]] | check level | | | | ----------------&gt; OCHandleRequests | -----------&gt; | | | / | no ticks | [[7.2]] | &quot;/oic/ad&quot; / | STACK_PRESENCE_TIMEOUT | HandleVirtualResource | | Trigger: CHANGE | DeleteClientCB &lt;--------------------- | +-----------------------------------+ STACK_DELETE_TRANSACTION / KEEP 2 Observe流程图 |OC_REST_OBSERVE| &lt;--------- observeResource &lt;--- OC::OCRecource::observe | &lt;------------ | Observers.insert | | onObserve | | cb | | | | | | | loop +----- | | | | | | | | | | | OCDoResponse | | | notifyListOfObservers | ------------------|-------------&gt; | wrapper switch | | | | | ------------------------------&gt; | | | | | +----&gt; | |","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Iotivity之Client&Server回调流程图","date":"2018-04-25T10:32:50.000Z","path":"2018/04/25/Note/IOT/Iotivity-Client-Server/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} C++层类图 C-S流程图 1 C++层类图 Client ---&gt; OC::OCResource ---&gt; InProcClientWrapper ---&gt; CSDK | | OC::OCRepresentation | | Server ---&gt; OC::OCResourceRequest ---&gt; OC::OCResourceResponse ---&gt; InProcServerWrapper ---&gt; CSDK +-------------------+ +---&gt;|OCResourceResponse | | |-------------------| +-------------------+ | | newResourceUri | | | | | interface | v | | | headerOptions | representation +--------------------+ | | | representation |◇ --------------&gt; | OCRepresentation | | | | requestHandle | (report) |--------------------| | | | resourceHandle | | host/uri/types/ifs | 1:n | | |-------------------| | m_children |◇ -----+ | | getX/setX | |--------------------| | +-------------------+ | [get/set]Value (*)| | | | | | setter/getter | | +--------------------+ | | | | | | get/put/post | +---------------------------------------+ +--------------------+ | | representation | | | (update) | | ◇ | | +---------------------------+ +----------------------+ | | OC::OCResourceRequest | | OC::OCResource | | |---------------------------| +----------------------+ |----------------------| +----------------------+ | | messageID,representation | | InProcServerWrapper | | m_clientWrapper |◇ ---&gt;| InProcClientWrapper | | | devAddr, query, options | |----------------------| |----------------------| |----------------------+ | | payload | | start/stop | | uri/types/Interfaces | | start/stop | | | resourceHandle | | registerResource | |devAddr/useHostString | | ListenForResource | | | requestHandle | | | | | | | | |---------------------------| | bindxxxToResource | | serverHeaderOptions | | xxxRepresentation | | | getX/setX | | [type/interface] | | observeHandle | | [Get/Put/Post] | | +---------------------------+ | | | children/endpoints | | | | ◇ | startPresence | | headerOptions | | ObserveResource | | | requestHandle | sendResponse | | | | SubscribePresence | | | |----------------------| |----------------------| |----------------------| | v | processFunc | | get/put/post/observe | | listeningFunc | | +---------------------+ +----------------------+ | subscribe/publish | +----------------------+ | | OCServerRequest | +----------------------+ | |---------------------| | | ehResponseHandler | | +--------+------------+ | | | v | HandleSingleResponse | | | | +------------+ 2 C-S流程图 SERVER CLIENT OC::OCResource entityHandler stack FoundResource cb uri-1 | cb call-1 simpleserver | | | simpleclient | | | Platform::registerResource | | | Platform::findResource | | | | | | &quot;/a/light&quot; |OCCreateResource | | | +-----------------+------------------------&gt; | OCDoResource | &quot;/oic/res&quot; | | OCResourceRequest | &lt;-------------------------+----------------+ | &lt;----------------------- | | | OCDoResponse | | curResource Platform::sendResponse | -----------------------&gt; | OCResource | || | | ------------------------&gt; | &quot;/a/light&quot; | | OCDoResource | | OCResourceRequest | &lt;------------------------ | GetResourceRepresentation doGet | &lt;----------------------- | onGet | | | cb | Platform::sendResponse | -----------------------&gt; | OCResource | | | -------------------&gt; | | | OCDoResource | | | &lt;--------------------| PutResourceRepresentation doPut | &lt;----------------------- | onPut | | | cb | Platform::sendResponse | -----------------------&gt; | | | | -------------&gt; | | | | | | &lt;------------- | PostResourceRepresentation doPost | &lt;----------------------- | onPost | / | | cb | / | | | / | | | FoundResource / | entityHandler | | cb call-2 / | cb uri-2 | | | Platform::registerResource | | | | | Platform::findResource | | | | | | | | &quot;/a/light1&quot; | | | | | | +-----------------+----------|-------------&gt; | | | | | | | &lt;---------|---------------+----------------+ | &lt;--------|-------------- | | | | | | | | curResource Platform::sendResponse | ---------|-------------&gt; | | | || | | | ----------|-------------&gt; | &quot;/a/light1&quot; | | | | | Platform::sendResponse | ---------|-------------&gt; | --------&gt; | | | | | | | | | | &quot;/a/light1&quot; |OC_REST_OBSERVE| &lt;-------- | observeResource &lt;--- OC::OCRecource::observe | &lt;------------ | Observers.insert | | onObserve | | cb | | | | | | | loop +----- | | | | | | | | | | | OCDoResponse | | | notifyListOfObservers | ------------------|-------------&gt; | wrapper switch | | | | | ------------------------------&gt; | | | | | +----&gt; | | | | | | | ChangeLightRepresentation presence/representation thread3","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Iotivity之请求响应流程图","date":"2018-04-24T08:40:06.000Z","path":"2018/04/24/Note/IOT/Iotivity-Request-Response/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} CA连接抽象层 Handle层 1 CA连接抽象层 (thread3/4/5) CAQueueingThreadBaseRoutine | CAQueueingThread | +-----------------------------+ queue_get_element &lt;--| | | | | | threadTask | dataQueue *|---------------------- | | | | \\ | +-----------------------------+ \\ (sendThread/receiveThread) \\ v +----------------+ | next | +--------------------------------------------------------+ | +----------+ | | thread5 +-------------+ | | | msg,size | | | \\ | | | | +----------+ | ((7))v \\ v | |((6) +----------------+ sendDataToAll ---- sendData CASendUnicastData CASendMultica | ^ ^ ^ ^ | | g_adapterHandler | | | v +---------+---------+ +-----------+----------+ +----------------+ | | | next | | | | +----------+ | get put post delete | +---------------------------------|-------------+ | | msg,size | | | | | | | | (x) | | | +----------+ | ---------------- | | CAReceiveThreadProcess | CASendThreadProcess | +----------------+ ^ | | | thread3 | | | +-----------------------------------------------+ CA_REQUEST_DATA &lt;--| | ^ | | code | thread4 r-3 | | CA_SIGNALING_DATA &lt;--|------+--- CAReceivedPacketCallback ------+-------\\ | | | | get code/token from PDU | \\ queue_add_element &lt;--| CA_RESPONSE_DATA &lt;--| | | | \\ | | | g_receiveThread g_sendThread \\ | | | ^ ^ \\ r-4 ((5)) | [[3]] | +-----+ | CAQueueingThread | ----------------&gt; CAQueueingThreadAddData | set | +---------+---------+ ^ | | | | +-------------------------------+-----------+-------------+---------------------------------------------------+--------------+ | DIR: connectivity | | | | | | | | | | | interfacecontroller | | retransmission | | | | | | | | | | | | | | | connectivitymanager | | messagehandler | queueingthread | | | | | | | | | +--------+----------------------+-----------+-------------+--------------------------+------------------------+--------------+ | | | | | | h-1 | | | h-2 | | h-4 | CAInitialize | | CAInitializeMessageHandler | CAQueueingThreadInitialize | | / | CAQueueingThreadStart | | /CAReceivedPacketCallback | (thread create) h-3 | r-1 v / | CASetPacketReceivedCallback | CASetErrorHandleCallback | h-5 | g_adapterHandler --------------\\ CARetransmissionInitialize \\ CARetransmissionStart \\ 1...n CAInitializeRA CAInitializeNFC ------------------------\\ \\ / \\ +--------------------------+ \\ / -----------&gt; | CAConnectivityHandler | h-6\\ transtype / r-2 |--------------------------| CAInitializeAdapters +--&gt; CAReceivedPacketCallback &lt;--------startAdapter (thread4/5) | / | \\ | | stopAdapter | / | \\ +--&gt; CAAdapterChangedCallback | startListenServer | / | \\ params | | stopListenServer | CAInitializeTCP CAInitializeEDR CAInitializeIP ---+--&gt; CAConnectionChangedCallback | startDiscoveryServer | | | sendData (unicast) | non +--&gt; CAAdapterErrorHandleCallback | sendDataToAll (muticast) | h-7 | | getNetInfo ((8)) | CASelectNetwork +--&gt; CARegisterCallback -----------&gt; | readData | handler | terminate | | transportType | h-8 h-9 +--------------------------+ CARegisterHandler CASetInterfaceCallbacks / | \\ / | \\ / | \\ / | \\ / | \\ call / | \\ Request Response Error &lt;--- g_requestHandler g_responseHandler g_errorHandler cb-a cb-b cb-c cb-a cb-b cb-c 2 Handle层 | |--&gt; g_receiveThread h-11 | r-6 +--------------------------------------------&gt; CAHandleRequestResponseCallbacks (queue_get_element) | thread2 | +---------------------------------+ g_serverRequestTree | | HandleVirtualResource | call cb-1 | | | HandleResourceWithEntityHandler | -----&gt; resource-&gt;entityHandler() |GetServerRequestUsingToken | | HandleDefaultDeviceEntityHandler| | | +---------------------------------+ /----&gt; resouce = FindResourceByUri(request-&gt;resourceUrl) v | ^ / +---------------------------------------------------------------+ | h-12 | / +--&gt;| OCServerRequest |&lt;-----------------+ | ProcessRequest +-------------/ | |---------------------------------------------------------------| | | ^ | | | method, resourceUrl, acceptFormat, payloadFormat, devAddr | | | | (by uri) | | | numResponses, qos, options, observeResult, delayedResNeeded | | |DetermineResourceHandling | | ehResponseHandler, requestId, requestToken, coapID, query | | | ^ | +---------------------------------------------------------------+ | | | AddServerRequest----+ | ehResponseHandler | | | +3 +2 ^ [[2]] v cb-3 | | | | HandleSingleResponse | | HandleStackRequests | | | ^ | +1 v | | | | OCSendResponse ---&gt; CASendResponse ---&gt; CAQueueingThreadAddData | | | | | | | +--&gt; GetServerRequestUsingToken +----&gt; GetClientCBUsingToken &lt;-----------+ | | | | | | | | | | | | | | OCHandleRequests OCHandleResponse | cb-2 | | | ^ ^ client-&gt;callback() | | | cb-a | thread2 cb-b | cb-c | | | HandleCARequests [get|put|post|delete] HandleCAResponses HandleCAErrorResponse | | ^ ^ ^ | | | r-7 | r-7 | r-7 | | +------------------------------------------.------------------------------------------+ | | receive | handle | | | | 启动架构 ======== CSDK | +-----------------------------+ | | | | | OCInitializeInternal | | server sample | ^ | client sample | +-----------------------+ | | | +----------------------+ | | | | | | | | | |Platform::start() ----------------+--------&gt; OCInit2 &lt;----------+----------------- Platform::start()| | | | | | | | | | | | | | | | | | | +--------------+ | | v | | +--------------+ | | | | start | | | init core resources | | | start | | | | | | | | | | | | | | | | | |thread2 | r-5 | thread2| | | | | | | processFunc ---------------+-------&gt; OCProcess &lt;---------+----------------- listeningFunc| | | | | | | | | | | | | | | | +--------------+ | | | | | +--------------+ | | | wrapper | +-------------+---------------+ | wrapper | | | | | | | | +-----------------------+ | +----------------------+ | main thread /--------+ main thread | / | /------------------/ | / | h-10 v | +-- CAHandleRequestResponse | | CS交互API框图 ============= | | | | RPC &lt;--------- | ---------&gt; RPC | | | a | 1 | OCDoResponse | OCDoRequest | \\ / | +------------\\--------------------/------------+ | | \\ b 2 / | | SERVER | CASendResponse CASendRequest | CLIENT | | \\ / | | ^ | \\ c 3 / | ^ | | | CADetachSendMessage | | | | | ^ | | | --------- | | | --------- | | | d v 4 | | | | | CAHandleRequestResponse | | | v | / \\ | v | | e / \\ 5 | | CLIENT | HandleCAResponses HandleCARequests | SERVER | | / \\ | | +------------/--------------------\\------------+ | f / \\ 6 | OCHandleResponse OCHandleRequests | Sample流程 ========== | =================server==================================sdk======================================================== | | 1 | Platform::registerResource | | cb-1 | |(uri,type,interface,attr,eHandler) 2 | +----------------------------------&gt; OCCreateResource | thread2 insertResource headResource | | | +----------------+ | | | OCResource | &lt;---------+ (resourceHandler) &lt;-------------------+ | OCResourceType |----------------| | | +-------------+ | uri | OCResourceInterface | | | next | name | &lt;----| resType | +-------------+ | | +-------------+ | resInterface |-----&gt; | name | next | | | OCResourceProperty | resAttributes |-----+ +-------------+ | | +------+--------+-----+---------| resProperties | | uri | | | | | | | actionsetHead | | OCAttribute OCF only for platform | | | v | v +-----| childresHead |---+ | +---------------------+ and device info | | | discoverable | active | +---| observerHead | | +-&gt; | name | value | next | | | | | | | | entityHandler | | +---------------------+ | | v v | | | uuid (cb-1) | | | | slow observable / | |----------------| | OCChildResource | | / | | next | | +-----------------+ | | +------ | +----------------+ +---&gt; | resource | next | | | OCActionSet v | +-----------------+ | | +-------------------------+ | | | | name | timesteps | type | v ResourceObserver | | |-------------------------| +-------------------------------------------------+ | | | head | next | | id | uri | query | token | devAddr | qos | next | | | +-------------------------+ +-------------------------------------------------+ | | | | =========================================================sdk======================================client============ | | | | ((1)) | | Platform::findResource | | | | | ((2)) | | | gen: resHandle &amp; token OCDoResource &lt;----------------------------------+ | | /---------------------------- OCDoRequest (host, uri, conntype, callback) | | / | cb-2 | | ((3)) / | | | AddClientCB [Find|Get|Put|Post]Callback | | +--------------------+ | | g_cbList ----------------------------&gt; | ClientCB | | | |--------------------| +--&gt; con | | text &lt;---+ | callback(cb-2) | | | | GetClientCBUsingUri | | handle (random) | +--&gt; non | | GetClientCBUsingToken xml &lt;---+ | type |------| | | GetClientCBUsingHandle | | token (random) | +--&gt; ack | | json &lt;---+ | options | | | | | | payload | +--&gt; reset discover | | cbor &lt;---+---------| payloadFormat | ^ | | ip &lt;---+ | context | | | | | +---------------+ | method +---+-----+-----+-----+-----+---+ | | bluetooth &lt;---+ | OCDevAddr | | sequenceNumber | | | | | | | | | |---------------| | requestUri | v v v v v | | nfc &lt;---+---| adapter |&lt;---------| devAddr | get put post delete observe | | | | flags | |--------------------| | | nfc &lt;---+ | port | | next | | | | | addr | +--------------------+ | | xmpp &lt;---+ |---------------| | | | routeData | | | | remoteId | ((4)) | | +---------------+ OCSendRequest ---&gt; CASendRequest ---&gt; CAQueueingThreadAddData | | | | | | =================server==================================sdk======================================================== | | | | entityHandler (request) | | [[0]] | | | | | | | | [[1]] | | (param) Request ----&gt; Response | | Platform::sendResponse (response) &lt;--| | | | | | | | | | (response) | [[2]] | | +----------------------------+---&gt; OCDoResponse ----------- call | | Wrapper: | | | ------+ | csdk -----&gt; requestHandle-&gt;ehResponseHandler | | c++ +---------------------------+ | | +------------------------+ cb-3 | | | OCResourceRequest |&lt;------------+ | OCEntityHandlerRequest | | | |---------------------------| | |------------------------| resource (resourceHandle) | | | messageID,representation | | | method, resource |--------------------------------------+ | | devAddr, query, options | | form | devAddr, query | | | payload |&lt;------------------------| options | | | requestHandle | | | payload | requestHandle | | resourceHandle | | | requestHandle |------------------------------------------+ +---------------------------+ | | messageID | | | | (param) +------------------------+ | handle | get/put/post | csdk | v | +------------------------+ | c++ +-------------------+ | |OCEntityHandlerResponse | | |OCResourceResponse | &lt;------+ |------------------------| requestHandle | |-------------------| form | requestHandle |------------------------------------------+ | newResourceUri |-----------------------&gt;| ehResult | | interface | | resourceUri | | headerOptions | | resourceHandle(x) | | representation | | payload | | requestHandle | +------------------------+ | resourceHandle | +-------------------+ ```","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)MediaBinder-草稿","date":"2018-03-08T08:47:05.000Z","path":"2018/03/08/Note/Android/MediaBinder/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 源码 MediaBinder 1 总结 音视频媒体播放机制主要在binder. BpBinder是个代理, 主要传输工作交给了ICPThreadState类. Interface用来制订业务, Binder用来实现通讯, 分工明确. 通讯属于C-S模式, Bnxxx是本地对象, Bpxxx是代理对象, 一端是本地服务, 另一端是远程代理. 本地&lt;-&gt;代理 类型的转换是在kernel中binder.c文件的binder_transaction函数中实现的. binder_transaction函数会为代理生成handle, 在用户空间通过ProcessState::getStrongProxyForHandle创建BpBinder代理. Parcel类readStrongBinder和writeStrongBinder记录或还原obj的type, binder, cookie. Binder驱动层面的结构体未在图中体现. 需要单独分析.","tags":[{"name":"Android","slug":"Android","permalink":"https://qrsforever.github.io/tags/Android/"}]},{"title":"(原创)万物互联之腾讯Shadow","date":"2018-02-06T02:01:00.000Z","path":"2018/02/06/Note/IOT/QCloud_Shadow/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Shadow学习 1.框架API接口 2.静态类图 3.时序图 4.设备影子接口 5.Sample回调函数 6.调试运行Sample 1 Shadow学习 1.1 1.框架API接口 ---------------------------------------------------------------------------------------------------------------- Sample on_request_handler on_message_callback on_prop_xxx_callback event_handler register_subscribe_topics register_config_property do_report_prop_xxx() ---------------------------------------------------------------------------------------------------------------- Shadow ^ | IOT_Shadow_Register_Property | | | IOT_Shadow_Update IOT_Shadow_Get IOT_Shadow_Subscribe IOT_Shadow_Yield | | ----------------------------------------------------------------------------------------------------------- SDK MQTT | IOT_MQTT_Publish IOT_MQTT_Subscribe IOT_MQTT_Yield | | send_mqtt_packet read_mqtt_packet | v ---------------------------------------------------------------------------------------------------------------- 1.2 2.静态类图 +------------------+ +-----------------+ +------------------+ | Request | +------------------+ | SubTopicHandle | | RequestParams | +------------------+ | PropertyHandler | +-----------------+ +------------------+ | client_token | +------------------+ | qos | | method | copy | method | | property | | topic_filter | | timeout_sec |-----------&gt;| timer | +------------------+ | message_data | | user_context | | user_context | | callback | +-----------------+ +------------------+ +------------------+ +------------------+ | message_handler | | request_callback | | callback | | +-----------------+ +------------------+ +------------------+ | ^ | | | | | | | +------------------+ | | | | ShadowInnerData | | | | +------------------+ | | | | token_num | | | | | version | | | +----------| request_list | | | List | property_list |--------+ | | result_topic | List | +------------------+ | ^ | \\ | \\ +-------------------+ | \\ | Qcloud_IoT_Shadow | | \\ +-------------------+ mqtt | \\ | mqtt |◆ ----+ | +----------------------+ +----------------------+ -------◇ | inner_data | | | | ShadowInitParams | | MQTTInitParams | +-------------------+ | | |--------------------- | |------------------ | | event_handle | | | | product_id | copy | product_id | +-------------------+ | | | device_name |----------&gt;| device_name | ◆ | | | cert_file | | cert_file | | event_hander | | | cert_key | | cert_key | | | | | auto_connect_enable| | auto_connect_enable| | | | +----------------------+ +----------------------| | | | | event_handle | | event_handle | v | | +----------------------+ +----------------------+ +-------------------+ | | ◆ ◆ | MQTTEventHandler | | | | | event_handle +-------------------+ | | | event_handle +------------------------------------&gt; | context | | | +-----------------------------------------------------------------------&gt; +-------------------+ | | | h_fp | | | +--------------------+ +-------------------+ | | | Qcloud_IoT_Client | ^ | | +--------------------+ | | | +--------------------◇ | network_stack | | | | | ◇ | options | | | | | / | list_pub_wait_ack | | | | v / | list_sub_wait_ack | | | | +----------------+ / +--------------------+ | | | | Network | / | event_handle |◆ -----------+ | | +----------------+ | | sub_handles | | | | sockfd | | +--------------------+ | | +--------------◇ |ssl_conn_params | | ◇ ^ | | | +----------------+ | | \\ | | | | connect | | | \\--------------------------------+ | | | read | | | | v | write | | +------------------------------------------------+ +-----------------+ +----------------+ | |SSLConnectParams | | +-----------------+ v | host | +----------------------+ | port | | MQTTConnectParams | | cert_file | +----------------------+ | key_file | | client_id | +-----------------+ | conn_id | | auto_connect_enable | | keep_alive_interval | +----------------------+ 1.3 3.时序图 Shadow MQTT ******* Aircond *** *** Qcloud Shadow Door | * host:port * | | | *** *** | | init_shadow_params ******* | | | | | | | +------&gt; Shadow_Construct &quot;$shadow/operation/result/P/D&quot; | | | | (cb1) | | |\\ +--------&gt; MQTT_Construct | | | \\ | |&lt;---------+ | | \\ | sub | | | | \\ MQTT_Subscribe ----------------------&gt; | | | | +------&gt; Shadow_Get[_Sync] | | | | | pub | | | | +--------&gt; MQTT_Publish -------------------------&gt; | | | register_config_property | | | | | | | | | +------&gt; Shadow_Register_Property | | | | | | | register_subscribe_topics | | | | | &quot;P/D/control&quot; &quot;P/D/xxx&quot; | | &quot;P/D/event&quot; | | +------&gt; Shadow_Subscribe (cb2) (cb3) | | pub | | | sub | | &lt;-------------------------| | +--------&gt; send_mqtt_packet -----------------------&gt; | | { | | | | &quot;action&quot;: &quot;come_home&quot;, | +---&gt; loooooop | | &quot;targetDevice&quot;: &quot;airCon&quot; | | | | | } | | +---------&gt; Shadow_Yield | | | | | | | | | +--------&gt; MQTT_Yield | | | | | | | | | | | | | | read_mqtt_packet &lt;------------------------- |-repub &lt;--| | | packet type: | | | | | --------------------------------------------- | | | | | | | | | | | | | v v v v v | | | | CONNACK PUBACK SUBACK PUBLISH PINGRESP | | | | \\ \\ | / / | | | | \\ v v v / | | | | --------&gt; handle_xxx_packet &lt;-------- | | | | | | | | | | | | | | on_operation_result_handler &lt;----+----&gt; on_message_callback cb3 | | | | (cb1) (cb2) | | | | | | | | | | | | | | | | +---------+----------+ | | | | | delta | | client_token | | | | | v v | | | | | on_prop_xxx_callback on_request_handler | | | | | v | | | | --------------------------------------------------------------------- | | | | / | | | | / | | | | / | | | | deal_with_desired | | | | | | | | | | | | | | do_report_prop_xxx | | | | | | | | | +--------&gt; Shaow_Update[_Sync] | | | | | pub | | | | +--------&gt; MQTT_Publish --------------------------&gt; |----------+ | | &quot;$shadow/operation/P/D&quot; | | +----- eeeeend | | | | | | | +---------&gt; Shadow_Destroy | | | | | END | | 1.4 4.设备影子接口 1. IOT_Shadow_Construct 原型: void* IOT_Shadow_Construct(ShadowInitParams *pParams); 功能: 构造ShadowClient 参数: pParams: 连接接入与连接维持阶段所需要的参数 返回: 0: 失败 2. IOT_Shadow_Destroy 原型: int IOT_Shadow_Destroy(void *handle); 功能: 销毁ShadowClient, 关闭连接 参数: handle: ShadowClient实例 返回: 0: 成功 3. IOT_Shadow_Get 原型: int IOT_Shadow_Get(void *handle, OnRequestCallback callback, void *userContext, uint32_t timeout_ms); 功能: 获取设备影子文档 参数: handle : ShadowClient结构体 callback : 请求响应处理回调函数 userContext: 用户数据, 请求响应返回时通过回调函数返回 timeout_ms : 请求超时时间, 单位:s 返回: 0: 成功 4. IOT_Shadow_Update 原型: int IOT_Shadow_Update(void *handle, char *jsonDoc, size_t sizeOfBuffer, OnRequestCallback callback, void *userContext, uint32_t timeout_ms); 功能: 异步方式更新设备影子文档 参数: handle : ShadowClient结构体 jsonDoc : 更新到云端的设备文档 sizeOfBuffer : 文档长度 callback : 请求响应处理回调函数 userContext : 用户数据, 请求响应返回时通过回调函数返回 timeout_ms : 请求超时时间, 单位:ms 返回: 0: 成功 5. IOT_Shadow_Yield 原型: int IOT_Shadow_Yield(void *handle, uint32_t timeout_ms); 功能: 消息接收, 心跳包管理, 超时请求处理 参数: handle : ShadowClient实例 timeout_ms : 超时时间, 单位:ms 返回: 0: 成功 6. IOT_Shadow_Publish 原型: int IOT_Shadow_Publish(void *handle, char *topicName, PublishParams *pParams); 功能: 发布消息(目前阶段是MQTT消息) 参数: handle : ShadowClient实例 topicName : 主题名 pParams : 发布参数 返回: &lt; 0: 失败 &gt;=0: 成功 TODO: 后续修改, 需要隐藏MQTT相关结构体 7. IOT_Shadow_Subscribe 原型: int IOT_Shadow_Subscribe(void *handle, char *topicFilter, SubscribeParams *pParams); 功能: 订阅消息 参数: handle : ShadowClient实例 topicName : 主题名 pParams : 订阅参数 返回: &lt; 0: 失败 &gt;=0: 成功 TODO: 后续修改, 需要隐藏MQTT相关结构体 8. IOT_Shadow_Register_Property 原型: int IOT_Shadow_Register_Property(void *handle, DeviceProperty *pProperty, OnPropResigtCallback callback); 功能: 注册当前设备的设备属性 参数: handle : ShadowClient实例 pProperty : 设备属性 callback : 设备属性更新回调处理函数 返回: 0: 成功 9. IOT_Shadow_UnRegister_Property 原型: int IOT_Shadow_UnRegister_Property(void *handle, DeviceProperty *pProperty); 功能: 删除已经注册过的设备属性 参数: handle : ShadowClient实例 pProperty : 设备属性 返回: 0: 成功 10. IOT_Shadow_JSON_ConstructReport 原型: int IOT_Shadow_JSON_ConstructReport(void *handle, char *jsonBuffer, size_t sizeOfBuffer, uint8_t count, ...); 功能: 在JSON文档中添加reported字段 参数: handle : ShadowClient实例 jsonBuffer : 为存储JSON文档准备的字符串缓冲区 sizeOfBuffer : 缓冲区大小 count : 可变参数的个数, 即需上报的设备属性的个数 返回: 0 : 成功 11. IOT_Shadow_JSON_ConstructReportAndDesireAllNull 原型: int IOT_Shadow_JSON_ConstructReportAndDesireAllNull(void *handle, char *jsonBuffer, size_t sizeOfBuffer, uint8_t count, ...); 功能: 在JSON文档中添加reported字段，同时清空desired字段 参数: handle : ShadowClient实例 jsonBuffer : 为存储JSON文档准备的字符串缓冲区 sizeOfBuffer : 缓冲区大小 count : 可变参数的个数, 即需上报的设备属性的个数 返回: 0 : 成功 12. IOT_Shadow_JSON_ConstructDesireAllNull 原型: int IOT_Shadow_JSON_ConstructDesireAllNull(void *handle, char *jsonBuffer, size_t sizeOfBuffer); 功能: 在JSON文档中添加 &quot;desired&quot;: null 字段 参数: handle : ShadowClient实例 jsonBuffer : 为存储JSON文档准备的字符串缓冲区 sizeOfBuffer : 缓冲区大小 返回: 0 : 成功 1.5 5.Sample回调函数 1. on_request_handler 原型: typedef void (*OnRequestCallback)(void *handle, Method method, RequestAck requestAck, const char *jsonDoc, void *userContext); 功能: 每次对设备影子操作请求响应的回调函数 参数: handle : ShadowClient实例 method : 文档操作方式 requestAck : 请求响应类型 jsonDoc : 云端响应返回的文档 userContext : 用户数据 返回: 0 : 成功 2. on_message_callback 原型: typedef void (*OnMessageHandler)(void *handle, MQTTMessage *message, void *userContext); 功能: PUBLISH消息回调处理函数 参数: handle : ShadowClient实例 message : 发布或接收已订阅消息的结构体数据 userContext : 用户数据 TODO: 后续修改, 需要隐藏MQTT相关结构体 3. on_prop_xxx_callback 原型: void (*OnPropResigtCallback)(void *handle, const char *jsonVal, uint32_t length, DeviceProperty *pProperty); 功能: 设备属性处理回调函数 参数: handle : ShadowClient实例 jsonVal : 设备属性值 length : 设备属性值长度 pProperty : 设备属性结构体 4. event_handler 原型: typedef void (*MQTTEventHandleFun)(void *handle, void *context, MQTTEventMsg *msg); 功能: MQTT相关事件回调函数 参数: handle : MQTTClient 实例 context : MQTTClient 上下文 msg : MQTT事件消息 TODO: 后续修改, 需要隐藏MQTT相关结构体 1.6 6.调试运行Sample 1. 设置Ares的Top目录, eg: export ARES_TOP_DIR=xxx 2. cd $ARES_TOP_DIR; make 3. 打开两个终端启动本地模拟的引擎脚本 cd $ARES_TOP_DIR/doc/shadow console1: ./rule_engine_for_operation.sh console2: ./rule_engine_for_event.sh 备注: rule_engine_for_operation.sh 接收topic:leiot/operation/* rule_engine_for_event.sh 接收topic: productID/deviceName/control 4. 再打开两个终端启动sample程序 cd $ARES_TOP_DIR/output/release/bin console3: ./aircond_shadow_sample_v2 console4: ./door_mqtt_sample come_home aircond_sample","tags":[{"name":"IOT","slug":"IOT","permalink":"https://qrsforever.github.io/tags/IOT/"},{"name":"DrawIt","slug":"DrawIt","permalink":"https://qrsforever.github.io/tags/DrawIt/"}]},{"title":"(原创)Hadoop之Delete实例代理流程","date":"2017-11-13T10:57:00.000Z","path":"2017/11/13/Note/Hadoop/Hadoop-Proxy-Delete/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 框架图 0.1 框架图 ClientNamenodeProtocol | | o---&gt; newReflectiveBlockingService -----&gt; BlockingService | | | | o---&gt; newBlockingStub o--&gt; getDescriptorForType() | | | | |new o--&gt; getRequestPrototype() | | | | +----&gt; BlockingStub o--&gt; getResponsePrototype() | △ | | | o--&gt; callBlockingMethod() | | | | | BlockingInterface | | | | △ | o--&gt; impl.delete() | | | | | | | delete &lt;-- o | | | +---------------------------------------+ | | | ClientProtocol +----------------------------&gt; ClientNamenodeProtocolPB △ | △ | |rpcProxy | | | | | ◆ | ClientNamenodeProtocolTranslatorPB ClientNamenodeProtocolServerSideTranslatorPB (Client Proxy) (Server Impl) | | | 1 5 | o---&gt; delete() delete() &lt;---o | | ^ | | | 2 | | o---&gt; rpcProxy.delete() | | | | | +----------------+ +----+ | | +---------------- | | -----------------+ | | | | | | | | | RpcInvocationHandler | | RPC.Server | | △ | | △ | | \\ | | / | | \\ | | / | | \\ | | / | | Invoker | | Server | | | | | | | | | 3 v | 4 | | | o---&gt; invoke() call() &lt;---o | | | | | | | | | | | +---------------------------------------------------------------------------------------------------+ ProtobufRpcEngine","tags":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://qrsforever.github.io/tags/Hadoop/"}]},{"title":"(原创)Hadoop之Namenode的Delete命令代码流程","date":"2017-11-10T13:01:00.000Z","path":"2017/11/10/Note/Hadoop/Hadoop-Namenode-Delete/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 框架图 0.1 框架图 nn +-------------------------------------------------+ +------------------------------------------------------------+ | | | | v rpcServer | v | NameNode ◇ -------------------------------------&gt; NameNodeRpcServer ---------▷ NamenodeProtocols | ◇ | ◆ | | +-----------------+ | | | 1 | | | |ClientProtocol | | | o--&gt; initialize() serviceRpcServer| o---&gt; start() | |DatanodeProtocol | | | | | | | | +-----▷ |NamenodeProtocol | | | | clientRpcServer| | | 3 |HAServiceProtocol| | | o--&gt; loadNamesystem()----\\ ★ | | |--&gt; clientRpcServer.start() +-----------------+ | | | \\ | | | | | o--&gt; createRpcServer() \\ | | |--&gt; serverRpcServer.start() | | | \\ | | 13 | | o--&gt; startCommonServices() \\ | o---&gt; delete() | | | | \\ | | | | | | 2 \\ | | | 14 | | namesystem |--&gt; rpcServer.start() \\ | o---&gt; namesystem.delete() | | | | | | | | | | | | FSNamesystem.loadFromDisk() &lt;----------------------+ | | | | +----------------------------------------------------------+ | | | | ipc.Server | | △ | | | | |---------------------------------------------------------------------------------------- | | | | Inner class +-- Listener (listens on the socket, create jobs for handler threads) | | | | | | | ◆ | | | | | | | | readers | | | | v | | +-------------------&gt; Reader() | | | | | | | | | | | | | o--&gt; run() | | | | Selector | o--&gt; run():loop | | readSelector.select() | | | | | | | selector.select() | 6 | | | | | | | 5 o---&gt; doRead() +----------------&gt; Connection | | | | NIO | o---&gt; doAccept() | | | | | | | | o---&gt; c.readAndProcess() | | | | | | | | channelRead(ByteBuffer) | | | | | o--&gt; reader.addConnection(c) | | | | | | o--&gt; processOneRpc() | | | | | | | | | | | | | 7 | | | | Thread ◁ -----+-- Responder (sends responses of RPC back to clients) o--&gt; processRpcRequest() | | | | | | | | | | | | o--&gt; run() | | | | | | | Call(rpcRequest) &lt;--o | | | | | | / | | | | NIO | o--&gt; doRunLoop() / | | | | | | / | | | | | / callQueue.put(call) | | | | | / | | | | | / | | | | | / | | | | | / | | | | +-- Handler (handles queued calls) / | | | | | / | | | | | / | | | | o---&gt; run():loop / | | | | | call / | | | | | / | | | | |---&gt; callQueue.take() --------------------/ | | | | | | | | | |---&gt; CurCall.set(call) | | | | | 8 | | | | |---&gt; call() | | | | ^ | | | | | | |---&gt; CurCall.set(null) | | | | | | | | | Inner class | | | |---------------------------------------------------------- | | | | | | | o---&gt; registerProtocolEngine() | | | | | | | o---&gt; getRpcInvoker() | | | | RpcInvoker | | | o---&gt; call() |--&gt; responder.start() △ | | | | 4 | | | | | o---&gt; start() -------+--&gt; listener.start() o---&gt; invoke() | | | | | | | | | |--&gt; handler.start() ★ | | v | (clientRpcServer) | | RPC.Server ◁ ------------------------------------------ ProtobufRpcEngine.Server | | | | | | | |---------------------| | o---&gt; addProtocol() | Inner class | | | | | | | o---&gt; registerProtocolAndImpl() | | | | | | v ProtoBufRpcInvoker | | 8.1 | ^ | | o---&gt; call() | / | | | | +-------------------/ o---&gt; getProtocolImpl() | | | rpcKind = RPC_PROTOCOL_BUFFER | | | | |---&gt; getRpcInvoker() --------------------+ | | 8.3 | | | | o---&gt; call() | | 8.2 | ^ | | |---&gt; call() | | | 9 | | | |--&gt; service.callBlockingMethod() | | Inner class | | | |--------------------- | | +--------------------------+ | ClientNamenodeProtocol.proto | | +--------------------------------------+ | | | | 12 | | | |service ClientNamenodeProtocol { | server.delete()&lt;--o | | | rpc delete(DeleteRequestProto) | | | | | returns(DeleteResponseProto); | | | | |} | o--&gt;DeleteRequestProto | | +--------------------------------------+ | | | auto | gen ClientProtocol | 11 | | | | | o--&gt; delete() | | | | | | | v @ProtocolInfo(Name, Ver) | | | ClientNamenodeProtocol ClientNamenodeProtocolPB ◁ -------- ClientNamenodeProtocolServerSideTranslatorPB | | | | / ◆ | | | | +-------------/ | | | | BlockingInterface ◁ ---------------+ | | server | | | △ | +----------------+ | | v | | | BlockingService(impl) &lt;---------------------------------------------------+ | BlockingStub &lt;----+ ^ | | | | | | | new | o--&gt; getDescriptorForType() | | | | o---&gt; newBlockingStub() ---+ | | | | o--&gt; getRequestPrototype() | | | o---&gt; newReflectiveBlockingService()---------+ | o--&gt; getResponsePrototype() | | o--&gt; callBlockingMethod() | | | | 10 | o--&gt; impl.delete() Delete操作从Namenode类出发经过NameNodeRpcServer启动各种服务, 最终回到NameNodeRpcServer中的delete方法. ipc.Server: 负责网络收发 (基类) RPC.Server: 负责PB协议维护 ProtobufRpcEngine.Server: 负责执行call","tags":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://qrsforever.github.io/tags/Hadoop/"}]},{"title":"(原创)Hadoop之FsShell的Delete命令代码流程","date":"2017-10-24T12:08:00.000Z","path":"2017/10/24/Note/Hadoop/Hadoop-FsShell-Delete/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 框架图 0.1 框架图 Tool +-----------------------------------------▷ Configured △ | | 1 | o--&gt; run() | | | FsShell ------------+ Command | △ | 0 | 2 o---&gt; registerCommands() o---&gt; run() | | | | | | | |---&gt; processOptions() o---&gt; main() | | | | | | |---&gt; processRawArguments() | | | | | | |---&gt; processArguments() +------------+ FsCommand | | | Delete | △ | |------------| | expandArguments()&lt;---| | Rm | | | / | | Rmr |-----+ / | Rmdir | | / | | | / +-----|------+ / | / | 3 / o---&gt; processPath() | / / / v fs | PathData ◇ -----------------------------------------+ | ◆ | | 4 |path | o---&gt; createFileSystem() | URI -- hdfs | | | | ^ | | | | / -- local | o---&gt; get(uri) | | / | | | | ◆ v | | +------&gt; Path ---------------------------------- FileSystem | uri = hdfs | △ | | | | o---&gt; getFileSystem() | | fs.initialize() | | | | | | | LocalFileSystem ------+------ DistributedFileSystem | ◇ 5 | | --------- initialize() &lt;--- o | dfs / | | I / | | +-----▷ ClientProtocol &lt;-------------------\\ new / | | | | \\ / delete()&lt;--- o | | | 10 \\ / | | | o---&gt; delete() \\ / | | | | \\ / | | namenode \\ / | | ◇ / | | DFSClient &lt;------------------------------------------+ | NameNodeProxies.createProxy() | | \\ | | \\ o---&gt; delete() | \\ 6 | | init&lt;---o | | +-----------------------------------------------------------------------+ | &lt;T&gt; | ProxyAndInfo &lt;------------- + | o | | | | | | | | o---&gt; getProxy() |T = ClientProtocol | | | | | | | | | | | | | new | NameNodeProxies | |-------&gt; ClientNamenodeProtocolTranslatorPB | | | ◆ | | new | | | | o---&gt; createNonHAProxy() ---+ | | o---&gt; delete() | \\ | | | | | \\ 7.2 | | | | 11 o---&gt; createNNProxyWithClientProtocol() | | |---&gt; rpcProxy.delete() | | | 7.1 | | | rpcProxy (is a proxy of ClientNamenodeProtocolPB) createProxy() &lt;---o |---&gt; RPC.setProtocolEngine() | | | | \\ | +----------------------------------------+ | \\ set | | | +----------------------|------------------------------------------+ | | | v | | | Conf | rpc.engine.ClientNamenodeProtocolPB = ProtobufRpcEngine | | | | | | | | +-------------------------------------------------+---------------+ | | / get | | |---&gt; RPC.getProtocolProxy() / | | | | / | | | 8 / call * 9 | | |---&gt; getProtocolEngine() ----------&gt; getProxy() &lt;---o | | | | | new | | | | | &lt;T&gt; T = ClientNamenodeProtocolPB | | ProtocolProxy &lt;--------------------------------------------------------------------+ | method | | || | +-----&gt; Proxy.newProxyInstance(ClientNamenodeProtocolPB) =--------------------------------+ delete | | | | o---&gt; getProxy()----| proxy | | | | | | | RpcInvocationHandler | o---&gt; fetchServerMethods() ▽ △ | | -- ClientNamenodeProtocol.BlockingInterface | | | / | | | / | Invoker | +---------------/ o---&gt; delete() | | | | | 12 | | o---&gt; invoke()&lt;----+ | | | ClientNamenodeProtocol.proto: | +----------------------------------------------------------------------+ constructRpcRequestHeader &lt;---| | message DeleteRequestProto { | &quot;delete&quot; | | required string src = 1; | | | required bool recursive = 2; | |---&gt; client.call() | } | | | | | | | message DeleteResponseProto { | | | required bool result = 1; | | | } | connections | | | -----◇ Client &lt;----------------+ | service ClientNamenodeProtocol { | / | | rpc delete(DeleteRequestProto) returns(DeleteResponseProto); | / | 13 | } | / o---&gt; call() | | / | | +----------------------------------------------------------------------+ / | | / | |--&gt; createCall():call / | / getConnection()&lt;---| Thread / | |--&gt; conn.sendRpcRequest() △ / | | | / |---&gt; new conn |--&gt; call.getRpcResponse() calls | / | Call &lt;--------------------◇ Connection &lt;------------------- |---&gt; conn.addCall() | | | | | |---&gt; conn.setupIOstreams() o---&gt; setRpcResponse() o---&gt; addCall() | | | sendRpcRequest() &lt;---o | | o---&gt; getRpcResponse() o---&gt; setupIOstreams() | | | | | |---&gt; writeConnectionHeader() | socket | | |---&gt; writeConnectionContext() | | | |---&gt; start() | / | / o---&gt; run() &lt;--- | | | |---&gt; waitForWork() | |---&gt; receiveRpcResponse() | |---&gt; call.setRpcResponse() | 实质: Java动态代理 + ProtocolBuffer","tags":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://qrsforever.github.io/tags/Hadoop/"}]},{"title":"(原创)Scrapy之Requst URLs处理流程","date":"2017-09-20T12:49:41.000Z","path":"2017/09/20/Note/Python/Note-Scrapy-Request-URLs/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 源码crawl() 源码open_spider() 源码CallLaterOnce() 源码LoopingCall() 源码maybeDeferred() 疑问: ★0 start_requests = yield self.scraper.spidermw.process_start_requests(start_requests, spider) | |generator +----------------------------------------------------------------------------+ | | | | | def _runCallbacks(self): | | | ... | | | while current.callbacks: | | | item = current.callbacks.pop(0) | | | callback, args, kw = item[ | | | isinstance(current.result, failure.Failure)] | | | ... | | current.result | try: | +--------------------+-------------------------------- current.result = callback(current.result, *args, **kw) | | | ... | | | else: | | | if isinstance(current.result, Deferred): | | | ... | | +----------------------------------------------------------------------------+ | ^ | | | | d.callback(input) | | | generator | v scrapy.utils.defer.process_chain() | Crawl51JobSpiderMiddleware.process_start_requests() +------------------------------------------------+ +------------------------------------------------------------+ | ★4 | | ★5 | | def process_chain(callbacks, input, *a, **kw):| | def process_start_requests(self, start_requests, spider): | x | d = defer.Deferred() | | for r in start_requests: | &lt;------------- for x in callbacks: | | yield r | | d.addCallback(x, *a, **kw) | +------------------------------------------------------------+ | d.callback(input) | | return d | +------------------------------------------------+ | | | m ---&gt; _process_chain() | | \\ | | \\ | | +-----------------------------------------------------------------+ MiddlewareManager ---+ | def _process_chain(self, methodname, obj, *args): ★3 | △ | | return process_chain(self.methods[methodname], obj, *args) | | | +-----------------------------------+-----------------------------+ | | | | | | | | | | | v | Crawl51JobSpiderMiddleware.process_start_requests() spidermw | Scraper ◆---------&gt; SpiderMiddlewareManager | | ★1 m---&gt; process_start_requests(start_requests) | / | / | +-------------------------------------------------------------------------------------+ | | def process_start_requests(self, start_requests, spider): ★2 | | | return self._process_chain(&#39;process_start_requests&#39;, start_requests, spider) | | +-------------------------------------------------------------------------------------+ 命令启动crawl scrapy crawl --nolog s51job -o /tmp/file.csv 1 源码crawl() crawler.Crawler.crawl(): @defer.inlineCallbacks def crawl(self, *args, **kwargs): self.crawling = True try: self.spider = self._create_spider(*args, **kwargs) self.engine = self._create_engine() start_requests = iter(self.spider.start_requests()) yield self.engine.open_spider(self.spider, start_requests) yield defer.maybeDeferred(self.engine.start) ... Scrapy中大量使用Twisted中的延迟机制 参考前文 self.spider: 命令行参数指定的spider,如s51job对应的类S51jobSpider self.engine: 调度执行spider, 驱动spider前行 self.start_requests(): 调用基类的的实现, 方法中使用了yield是个生成器方法, 把start_urls封装城Request对象中 +---------------------------------------------------+ S51jobSpider ------▷ CrawlSpider -----▷ Spider ---| def start_requests(self): | | start_urls / | ... | | / | for url in self.start_urls: | m----&gt; start_requests() | yield Request(url, dont_filter=True) | | +---------------------------------------------------+ | 2 源码open_spider() core.engine.ExecutionEngine.open_spider(): @defer.inlineCallbacks def open_spider(self, spider, start_requests=(), close_if_idle=True): ... nextcall = CallLaterOnce(self._next_request, spider) scheduler = self.scheduler_cls.from_crawler(self.crawler) start_requests = yield self.scraper.spidermw.process_start_requests(start_requests, spider) slot = Slot(start_requests, close_if_idle, nextcall, scheduler) self.slot = slot self.spider = spider yield scheduler.open(spider) yield self.scraper.open_spider(spider) self.crawler.stats.open_spider(spider) yield self.signals.send_catch_log_deferred(signals.spider_opened, spider=spider) slot.nextcall.schedule() slot.heartbeat.start(5) start_requests: 作为参数时是Spider.start_requests()生成器方法, yield返回变为process_start_requests()生成器方法 self.crawler: 初始化时传过来的scrapy.crawler.Crawler, 启动爬虫对象 scheduler: scrapy.core.scheduler.Scheduler, 对优先级, Memory, Disk队列push/pop调度管理 scrape.spidermw: Core.Scraper.SpiderMiddlewareManager slot.nextcall: 实现__call__()方法的CallLaterOnce类, 该类()调用的是_next_request() slot.heartbeat: twisted.internet.task.LoopingCall(nextcall.schedule) start_requests流程图 3 源码CallLaterOnce() class CallLaterOnce(object): def __init__(self, func, *a, **kw): self._func = func self._a = a self._kw = kw self._call = None def schedule(self, delay=0): if self._call is None: self._call = reactor.callLater(delay, self) def cancel(self): if self._call: self._call.cancel() def __call__(self): self._call = None return self._func(*self._a, **self._kw) self._func(): _next_request() callLater(): 将self(可执行的类)封装到DelayedCall()并加入到以delay时间排序的队列中, 等待执行. 了解更多 call: nextcall.schedule() --&gt; reactor.callLater() --&gt; _next_request() 4 源码LoopingCall() class LoopingCall: call = None running = False _deferred = None interval = None _runAtStart = False starttime = None def __init__(self, f, *a, **kw): self.f = f self.a = a self.kw = kw from twisted.internet import reactor self.clock = reactor def start(self, interval, now=True): self.running = True deferred = self._deferred = defer.Deferred() self.starttime = self.clock.seconds() self.interval = interval self._runAtStart = now if now: self() else: self._scheduleFrom(self.starttime) return deferred def stop(self): self.running = False if self.call is not None: self.call.cancel() self.call = None d, self._deferred = self._deferred, None d.callback(self) ... def __call__(self): def cb(result): if self.running: self._scheduleFrom(self.clock.seconds()) else: d, self._deferred = self._deferred, None d.callback(self) def eb(failure): self.running = False d, self._deferred = self._deferred, None d.errback(failure) self.call = None d = defer.maybeDeferred(self.f, *self.a, **self.kw) d.addCallback(cb) d.addErrback(eb) ... def _scheduleFrom(self, when): def howLong(): if self.interval == 0: return 0 runningFor = when - self.starttime untilNextInterval = self.interval - (runningFor % self.interval) if when == when + untilNextInterval: return self.interval return untilNextInterval self.call = self.clock.callLater(howLong(), self) self.f: nextcall.schedule(): seconds(): 返回当前系统时间秒数(根据平台不同, 实现不同) start(): 启动loop任务, 以interval为循环周期, 执行__call__() __call__(): 调用maybeDeferred()执行self.f 即nextcall.schedule()该函数返回值为None. 5 源码maybeDeferred() def succeed(result): d = Deferred() d.callback(result) return d def fail(result=None): d = Deferred() d.errback(result) return d def maybeDeferred(f, *args, **kw): try: result = f(*args, **kw) except: return fail(failure.Failure(captureVars=Deferred.debug)) if isinstance(result, Deferred): return result elif isinstance(result, failure.Failure): return fail(result) else: return succeed(result) f(): == nextcall.shedule(), 返回值为None, 所以maybeDeferred()此处返回succeed(result), callback回调执行LoopingCall__call__.cb() URL调度: | m---&gt; _scheduleFrom() &lt;-----------------------------------------+ | | | | | | | o---&gt; reactor.callLater(interval, self) | loop-2 | | m---&gt; start(interval) | | | | | | | LoopingCall ------+ o---&gt; self()--+ | ^ | | | | | | +-----&gt; self._scheduleFrom(interval)--+ | m---&gt; __call__() &lt;---+ | | | | | | | | +----&gt; errback() | | cb-------+ | | | eb-------------------+ | o ---&gt; defer.maybeDeferred(self.f) heartbeat | | | is ◆ nextcall | Slot ◆-----------&gt; CallLaterOnce | ◆ | | | | ★1 | | m ---&gt; schedule() &lt;-------------+---------------+ | | | | v | | | start_requests | o ---&gt; reactor.callLater(0, self) | | | | | | call | | m ---&gt; __call__() &lt;-----------+ | | | | | | ★2 | o ---&gt; self._func() | | | | | | ★3 | | m ---&gt; _next_request() &lt;--------------------+ is | | | | | call | | ExecutionEngine --+ +---o | | | | | | | | ★4 | | | o---&gt; request = next(slot.start_requests) | | | | | | | | call | download() &lt;--- m | o-------------------------------+ | | | | | | | | | | | | | | | | | | loop-1 | v ★8 | | m ---&gt; _next_request_from_scheduler() | | | | | | | | ★9 | | | o---&gt; slot.scheduler.next_request() | | | | | | | | ★10 | | | o---&gt; self._download() | | | | | | | | | m ---&gt; crawl() &lt;----------------------------+ | | | | | | ★5 | | o---&gt; self.schedule() | | | | | | | | ★6 | | | o---&gt; slot.scheduler.enqueue_request() | | | o---&gt; self.slot.nextcall.schedule() -------------------------+ | ★7 | 6 疑问: 在open_spider函数的最后两行代码: &gt; slot.nextcall.schedule() &gt; slot.heartbeat.start(5) 分析源码之后发现这两行的动作有些重复, nextcall.schedule()自身也能实现loop, 如上图(Loop-1), heartbeat.start(5)(Loop-2)是不是多余的? 这个疑问留到以后解决","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"}]},{"title":"(原创)如何使用Opengrok","date":"2017-09-13T03:05:32.000Z","path":"2017/09/13/Tools/How/How-Install-OpenGrok/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 环境配置 工程配置 建立或更新 1 环境配置 1. 下载Opengrok和Tomcat 建立软链接 lidong@node0:/$ ls -l /opt/ | egrep &quot;tomcat|opengrok&quot; lrwxrwxrwx 1 lidong lidong 36 Sep 13 09:57 opengrok -&gt; /data/opt/opengrok/opengrok-1.1-rc11 lrwxrwxrwx 1 lidong lidong 37 Sep 13 09:57 tomcat -&gt; /data/opt/tomcat/apache-tomcat-8.5.14 lidong@node0:/$ 2. 配置环境变量 export TOMCAT\\_VERSION=8.5.14 export TOMCAT\\_HOME=/data/opt/tomcat/apache-tomcat-${TOMCAT\\_VERSION} export CATALINA\\_HOME=$TOMCAT\\_HOME export PATH=$TOMCAT\\_HOME/bin:$PATH export OPENGROK\\_TOMCAT\\_BASE=/opt/tomcat export OPENGROK\\_VERSION=1.1-rc11 export OPENGROK\\_HOME=/data/opt/opengrok/opengrok-${OPENGROK\\_VERSION} export OPENGROK\\_INSTANCE\\_BASE=$OPENGROK\\_HOME export PATH=$OPENGROK\\_HOME/bin:$PATH 2 工程配置 1. 建工程目录 # 创建总工程目录 cd /project/opengrok/ #例如创建三个工程avro, hadoop, hbase mkdir avro hadoop hbase # 分别创建各个工程的etc(工程私有配置),src(工程源码子目录) mkdir avro/etc avro/src mkdir hadoop/etc hadoop/src mkdir hbase/etc hbase/src 2. 设置每个项目的配置文件 cat avro/etc/opengrok.conf OPENGROK\\_VERBOSE=yes OPENGROK\\_PROGRESS=yes OPENGROK\\_WEBAPP\\_CFGADDR=localhost:9743 OPENGROK\\_WEBAPP\\_CONTEXT=avro IGNORE\\_PATTERNS=&quot;-i f:.\\* -i d:target -i d:test&quot; &lt;br&gt; cat hadoop/etc/opengrok.conf OPENGROK\\_VERBOSE=yes OPENGROK\\_PROGRESS=yes OPENGROK\\_WEBAPP\\_CFGADDR=localhost:9741 OPENGROK\\_WEBAPP\\_CONTEXT=hadoop IGNORE\\_PATTERNS=&quot;-i f:.\\* -i d:target -i d:test&quot; &lt;br&gt; cat hbase/etc/opengrok.conf OPENGROK\\_VERBOSE=yes OPENGROK\\_PROGRESS=yes OPENGROK\\_WEBAPP\\_CFGADDR=localhost:9742 OPENGROK\\_WEBAPP\\_CONTEXT=hbase IGNORE\\_PATTERNS=&quot;-i f:.\\* -i d:target -i d:test&quot; 3. 创建每个项目源码目录软链接 # tree avro/src/ avro/src/ `-- avro -&gt; /data/opt/avro/avro-src-1.8.2/ &lt;br&gt; # tree hadoop/src/ hadoop/src/ |-- hadoop-common-project -&gt; /data/opt/hadoop/hadoop-2.7.3-src/hadoop-common-project |-- hadoop-hdfs-project -&gt; /data/opt/hadoop/hadoop-2.7.3-src/hadoop-hdfs-project/ `-- hadoop-yarn-project -&gt; /data/opt/hadoop/hadoop-2.7.3-src/hadoop-yarn-project/ &lt;br&gt; # tree hbase/src/ hbase/src/ `-- hbase -&gt; /data/opt/hbase/hbase-1.2.6-src 3 建立或更新 1. opengrok.sh脚本 将opengrok.sh 加入到PATH环境变量中,或者拷贝到/usr/bin cat /usr/bin/opengrok.sh #!/bin/bash opengrok_pro_dir=`pwd` opengrok_bin_dir=`which OpenGrok` opengrok_bin_dir=`dirname $opengrok_bin_dir` opengrok_top_dir=`dirname $opengrok_bin_dir` echo &quot;Info: opengrok_pro_dir: $opengrok_pro_dir&quot; echo &quot;Info: opengrok_bin_dir: $opengrok_bin_dir&quot; echo &quot;Info: opengrok_top_dir: $opengrok_top_dir&quot; if [[ x$opengrok_bin_dir == x ]] then echo -e &quot;\\n Error: Not set path to opengrok/bin!\\n&quot; exit 1 fi if [[ x$TOMCAT_HOME == x ]] then echo -e &quot;\\n Error: Not set env TOMCAT_HOME!\\n&quot; exit 1 fi for pro in ${@} do pro_dir=$opengrok_pro_dir/$pro if [ -d $pro_dir ] then if [ ! -f $pro_dir/etc/opengrok.conf ] then echo -e &quot;\\n Error: $pro_dir/etc/opengrok.conf file Not found!\\n&quot; continue fi $TOMCAT_HOME/bin/shutdown.sh sleep 3 webapp_addr=`cat $pro_dir/etc/opengrok.conf | grep OPENGROK_WEBAPP_CFGADD | cut -d= -f2` if [[ x$webapp_addr == x ]] then webapp_addr=localhost:2424 fi port=`echo $webapp_addr | cut -d\\: -f2` echo -e &quot;\\n####check port($port):\\n&quot; netstat -anp | grep $port rm -rf $pro_dir/log/ rm -rf $pro_dir/etc/configuration.xml if [ ! -d $pro_dir/data ] then mkdir -p $pro_dir/data fi if [ ! -d $pro_dir/log ] then mkdir -p $pro_dir/log fi cp $opengrok_top_dir/lib/source.war ${pro_dir}.war unzip ${pro_dir}.war WEB-INF/web.xml sed -i -e &#39;s:/var/opengrok/etc/configuration.xml:&#39;&quot;$pro_dir/etc/configuration.xml&quot;&#39;:g&#39; &quot;WEB-INF/web.xml&quot; sed -i -e &#39;s/localhost:2424/&#39;&quot;$webapp_addr&quot;&#39;/g&#39; &quot;WEB-INF/web.xml&quot; zip ${pro_dir}.war -u WEB-INF/web.xml rm -rf WEB-INF rm -rf $TOMCAT_HOME/${pro_dir}* $TOMCAT_HOME/bin/startup.sh echo &quot;Info: Wait 5s for tomcat startup&quot; sleep 5 mv ${pro_dir}.war $TOMCAT_HOME/webapps/ OPENGROK_INSTANCE_BASE=$pro_dir OPENGROK_CONFIGURATION=$pro_dir/etc/opengrok.conf OpenGrok index else echo &quot;\\n Error: $pro_dir directory Not found!\\n&quot; fi done 2. 执行脚本 进入工程总目录 &gt; cd /projects/opengrok 多个 &gt; opengrok.sh avro hadoop hbase 单个 &gt; opengrok.sh avro 3. 编写index.html cat /opt/tomcat/webapps/source/index.html &lt;html&gt; &lt;title&gt;Mermaid Opengrok&lt;/title&gt; &lt;style&gt; body{ width: 50%; margin:0 auto; text-align:center } &lt;/style&gt; &lt;body&gt; &lt;h1 align=&quot;center&quot;&gt;Opengrok&lt;/h1&gt; &lt;h2 align=&quot;left&quot;&gt;Data Mining&lt;/h2&gt; &lt;ul&gt; &lt;li align=&quot;left&quot;&gt;&lt;a name=&quot;hadoop_link&quot; href=&quot;../hadoop&quot;&gt;Hadoop &lt;/a&gt;&lt;/li&gt; &lt;li align=&quot;left&quot;&gt;&lt;a name=&quot;hbase_link&quot; href=&quot;../hbase&quot;&gt;Hbase &lt;/a&gt;&lt;/li&gt; &lt;li align=&quot;left&quot;&gt;&lt;a name=&quot;avro_link&quot; href=&quot;../avro&quot;&gt;Avro &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; 4. 浏览器访问 &gt; http://localhost:8080/source Opengrok-首页 Opengrok-Hadoop","tags":[{"name":"How","slug":"How","permalink":"https://qrsforever.github.io/tags/How/"}]},{"title":"(原创)Twisted InlineCallback 机制","date":"2017-09-11T07:06:16.000Z","path":"2017/09/11/Note/Python/Note-Twisted-InlineCallback/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Deferred的callback和addCallbacks方法 addCallbacks() callback() runCallbacks() InlineCallbacks 实例 实例源码 三个Deffered对象 getRemoteData()生成器 InlineCallbacks 源码分析 源码 [@defer.inlineCallbacks 展开](#deferinlinecallbacks-展开) 揭开谜底 d0.addCallback() +----------------------------------------------------------------------------------------------------------------------+ | | | (g) v | main inlineCallbacks getRemoteData loadRemoteData loadRemoteData2 getResult | | | \\ | | | | | | | \\inner | | | | | | | \\ | | | | | |-------------&gt;| \\ | | | | | | | gotResult | | | | | | |d0 | | | | | | | | | g.send(None) | | | | | | |---------------------------&gt;| | | | | | | | | | | | | | | | |d1 | | | +-- d0|&lt;-------------| | | | | | | | |return is deffer|---callInThread | | | | ----d1|&lt;---------------------------| | | | | | / -| | | | | | | / | / | | | | | | | addBoth() | / | | Thread |--------------&gt;| | | | | | / | | | | | | | +-------------- | r = 1 | | callback(1) | | | | |&lt;----------------------------------------| | | | | r = 1 | | = | | | |&lt;----------| | | | | | | | | | | | | g.send(1) | | | | |---------------------------&gt;|r1 = 1 | | | | | | | | | | | |d2 | | | | | | | | | | |return is deffer|--callInThread | | | ----d2|&lt;---------------------------| | | | | / | | | | | | | / | | | | | | | addBoth() | | | Thread |-------------------------------------&gt;| | | | | | | | | | | +------| | r = 2 | |callback(2) | | | |&lt;---------------------------------------------------------------| | | | r = 2 | | = | | |&lt;----------| | | | | | | | | | g.send(2) | | | |---------------------------&gt;|r2 = 2 | | | | | | | |--returnValue(r1+r2) | | | = | | | | try.catch | | | |&lt;------------------------------------|raise e(3) | | | | | | | | | d0.callback(3) | | |------------------------------------------------------------------------------------------------&gt;| | = | | | | 3 &lt;----|output | = = 此图对应源码 1 Deferred的callback和addCallbacks方法 1.1 addCallbacks() def addCallbacks(self, callback, errback=None, callbackArgs=None, callbackKeywords=None, errbackArgs=None, errbackKeywords=None): cbs = ((callback, callbackArgs, callbackKeywords), (errback or (passthru), errbackArgs, errbackKeywords)) self.callbacks.append(cbs) if self.called: self._runCallbacks() return self 1.2 callback() def callback(self, result): self._startRunCallbacks(result) def _startRunCallbacks(self, result): self.called = True self.result = result self._runCallbacks() 由 self.called 变量控制执行_runCallbacks(), 默认为False, 只有调用callback之后才赋值True, 所以在没有调用callback之前调用 addCallBacks只是把cbs存放到self.callbacks变量中. 一般在调用callback之前会处理好需要的数据(eg: Request), 调用时把结果result作为 参数传给之前加进来的callbacks. 1.3 runCallbacks() while current.callbacks: item = current.callbacks.pop(0) callback, args, kw = item[ isinstance(current.result, failure.Failure)] args = args or () kw = kw or {} ... try: current._runningCallbacks = True try: current.result = callback(current.result, *args, **kw) if current.result is current: ... finally: current._runningCallbacks = False except: current.result = failure.Failure(captureVars=self.debug) else: if isinstance(current.result, Deferred): resultResult = getattr(current.result, &#39;result&#39;, _NO_RESULT) if resultResult is _NO_RESULT or isinstance(resultResult, Deferred) or current.result.paused: ... break else: # Yep, it did. Steal it. current.result.result = None # Make sure _debugInfo&#39;s failure state is updated. if current.result._debugInfo is not None: current.result._debugInfo.failResult = None current.result = resultResult pop(0)始终弹出最早放进去的item(cb,eb), 也就是按addCallbacks的先入先出的顺序, 这个很关键, 以为前一个callback回调的返回是下一个 回调函数的输入. &gt; current.result = callback(current.result, *args, **kw) 2 InlineCallbacks 实例 2.1 实例源码 #!/usr/bin/python3 # -*- coding: utf-8 -*- from twisted.internet import defer, reactor def loadRemoteData(callback): print(&quot;---&gt; loadRemoteData callback: &quot;, callback) import time time.sleep(1) callback(1) # 将1传给getResult, 只有callback之后才能触发callbacks结果 def loadRemoteData2(callback): print(&quot;---&gt; loadRemoteData2 callback: &quot;, callback) import time time.sleep(1) callback(2) @defer.inlineCallbacks def getRemoteData(): d1 = defer.Deferred() # d1.callback 遍历回调所有callbacks reactor.callInThread(loadRemoteData, d1.callback) print(&quot;yiled d1: &quot;, d1) r1 = yield d1 d2 = defer.Deferred() reactor.callInThread(loadRemoteData2, d2.callback) print(&quot;yiled d2: &quot;, d2) r2 = yield d2 # 主动抛出_DefGen_Return异常, 异常的内容就是r1+r2 defer.returnValue(r1+r2) # 函数中调用raise # 或者return导致抛StopIteration # return r1 + r2 def getResult(v): print (&quot;result = &quot;, v) if __name__ == &#39;__main__&#39;: d0 = getRemoteData() print(&quot;main d0 : &quot;, d0) d0.addCallback(getResult) # import time # time.sleep(4) # 以下两行可以使用sleep替换, 不影响功能测试 reactor.callLater(4, reactor.stop); reactor.run() 执行: twisted$ ./inlineCallback.py yiled d1: &lt;Deferred at 0x7f6b2a57fdd8&gt; main d0 : &lt;Deferred at 0x7f6b2a57fe10&gt; ---&gt; loadRemoteData callback: &lt;bound method Deferred.callback of &lt;Deferred at 0x7f6b2a57fdd8&gt;&gt; yiled d2: &lt;Deferred at 0x7f6b25f75668&gt; ---&gt; loadRemoteData2 callback: &lt;bound method Deferred.callback of &lt;Deferred at 0x7f6b25f75668&gt;&gt; result = 3 twisted$ 代码流程图 2.2 三个Deffered对象 对象名 对象地址 备注 d0 0x7f6b2a57fe10 由@defer.inlineCallbacks内部创建, 且getResult回调持有者 d1 0x7f6b2a57fdd8 由getRemoteData函数创建, 被@defer.inlineCallbacks包装 d2 0x7f6b25f75668 同上 2.3 getRemoteData()生成器 该函数中有yield调用, 则getRemoteData转变为生成器, 函数不会阻塞马上会返回, 而且被@defer.inlineCallbacks封装起来, 只有生成器函数 调用next()/send()方法才触发getRemoteData代码继续执行, 上面的实例并没有任何地方调用send/next, 程序是如何运行的? 还有通过d0的打印 来看d0的类型是Deffered对象而不是生成器函数? 带着这些疑问继续往下看. 3 InlineCallbacks 源码分析 3.1 源码 def inlineCallbacks(f): @wraps(f) def unwindGenerator(*args, **kwargs): try: gen = f(*args, **kwargs) except _DefGen_Return: raise TypeError() if not isinstance(gen, types.GeneratorType): raise TypeError() return _inlineCallbacks(None, gen, Deferred()) return unwindGenerator def _inlineCallbacks(result, g, deferred): waiting = [True, # waiting for result? None] # result while 1: try: isFailure = isinstance(result, failure.Failure) if isFailure: result = result.throwExceptionIntoGenerator(g) else: result = g.send(result) except StopIteration as e: deferred.callback(getattr(e, &quot;value&quot;, None)) return deferred except _DefGen_Return as e: ... deferred.callback(e.value) return deferred except: deferred.errback() return deferred if isinstance(result, Deferred): def gotResult(r): if waiting[0]: waiting[0] = False waiting[1] = r else: _inlineCallbacks(r, g, deferred) result.addBoth(gotResult) if waiting[0]: waiting[0] = False return deferred result = waiting[1] waiting[0] = True waiting[1] = None return deferred class _DefGen_Return(BaseException): def __init__(self, value): self.value = value def returnValue(val): raise _DefGen_Return(val) g.send()返回如果是个Defferred, 需要对改Defferred注册cb,eb方法, 等待Defferred执行callbacks时会触发回调,并将结果传下来,再次调用 _inlineCallbacks(), 如果g.send()返回是非Defferred对象, 则直接将该返回值作为g.send()的参数, 继续... 3.2 @defer.inlineCallbacks 展开 def getRemoteData(): d1 = defer.Deferred() # d1.callback 遍历回调所有callbacks reactor.callInThread(loadRemoteData, d1.callback) print(&quot;yiled d1: &quot;, d1) r1 = yield d1 d2 = defer.Deferred() reactor.callInThread(loadRemoteData2, d2.callback) print(&quot;yiled d2: &quot;, d2) r2 = yield d2 # 主动抛出_DefGen_Return异常, 异常的内容就是r1+r2 defer.returnValue(r1+r2) # 函数中调用raise # 或者return导致抛StopIteration # return r1 + r2 def inlineCallbacks.unwindGenerator(*args, **kwargs): try: gen = getRemoteData(*args, **kwargs) except _DefGen_Return: raise TypeError() if not isinstance(gen, types.GeneratorType): raise TypeError() return _inlineCallbacks(None, gen, Deferred()) d0 = inlineCallbacks.unwindGenerator() 前面说过getRemoteData是个生成器, gen = getRemoteData(*args, **kwargs)这个调用会立即返回, 并作为参数传给_inlineCallbacks, 猜测 生成器gen的next/send的调用应该发生再_inlineCallbacks中. 3.3 揭开谜底 查看源码会发现_inlineCallbacks()函数所有的return都是deferred变量, 这个变量是在InlineCallBacks的闭包函数里传入的Deffered(),实 际上这个值就是上层函数中的d0对象, d0对象在哪创建的疑问解决了; _inlineCallbacks()里虽然有while 1循环, 但是调用它并不会使其阻塞 ,原因就是return直接返回. 调用路线: result = g.send(result) --&gt; if isinstance(result, Deferred) --&gt; result.addBoth(gotResult) --&gt; return deferred; 根据生成器规则(r = yield x), send的参数会传给r(第一次特殊None), 生成器函数返回x(=g.send()). 第一次send: result = g.send(result), 此时参数result是None, 返回result是d1 result.addBoth(gotResult) == d1.addBoth(gotResult) 当某线程调用d1.callback()时, 会触发gotResult()函数调用, 并且d1.callback传入的参数1会传给gotResult(1), 又会触发_inlineCallbacks(). 第二次send: result = g.send(result), 此时参数result就是1, 返回result是d2 result.addBoth(gotResult) == d2.addBoth(gotResult) 当某线程调用d2.callback()时, 会触发gotResult()函数调用, 并且d2.callback传入的参数2会传给gotResult(2), 又会触发_inlineCallbacks(). 第三次send: result = g.send(result), 此时参数result就是2, getRemoteData()结束调用defer.returnValue(1+2), 触发异常_DefGen_Return(). 捕捉异常, 获取异常值3 deferred.callback(e.value) return deferred","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"}]},{"title":"(原创)Dalvik与Art虚拟机-笔记片段","date":"2017-09-05T02:07:00.000Z","path":"2017/09/05/Note/Android/Dalvik-Art-Snippet/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} What are Dalvik and ART? What's actually different between ART and Dalvik? Just-in-time compilation (JIT) Ahead-of-time compilation (AOT) 虚拟机启动 | Java VM | +-----------------------------+ | | | | | JNI_GetDefaultJavaVMInitArgs| | | JNI_CreateJavaVM | | | JNI_GetCreatedJavaVMs | | | | | +-----------------------------+ | | | | | dlopen | dlsym | | | +---------------------------------------------------------+ | | | | libdvm.so | | libart.so | v v | +-----------------------------+ +-----------------------------+ | | | | | | | JNI_GetDefaultJavaVMInitArgs| | JNI_GetDefaultJavaVMInitArgs| | | JNI_CreateJavaVM | | JNI_CreateJavaVM | | | JNI_GetCreatedJavaVMs | | JNI_GetCreatedJavaVMs | | | | | | | +-----------------------------+ +-----------------------------+ | Dalvik VM Art VM | ---------------------------------------------------------------------------------------------------------------+ ^ app_main.cpp | | | impl: 实现无缝替换 | | +--&gt; main() JniInvocation | ********* ^ +--&gt; AppRuntime::start() **** **** | | | * mJavaVM * +-------+ pid == 0 | | **** **** / +---------------------------------------------------+ v ********* / | | AndroidRuntime / | | | / | pid &gt; 0 | | / +-------------------------------------+ | |---&gt; onStarted() / | | | | / | | | | |---&gt; onVmCreated() / | | | | | / | | | | |---&gt; start() / | | v | | | / | | |---&gt; handleParentProc() | | | / | | | | startReg() &lt;---| +---&gt; JniInvocation.init() Zygote.forkAndSpecialize() &lt;---+ | | | | | |---&gt; handleChildProc() | | +---&gt; startVm() | | ^ | | | start the virtual machine | | | | | | runOnce() &lt;---+ | | | +---&gt; onVmCreated() | +-------------+ | subclass impl | | | +---&gt; startReg() ZygoteConnection | register android functions ^ | | | | +---&gt; env-&gt;CallStaticVoidMethod(&quot;main&quot;) | | | | | | | . v | Shutdown VM ZygoteInit /| | socket / | | --------/ | +---&gt; main() / | | | / zygote | | | / | +---&gt; registerZygoteSocket()---- | | | | | +---&gt; preload() | | load classes, resources, libs | | | +---&gt; gc() | | | | peer.runOnce() | +---&gt; runSelectLoop() ------------------------+ | | +---&gt; closeServerSocket() 1 What are Dalvik and ART? Dalvik is a virtual machine designed to run applications and code written in Java. It's hard to explain this without getting very technical but suffice to say it's how apps are able to work on your Android operating system. Any application written in Java code needs a Java Virtual Machine to run. Dalvik is a mobile version of a Java Virtual Machine. When Android released the KitKat operating system in 2013, it introduced a replacement for Dalvik called ART. ART stands for Android runtime. Two years went into developing ART and its capabilities are vastly different to Dalvik The idea is that Android devices using ART will perform better than those using Dalvik. ART's existence and it’s improved performance is made possible by the fact that modern smartphones are significantly more advanced than the first generation of Android devices. 2 What's actually different between ART and Dalvik? 2.1 Just-in-time compilation (JIT) Before apps can be run on Android, the code behind them must be compiled into machine code (which is basically what ART and Dalvik are there for). Dalvik uses JIT, or just-in-time compilation. What that means is whenever you use an app; the code it needs to run is compiled, but only that piece. If you use another part of the app, more code will be compiled. The compiled code is then cached so that it can be reused while you are still running the app. Code is compiled as it is needed. This just-in-time method means that Dalvik uses relatively little memory to perform its tasks, which was ideal for earlier Android devices that had less memory. Memory space is less of a problem for today's devices, which is what lead to the development of ART. 2.2 Ahead-of-time compilation (AOT) ART collects the code into a system-dependent binary by pre-storing all of it during installation. This means it only ever has to be compiled once. Because of this, apps will run faster on Android devices using ART because there's no need for the code to be compiled each time they are required to run. The other upside of ART is that it uses native execution, which means that it runs app machine code directly. The beneficial result of native execution is that it places less strain on the CPU than Dalvik's JIT compiling. The lower CPU usage should translate into longer battery life. There are a couple of trade-offs for this improved performance. One is that the compiled code takes up more space in your device's memory. The second is that because the code is compiled during installation, it takes longer to install apps. 3 虚拟机启动","tags":[{"name":"Android","slug":"Android","permalink":"https://qrsforever.github.io/tags/Android/"}]},{"title":"(原创)笔记-Twisted的Deffered机制","date":"2017-09-01T08:41:00.000Z","path":"2017/09/01/Note/Python/Note-Twisted-Deffered-Machanism/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} Twisted介绍 Deffereds Callback Timeouts 源码实例 代码-1 (单回调) 代码-2 (多回调) 代码-3 (线程) 源码剖析 Deffered类 reactor方法 1. reactor.callLater() 2. reactor.run() 3. reactor.callInThread() reactor --&gt; Linux | | v class EPollReactor(posixbase.PosixReactorBase, posixbase._PollLikeMixin): △ | +------------------------+ _newTimedCalls | / ^ class PosixReactorBase(_SignalReactorMixin, _DisconnectSelectableMixin, ReactorBase): / | ^ △ / | | | / | 存放 +-----------------+ +-----------------+ / | | | /--------------- | class _SignalReactorMixin(object): class ReactorBase(object): / | | | pack a callable obj | | |--&gt; callLater() -----------------&gt; class DelayedCall: | | / | 1 +--&gt; run() | / | | |--&gt; fireSystemEvent(&quot;startup&quot;) / | | | start threadpool / | 2 +--&gt; startRunning() ---&gt; startRunning() &lt;--+ / +--&gt; getTime() | | --------/ | | | / +--&gt; active*() 3 +--&gt; mainLoop() | / | | | +--- runUntilCurrent() &lt;--+ run times call ------/ +--&gt; delay() | | | | | | | mix call | | +--&gt; __le__(), __lt__() | +---------&gt;|----------- timeout() &lt;--+ determine the sleep time | (when push order by time) | | | | | +--- doIteration() &lt;--+ | | | impl v EPollReactor.doPoll() poll(timeout, fds) mainLoop()是由几层while嵌套实现以poll机制驱动整个程序运作. 1 Twisted介绍 1.1 Deffereds Twisted uses the Deferred object to manage the callback sequence. The client application attaches a series of functions to the deferred to be called in order when the results of the asynchronous request are available (this series of functions is known as a series of callbacks, or a callback chain), together with a series of functions to be called if there is an error in the asynchronous request (known as a series of errbacks or an errback chain). The asynchronous library code calls the first callback when the result is available, or the first errback when an error occurs, and the Deferred object then hands the results of each callback or errback function to the next function in the chain. 引用 1.2 Callback A twisted.internet.defer.Deferred is a promise that a function will at some point have a result. We can attach callback functions to a Deferred, and once it gets a result these callbacks will be called. In addition Deferreds allow the developer to register a callback for an error, with the default behavior of logging the error. The deferred mechanism standardizes the application programmer’s interface with all sorts of blocking or delayed operations. 1.3 Timeouts Timeouts are a special case of Cancellation. Let’s say we have a Deferred representing a task that may take a long time. We want to put an upper bound on that task, so we want the Deferred to time out X seconds in the future. A convenient API to do so is Deferred.addTimeout. By default, it will fail with a TimeoutError if the Deferred hasn’t fired (with either an errback or a callback) within timeout seconds. 2 源码实例 2.1 代码-1 (单回调) #!/usr/bin/python3 # -*- coding: utf-8 -*- from twisted.internet import reactor, defer def getDummyData(inputData): print(&#39;getDummyData called&#39;) deferred = defer.Deferred() reactor.callLater(2, deferred.callback, inputData * 3) return deferred def cbPrintData(result): print(&#39;Result received: {}&#39;.format(result)) deferred = getDummyData(3) deferred.addCallback(cbPrintData) # manually set up the end of the process by asking the reactor to # stop itself in 4 seconds time reactor.callLater(4, reactor.stop) # start up the Twisted reactor (event loop handler) manually print(&#39;Starting the reactor&#39;) reactor.run() 如果reactor.callLater(2, deferred.callback, inputData * 3)参数deferred.callback换成普通函数, 那么deferred.addCallback添加的 callback将不会执行, 要理解DelayCall对象和Deffered中callbacks之间的联系. Deffered类 如果有多个deferred.addCallback, 前一个回调的返回作为后一个callback的参数. 2.2 代码-2 (多回调) #!/usr/bin/python3 # -*- coding: utf-8 -*- from twisted.internet import reactor, defer class Getter: def gotResults(self, x): if self.d is None: print(&quot;Nowhere to put results&quot;) return d = self.d self.d = None if x % 2 == 0: d.callback(x*3) else: d.errback(ValueError(&quot;You used an odd number!&quot;)) def _toHTML(self, r): return &quot;Result: %s&quot; % r def getDummyData(self, x): self.d = defer.Deferred() reactor.callLater(2, self.gotResults, x) self.d.addCallback(self._toHTML) return self.d def cbPrintData(result): print(result) def ebPrintError(failure): import sys sys.stderr.write(str(failure)) # this series of callbacks and errbacks will print an error message g = Getter() d = g.getDummyData(3) d.addCallback(cbPrintData) d.addErrback(ebPrintError) # this series of callbacks and errbacks will print &quot;Result: 12&quot; g = Getter() d = g.getDummyData(4) d.addCallback(cbPrintData) d.addErrback(ebPrintError) reactor.callLater(4, reactor.stop) reactor.run() 2.3 代码-3 (线程) #!/usr/bin/python3 # -*- coding: utf-8 -*- from twisted.internet.defer import Deferred from twisted.internet import reactor import threading def loadRemoteData(callback, errback, url): print(&quot;thread[%s] url = %s&quot; % (threading.current_thread().name, url)) # callback 和 errback 只能调用其中一个, 否则:AlreadyCalledError callback(&#39;callback data&#39;) # errback(ValueError(&quot;errback dat&quot;)) def getResult(v): print(&quot;thread[%s] result = %s&quot; % (threading.current_thread().name, v)) def getError(e): print(&quot;thread[%s] error = %s&quot; % (threading.current_thread().name, str(e))) if __name__ == &#39;__main__&#39;: d = Deferred() d.addCallback(getResult) d.addErrback(getError) print(&quot;main():thread[%s]&quot; % threading.current_thread().name) reactor.callInThread(loadRemoteData, d.callback, d.errback, &quot;http://www.baidu.com&quot;) reactor.callLater(4, reactor.stop); reactor.run() 3 源码剖析 主要文件: 1. defer.py 2. base.py 3.1 Deffered类 class Deferred | callbacks: 存callback, _chainedTo: 将多个Deffered串成链 reactor.callLater | | +---&gt; addCallbacks() &lt;---+----+----+ | | | | | | +---&gt; addCallback() -----+ | | call v | | | DelayedCall +---&gt; addErrback() -----------+ | | | | | +---&gt; addBoth() -----------+-------+ | | | v +---&gt; addTimeout() --------+ reactor.run | | +---&gt; pause()/cancel() | | | | Understand the relation between callback and DelayCall v +---&gt; callback() --------- &lt;----------------------------------------------------+ timeout | call / | | +---&gt; errback()----- / | | | / / | | | / / | v | v v DelayedCall.fun()--&gt;Deferred.callback() +---&gt; _runCallbacks | | | | | o----&gt; item = callbacks.pop(0) | | | | | | Normal: | | o----&gt; item.callbak() &lt;------------------------------------------------------+ | | | | Exception: | o----&gt; failure.Failure() | | 3.2 reactor方法 3.2.1 1. reactor.callLater() // reactor.callLater(2, deferred.callback, inputData * 3) @implementer(IReactorCore, IReactorTime, IReactorPluggableResolver, IReactorPluggableNameResolver) class ReactorBase(object): ... def callLater(self, _seconds, _f, *args, **kw): tple = DelayedCall(self.seconds() + _seconds, _f, args, kw, self._cancelCallLater, self._moveCallLaterSooner, seconds=self.seconds) self._newTimedCalls.append(tple) return tple 将参数封装到DelayedCall对象中并存储在_newTimeCalls变量中, 需要注意的是callLater处理及回调函数还是在主线程中调用的. 3.2.2 2. reactor.run() // reactor.run() class _SignalReactorMixin(object): ... def run(self, installSignalHandlers=True): self.startRunning(installSignalHandlers=installSignalHandlers) self.mainLoop() def startRunning(self, installSignalHandlers=True): self._installSignalHandlers = installSignalHandlers ReactorBase.startRunning(self) def mainLoop(self): while self._started: try: while self._started: self.runUntilCurrent() t2 = self.timeout() t = self.running and t2 self.doIteration(t) except: log.msg(&quot;Unexpected error in main loop.&quot;) log.err() else: log.msg(&#39;Main loop terminated.&#39;) _SignalReactorMixi 混合类, 调用了与它自身没有任何血缘关ReactorBase的方法runUntilCurrent, timeout, doIteration及startRunning. class ReactorBase(object): | | +---&gt; startRunning() | | | | | | +------o---&gt; fireSystemEvent() | | &quot;startup&quot; | | | o---&gt; _eventTriggers.get() | | | | | o---&gt; event.fireEvent() | | | running = True | | | o---&gt; DeferredList.addCallback() +---&gt; mainLoop() | | | | | | | o---&gt; Deferred._runCallbacks() | o---&gt; runUntilCurrent() | | | | _pendingTimedCalls | 队列中以时间排序 | reactor在install初始化时完成了两个重要操作: 1. self._initThreads() 线程池 2. self.installWaker() 唤醒线程, impl: PosixReactorBase.installWaker class ReactorBase(object): ... def runUntilCurrent(self): &quot;&quot;&quot; Run all pending timed calls. &quot;&quot;&quot; if self.threadCallQueue: count = 0 total = len(self.threadCallQueue) for (f, a, kw) in self.threadCallQueue: try: f(*a, **kw) except: log.err() count += 1 if count == total: break del self.threadCallQueue[:count] if self.threadCallQueue: self.wakeUp() # insert new delayed calls now self._insertNewDelayedCalls() now = self.seconds() while self._pendingTimedCalls and (self._pendingTimedCalls[0].time &lt;= now): call = heappop(self._pendingTimedCalls) if call.cancelled: self._cancellations-=1 continue if call.delayed_time &gt; 0: call.activate_delay() heappush(self._pendingTimedCalls, call) continue try: call.called = 1 call.func(*call.args, **call.kw) except: ... if (self._cancellations &gt; 50 and self._cancellations &gt; len(self._pendingTimedCalls) &gt;&gt; 1): self._cancellations = 0 self._pendingTimedCalls = [x for x in self._pendingTimedCalls if not x.cancelled] heapify(self._pendingTimedCalls) if self._justStopped: self._justStopped = False self.fireSystemEvent(&quot;shutdown&quot;) 3.2.3 3. reactor.callInThread() 涉及文件: 文件 路径 base.py /usr/local/lib/python3.4/dist-packages/twisted/internet defer.py /usr/local/lib/python3.4/dist-packages/twisted/internet threadpool.py /usr/local/lib/python3.4/dist-packages/twisted/python context.py /usr/local/lib/python3.4/dist-packages/twisted/python _pool.py /usr/local/lib/python3.4/dist-packages/twisted/_threads _team.py /usr/local/lib/python3.4/dist-packages/twisted/_threads _threadworker.py /usr/local/lib/python3.4/dist-packages/twisted/_threads context.py模块中call/get方法代理: def installContextTracker(ctr): global theContextTracker global call global get theContextTracker = ctr call = theContextTracker.callWithContext get = theContextTracker.getContext installContextTracker(ThreadedContextTracker()) func函数线程调用图: ReactorBase Deferred ThreadPool ContextTracker Team LockWorker ThreadWorker LocalStorage | | | | | | | | callInThread | | | | | | +----------------------------&gt;|callInThread | | | | | | func | | | | | | | | | | inContext| | | | | callInThreadWithCallback---------------&gt;|do | | | | | | | | | | | | | | | | | | | | +------------&gt;|do | | | | | work | | | | | | | | append | | | | |----------------------------------&gt;|working | | | | | | | | | | pop | | | |&lt;------------------------------------------------| +----------------------+ | | _coordinateThisTask | | _coordinateThisTask | | | | _pool.py | | | | | | | | | +--------------+ | | | worker |-------------------------&gt;| __init__ | | doWork | | | | | limitedWorkerCreator | | | | +----------+ | | | | | | | | | | | inContext| | | | | | | | | | | | +----+ | | | | | | startThread &lt;------------| | | | |func| | | | | | | | | | | | | +----+ | | | | | | | | | | | +----------+ | | | | | Thread.start()------------&gt;| work() | +--------------+ | | | | | | +----------------------+ | | | | while | get task | | @worker.do| | |&lt;------&lt; | | |-------------------------&gt;|do | | | | | | | | | | | | put task | | | | | |--------&gt; | | | | | | | | | | | | | | | doWork |&lt;------------------------------ task()-------^ | | | | | | | | | | inContext&lt;--------task() &lt;---+ | &lt;===&gt; thread end! | | | | theWork() | | _recycleWorker |----------&gt;| context.call | | | | callWithContext | | func() &lt;-----------------------------------+ 过程: 初始化线程池ThreadPool --&gt; 线程协调LockWorker --&gt; 创建工作线程ThreadWorker --&gt; 传递任务(team.do) --&gt; 线程中处理任务 --&gt; 回收 线程 原理: ThreadWorker维护Queue将传递过来的task加入队列, ThreadWorker在初始化时调用startThread()启动Thread.start, 到此一个新的 线程被创建, 该新线程会执行ThreadWorker中work方法, work方法从Queue队列中取新的task去执行.","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"}]},{"title":"(原创)Scrapy之命令行启动流程","date":"2017-08-31T08:01:00.000Z","path":"2017/08/31/Note/Python/Note-Scrapy-Start-Flow/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ Scrapy 命令启动 scrapy crawl 执行流程 Crawler, Spider和Engine +------------------------------&gt; Settings &lt;-------------------------------------------------+ | | settings.py | ◆ | extend +-------------------+ | ScrapyCommand ▽ | SPIDER_MIDDLEWARES| | △ | BaseSettings | ITEM_PIPELINES | | | | | | SPIDER_MODULES | | | o---&gt; add_options() | +-------------------+ | | | o---&gt; setmodule() | | | | | | | | Command o---&gt; process_options() | |------------+ | | | o---&gt; set &lt;--| | | | | = | | o---&gt; virtual run() | | | | crawl o---&gt; run() | | | | command: | | | | ★ 1 +-------------------------------------------------+ | | = +---&gt; crawler_process.crawl() | | | | | | scrapy crawl --nolog s51job -o /tmp/result.csv | | | | 5 | | | | +---&gt; crawler_process.start() +-------------------------------------------------+ | | | | | | | extend crawlers 1:n | o----&gt; CrawlerProcess -----------------------▷ CrawlerRunner ◆-----------------------&gt; Crawler ◇-----+ | | | s51job / | | | | 2 / | ★ o---&gt; start() o---&gt; create_crawler() / o---&gt; crawl() &lt;--------+ | | | | / | | | | | | / | | | +---&gt; reactor.getThreadPool() | +----------------/ o---&gt; _create_spider | | | | | | | | | | | | | | +---&gt; reactor.run() | +------+ o---&gt; _create_engine() | | | o---&gt; stop() | | | | = | | = | | | | | o---&gt; _stop_reactor o---&gt; join() SpiderLoader | | | | | = | 4 | | o---&gt; crawl() o---&gt; _load_all_spiders() | | | | | Spider ◁----- CrawlSpider ◁----- S51jobSpider | | | 3 | | | \\ = +---&gt; crawler.crawl() o---&gt; load(name) | | | \\ | | | | start_urls &lt;---o o---&gt; rules \\ | = | | | \\ is | | | | ------- _create_spider() &lt;---+ spider | parse() &lt;---o o---&gt; parse_start_url() | &lt;----+ | | 6 | | = _create_engine() &lt;---+ engine | / | o---&gt; start_requests() is / | | yield ☜ / = = ExecutionEngine ----- ◆ | | | ★ 7 | o---&gt; open_spider() +------------------+ | | | | Slot &lt;--------------------------------+ | | | | o---&gt; start() | Twisted Deffer | | | | | o---&gt; nextcall() | | | | o---&gt; stop/pause/close() +------------------+ | | o---&gt; scheduler() | | o---&gt; download/schedule/crawl() | 8 | o---&gt; heartbeat()-----------+ | | | | o---&gt; _next_request() = | task.LoopingCall() | | +--------------------+ = 0.1 Scrapy 命令启动 0.1.1 scrapy crawl 执行流程 bin/scrapy: 7 from scrapy.cmdline import execute 8 9 if __name__ == &#39;__main__&#39;: 10 sys.argv[0] = re.sub(r&#39;(-script\\.pyw|\\.exe)?$&#39;, &#39;&#39;, sys.argv[0]) 11 sys.exit(execute()) scrapy/cmdline.py: 97 def execute(argv=None, settings=None): 98 if argv is None: 99 argv = sys.argv 100 101 # --- backwards compatibility for scrapy.conf.settings singleton --- 102 if settings is None and &#39;scrapy.conf&#39; in sys.modules: 103 from scrapy import conf 104 if hasattr(conf, &#39;settings&#39;): 105 settings = conf.settings 106 # ------------------------------------------------------------------ 107 108 if settings is None: 109 settings = get_project_settings() 110 # set EDITOR from environment if available 111 try: 112 editor = os.environ[&#39;EDITOR&#39;] 113 except KeyError: pass 114 else: 115 settings[&#39;EDITOR&#39;] = editor 116 check_deprecated_settings(settings) 117 118 # --- backwards compatibility for scrapy.conf.settings singleton --- 119 import warnings 120 from scrapy.exceptions import ScrapyDeprecationWarning 121 with warnings.catch_warnings(): 122 warnings.simplefilter(&quot;ignore&quot;, ScrapyDeprecationWarning) 123 from scrapy import conf 124 conf.settings = settings 125 # ------------------------------------------------------------------ 126 127 inproject = inside_project() 128 cmds = _get_commands_dict(settings, inproject) 129 cmdname = _pop_command_name(argv) 130 parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), \\ 131 conflict_handler=&#39;resolve&#39;) 132 if not cmdname: 133 _print_commands(settings, inproject) 134 sys.exit(0) 135 elif cmdname not in cmds: 136 _print_unknown_command(settings, cmdname, inproject) 137 sys.exit(2) 138 139 cmd = cmds[cmdname] 140 parser.usage = &quot;scrapy %s %s&quot; % (cmdname, cmd.syntax()) 141 parser.description = cmd.long_desc() 142 settings.setdict(cmd.default_settings, priority=&#39;command&#39;) 143 cmd.settings = settings 144 cmd.add_options(parser) 145 opts, args = parser.parse_args(args=argv[1:]) 146 _run_print_help(parser, cmd.process_options, args, opts) 147 148 cmd.crawler_process = CrawlerProcess(settings) 149 _run_print_help(parser, _run_command, cmd, args, opts) 150 sys.exit(cmd.exitcode) 151 152 def _run_command(cmd, args, opts): 153 if opts.profile: 154 _run_command_profiled(cmd, args, opts) 155 else: 156 cmd.run(args, opts) 前大部分对参数和工程Setting解析处理, 最后_run_print_help --&gt;_run_command --&gt; cmd.run, 这里的cmd实际上就是crawl commands/crawl.py: 50 def run(self, args, opts): 51 if len(args) &lt; 1: 52 raise UsageError() 53 elif len(args) &gt; 1: 54 raise UsageError(&quot;running &#39;scrapy crawl&#39; with more than one spider is no longer supported&quot;) 55 spname = args[0] 56 57 self.crawler_process.crawl(spname, **opts.spargs) 58 self.crawler_process.start() 继续调用crawler_process对象中crawl,start方法, 即CrawlerProcess, 其父类CrawlerRunner实现crawl方法 crawler.py: 110 class CrawlerRunner(object): 144 def crawl(self, crawler_or_spidercls, *args, **kwargs): 166 crawler = self.create_crawler(crawler_or_spidercls) 167 return self._crawl(crawler, *args, **kwargs) 181 def create_crawler(self, crawler_or_spidercls): 192 if isinstance(crawler_or_spidercls, Crawler): 193 return crawler_or_spidercls 194 return self._create_crawler(crawler_or_spidercls) 195 196 def _create_crawler(self, spidercls): 197 if isinstance(spidercls, six.string_types): 198 spidercls = self.spider_loader.load(spidercls) 199 return Crawler(spidercls, self.settings) crawler_or_spidercls spider名字, 经过spider_loader.load()转换为对应的spider对象(父类CrawlSpider), 这一步很关键, 自己实现的spider 继承CrawlSpider. self.spider_loader: scrapy.spiderloader.SpiderLoader spiderloader.py: 15 class SpiderLoader(object): 16 &quot;&quot;&quot; 17 SpiderLoader is a class which locates and loads spiders 18 in a Scrapy project. 19 &quot;&quot;&quot; 20 def __init__(self, settings): 21 self.spider_modules = settings.getlist(&#39;SPIDER_MODULES&#39;) 22 self.warn_only = settings.getbool(&#39;SPIDER_LOADER_WARN_ONLY&#39;) 23 self._spiders = {} 24 self._found = defaultdict(list) 25 self._load_all_spiders() ... 44 def _load_all_spiders(self): 45 for name in self.spider_modules: 47 for module in walk_modules(name): 48 self._load_spiders(module) SPIDER_MODULES: 当前工程settings.py变量 _load_all_spiders: 加载所有自定义的spider crawler.py: 27 class Crawler(object): 28 70 def crawl(self, *args, **kwargs): 71 assert not self.crawling, &quot;Crawling already taking place&quot; 72 self.crawling = True 73 74 try: 75 self.spider = self._create_spider(*args, **kwargs) 76 self.engine = self._create_engine() 77 start_requests = iter(self.spider.start_requests()) 78 yield self.engine.open_spider(self.spider, start_requests) 79 yield defer.maybeDeferred(self.engine.start) 80 except Exception: 89 self.crawling = False 90 if self.engine is not None: 91 yield self.engine.close() 92 93 if six.PY2: 94 six.reraise(*exc_info) 95 raise 97 def _create_spider(self, *args, **kwargs): 98 return self.spidercls.from_crawler(self, *args, **kwargs) self.spidercls.from_crawler调入到CrawlSpider spiders/crawl.py: 34 class CrawlSpider(Spider): 35 98 @classmethod 99 def from_crawler(cls, crawler, *args, **kwargs): 100 spider = super(CrawlSpider, cls).from_crawler(crawler, *args, **kwargs) 101 spider._follow_links = crawler.settings.getbool( 102 &#39;CRAWLSPIDER_FOLLOW_LINKS&#39;, True) 103 return spider spiders/init.py: 18 class Spider(object_ref): 49 @classmethod 50 def from_crawler(cls, crawler, *args, **kwargs): 51 spider = cls(*args, **kwargs) 52 spider._set_crawler(crawler) 53 return spider 到此应该知道自己的spider 如何创建的了 0.1.2 Crawler, Spider和Engine scrapy/crawler.py: 27 class Crawler(object): ... 70 def crawl(self, *args, **kwargs): 71 assert not self.crawling, &quot;Crawling already taking place&quot; 72 self.crawling = True 73 74 try: 75 self.spider = self._create_spider(*args, **kwargs) 76 self.engine = self._create_engine() ... 97 def _create_spider(self, *args, **kwargs): 98 return self.spidercls.from_crawler(self, *args, **kwargs) 99 100 def _create_engine(self): 101 return ExecutionEngine(self, lambda _: self.stop()) ExecutionEngine 结构: ▼ ExecutionEngine : class +__init__ : function +start : function +stop : function +close : function +pause : function +unpause : function +_next_request : function +_needs_backout : function +_next_request_from_scheduler : function +_handle_downloader_output : function +spider_is_idle : function +open_spiders : function +has_capacity : function +crawl : function +schedule : function +download : function +_downloaded : function ▼+_download : function +_on_success : function +_on_complete : function +open_spider : function +_spider_idle : function ▼+close_spider : function ▼+log_failure : function +errback : function +_close_all_spiders : function +_finish_stopping_engine : function core/engine.py: 56 class ExecutionEngine(object): 57 58 def __init__(self, crawler, spider_closed_callback): 59 self.crawler = crawler 60 self.settings = crawler.settings 61 self.signals = crawler.signals 62 self.logformatter = crawler.logformatter 63 self.slot = None 64 self.spider = None 65 self.running = False 66 self.paused = False 67 self.scheduler_cls = load_object(self.settings[&#39;SCHEDULER&#39;]) 68 downloader_cls = load_object(self.settings[&#39;DOWNLOADER&#39;]) 69 self.downloader = downloader_cls(crawler) 70 self.scraper = Scraper(crawler) 71 self._spider_closed_callback = spider_closed_callback ... 253 def open_spider(self, spider, start_requests=(), close_if_idle=True): 254 assert self.has_capacity(), &quot;No free spider slot when opening %r&quot; % \\ 255 spider.name 256 logger.info(&quot;Spider opened&quot;, extra={&#39;spider&#39;: spider}) 257 nextcall = CallLaterOnce(self._next_request, spider) 258 scheduler = self.scheduler_cls.from_crawler(self.crawler) 259 start_requests = yield self.scraper.spidermw.process_start_requests(start_requests, spider) 260 slot = Slot(start_requests, close_if_idle, nextcall, scheduler) 261 self.slot = slot 262 self.spider = spider 263 yield scheduler.open(spider) 264 yield self.scraper.open_spider(spider) 265 self.crawler.stats.open_spider(spider) 266 yield self.signals.send_catch_log_deferred(signals.spider_opened, spider=spider) 267 slot.nextcall.schedule() 268 slot.heartbeat.start(5) Setting name value SCHEDULER scrapy.core.scheduler.Scheduler DOWNLOADER scrapy.core.downloader.Downloader DUPEFILTER_CLASS scrapy.dupefilters.RFPDupeFilter SCHEDULER_PRIORITY_QUEUE queuelib.PriorityQueue SCHEDULER_DISK_QUEUE scrapy.squeues.PickleLifoDiskQueue SCHEDULER_MEMORY_QUEUE scrapy.squeues.LifoMemoryQueue SPIDER_LOADER_CLASS scrapy.spiderloader.SpiderLoader","tags":[{"name":"Python","slug":"Python","permalink":"https://qrsforever.github.io/tags/Python/"}]},{"title":"(原创)Tutorial for Markdown","date":"2017-08-30T07:31:00.000Z","path":"2017/08/30/Tutorial/Markdown/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ Markdown 基本语法 加载custom样式 块注释 字体 斜体 粗体 划线 列表 无序列表 有序列表 自动有序 标签序列 定义型列表 包含引用 Task List 链接 内联 引用 自动连接 锚点 图片 代码 引用 简单 嵌套 引用其他要素 注脚 段落 列表缩进 行块 换行 表格 无表头 有表头 其他 分割线 反斜杠 非标用法 hexo blockquote codeblock Emoji References 1 Markdown 基本语法 Pandoc pass attributes via {}. see 锚点 1.1 加载custom样式 &lt;link href=&quot;/static/css/qrs.css&quot; rel=&quot;stylesheet&quot;&gt; 1.2 块注释 每行后面2个空格,不多不少, 嵌套时层级之间加一个&gt; &gt; 块注释0 &gt; &gt; &gt; 块注释1 &gt; &gt; &gt; &gt; 块注释2 &gt; ### This is a header. &gt; &gt; 1. This is the first list item. &gt; 2. This is the second list item. &gt; &gt; Here&#39;s some example code: &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); &gt; This is a block quote. This &gt; paragraph has two lines. &gt; &gt; 1. This is a list inside a block quote. &gt; 2. Second item. &gt; This is a block quote. &gt; &gt; &gt; A block quote within a block quote. &gt; This is a block quote. with latex the sum denotes $\\sum_{a=0}^{n}$ 块注释0 块注释1 块注释2 1.2 This is a header. This is the first list item. This is the second list item. Here's some example code: return shell_exec(&quot;echo $input | $markdown_script&quot;); This is a block quote. This paragraph has two lines. This is a list inside a block quote. Second item. This is a block quote. A block quote within a block quote. This is a block quote. with latex the sum denotes \\(\\sum_{a=0}^{n}\\) 1.3 字体 1.3.1 斜体 *斜体0* _斜体1_ 斜体0 斜体1 1.3.2 粗体 **粗体0** __粗体1__ 粗体0 粗体1 1.3.3 划线 ~~划线~~ 划线 1.4 列表 1.4.1 无序列表 * 无序0 - 无序1 + 无序2 无序0 无序1 无序2 1.4.2 有序列表 1. 有序0 2. 有序1 3. 有序2 有序0 有序1 有序2 1.4.3 自动有序 #. You can use integers or the `#` symbol in enumerated lists. #. This is quite convenient. For example, i. You don&#39;t have to count ii. If you want to change the order, no numbering needs to be changed #. You can also use roman numerals, obviously. You can use integers or the # symbol in enumerated lists. This is quite convenient. For example, i. You don't have to count If you want to change the order, no numbering needs to be changed You can also use roman numerals, obviously. 1.4.4 标签序列 (@case-1) This is Example1. (@case-2) This is Example2. You can refer to an example by its label. For instance Example (@case-2). This is Example1. This is Example2. You can refer to an example by its label. For instance Example (2). 1.4.5 定义型列表 Markdown : 轻量级文本标记语言 Code2 : 这是代码块的定义 import numpy as np Markdown 轻量级文本标记语言 Code2 这是代码块的定义 import numpy as np 1.4.6 包含引用 * 阅读方法： &gt; 打开书本 &lt;br/&gt; &gt; 打开电灯 阅读方法： 打开书本 打开电灯 1.4.7 Task List GFM(github flavoured markdown)支持, pandoc2.6 high - [x] Write the press release - [ ] Update the website - [ ] Contact the media [x] Write the press release [ ] Update the website [ ] Contact the media 1.5 链接 1.5.1 内联 内联方式 [百度](http://www.baidu.com) 内联方式 百度 1.5.2 引用 引用方式 [谷歌][1] [百度][2] [1]: http://www.google.com &quot;谷歌&quot; [2]: http://www.baidu.com &quot;百度&quot; 引用方式 谷歌 百度 1.5.3 自动连接 http://www.baidu.com/ 1.6 锚点 Pandoc在标题行直接加`{#myanchor}`, 可以实现锚点, 不需要[]{#myanchor} [AnchorText]{#mytext} &lt;span id=&quot;m1&quot;&gt;锚点1:&lt;/span&gt; anchor1 anchor1 anchor1 &lt;span id=&quot;m2&quot;&gt;锚点2:&lt;/span&gt; anchor2 anchor2 anchor2 [锚点1](#m1 &quot;anchor alt text&quot;) [锚点2][anchor2] [anchor2]:#m2 &quot;anchor alt text&quot; [锚点3](#mytext) AnchorText 锚点1: anchor1 anchor1 anchor1 锚点2: anchor2 anchor2 anchor2 锚点1 锚点2 锚点3 1.7 图片 &lt;div align=&#39;center&#39;&gt; 内联方式:![alt text](/img/avatar.jpg &quot;Title&quot;) 引用方式:![alt text][id] &lt;/div&gt; [id]: /img/avatar.jpg &quot;Title&quot; pandoc: ![link text](/img/avatar.jpg){.float-right width=20px height=10%} 图片居中: .center 内联方式: 引用方式: pandoc: float-right 1.8 代码 \\`one line\\` \\`\\`\\`java for (int i = 0; i &lt; 100; ++i) printf(i); \\`\\`\\` \\`\\`\\` for (int i = 0; i &lt; 100; ++i) printf(&quot;longggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg line&quot;); \\`\\`\\` for (int i = 0; i &lt; 100; ++i) printf(i); for (int i = 0; i &lt; 100; ++i) printf(i); for (int i = 0; i &lt; 100; ++i) printf(i); one line for (int i = 0; i &lt; 100; ++i) printf(i); for (int i = 0; i &lt; 100; ++i) printf(&quot;longggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg line&quot;); for (int i = 0; i &lt; 100; ++i) printf(i); for (int i = 0; i &lt; 100; ++i) printf(i); for (int i = 0; i &lt; 100; ++i) printf(i); 1.9 引用 注意每行后面都有两个空格 1.9.1 简单 &gt; 这是一个有两段文字的引用, 无意义的占行文字1. 无意义的占行文字2. &gt; 无意义的占行文字3. 无意义的占行文字4. 这是一个有两段文字的引用, 无意义的占行文字1. 无意义的占行文字2. 无意义的占行文字3. 无意义的占行文字4. 1.9.2 嵌套 &gt; &gt; &gt; 请问 Markdwon 怎么用? - 小白 &gt; &gt; &gt; &gt; 自己看教程! - 愤青 &gt; 教程在哪? - 小白 请问 Markdwon 怎么用? - 小白 自己看教程! - 愤青 教程在哪? - 小白 更多 1.9.3 引用其他要素 &gt; 1. 这是第一行列表项. &gt; 2. 这是第二行列表项. &gt; &gt; 给出一些例子代码: &gt; ```c &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); &gt; ``` 这是第一行列表项. 这是第二行列表项. 给出一些例子代码: return shell_exec(&quot;echo $input | $markdown_script&quot;); 1.10 注脚 Here&#39;s a simple footnote,[^1] and here&#39;s a longer one.[^bignote] [^1]: This is the first footnote. [^bignote]: Here&#39;s one with multiple paragraphs and code. Indent paragraphs to include them in the footnote. `{ my code }` Add as many paragraphs as you like. Here's a simple footnote,1 and here's a longer one.2 1.11 段落 1.11.1 列表缩进 * 后有个空格, 最多3个, 如果每一项多个段落, 则段落前4个空格 * 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚康桥！ * 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 1.11.2 行块 | I&#39;m very good at integral and differential calculus; | I know the scientific names of beings animalculous: | In short, in matters vegetable, animal, and mineral, | I am the very model of a modern Major-General. | I'm very good at integral and differential calculus; I know the scientific names of beings animalculous: In short, in matters vegetable, animal, and mineral, I am the very model of a modern Major-General. 1.12 换行 longggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg newlongggggggggggggggggggggg gggggggggggggggggggggggggggg(我后面有两个空格) gggggggggggggggggggggggggggg aaa&lt;br/&gt;&lt;br/&gt;bbb&lt;br/&gt;&lt;br/&gt; longggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg newlongggggggggggggggggggggg gggggggggggggggggggggggggggg(我后面有两个空格) gggggggggggggggggggggggggggg aaabbb 1.13 表格 1.13.1 无表头 对齐方式靠上下线与第一行第一个字母和最后一个字母有关 ------- ------------- ------- ---- Joan saag paneer medium $11 Sally vindaloo mild $14 Erin lamb madras HOT $5 ------- ------------- ------- ---- Joan saag paneer medium $11 Sally vindaloo mild $14 Erin lamb madras HOT $5 1.13.2 有表头 Name | Lunch order | Spicy | Owes ------- | :----------------: | :---------- | ---------: Joan | saag paneer | medium | $11 Sally | vindaloo | mild | $14 Erin | lamb madras | HOT | $5 冒号**:**表示对齐方式, 没有默认居右 Name Lunch order Spicy Owes Joan saag paneer medium $11 Sally vindaloo mild $14 Erin lamb madras HOT $5 冒号:表示对齐方式, 没有默认居右 1.14 其他 1.14.1 分割线 ______ 1.14.2 反斜杠 符号|名称 :---:|:--- \\\\ | 反斜线 \\` | 反引号 \\* | 星号 \\_ | 底线 \\{ |花括号 \\[ |方括号 \\( |括弧 \\# | 井字号 \\+ | 加号 \\- | 减号 \\. | 英文句点 \\! | 惊叹号 符号 名称 \\ 反斜线 ` 反引号 * 星号 _ 底线 { 花括号 [ 方括号 ( 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 2 非标用法 2.1 hexo 2.1.1 blockquote {% blockquote QRS, https://qrsforever.github.io https://qrsforever.github.io/2019/07/18/Tools/How/china_images/#npm \"国内npm下载源镜像\" %} npm config set registry https://registry.npm.taobao.org npm config get registry {% endblockquote %} dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} npm config set registry https://registry.npm.taobao.org npm config get registry QRS, https://qrsforever.github.io国内npm下载源镜像 2.1.2 codeblock {% codeblock \"codeblock test\" lang:c http://www.baidu.com \"link text\" line_number:true highlight:true first_line:1 %} aa = 1 bb = 2 cc = 3 for (int i = 0; i < 10; ++i) { print(i); } {% endcodeblock %} codeblock testlink text123456aa = 1bb = 2cc = 3for (int i = 0; i &lt; 10; ++i) &#123; print(i);&#125; 2.1.3 Emoji 官网 查找 3 References http://www.nrstickley.com/pandoc-markdown/ This is the first footnote.↩ Here's one with multiple paragraphs and code. Indent paragraphs to include them in the footnote. { my code } Add as many paragraphs as you like.↩","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://qrsforever.github.io/tags/Markdown/"}]},{"title":"个人简历","date":"2017-08-29T17:01:01.000Z","path":"2017/08/30/CV/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 码农~李东 基本资料 姓名: 李东 邮箱: 705723886@qq.com 性别: 男 年龄: 32 学历: 本科 毕业院校: 湖南理工 电话: 1580131---- 薪资要求: ---- 博客: qrsforever.github.io 工作意向: 数据挖掘,人工智能 教育背景 湖南理工学院 本科 计算机科学与技术 人民大学 在职研究生 统计学 工作经历 2019.10~20xx.xx 华智创视 高级软件工程师 负责机器学习框架设计,搭建,优化等(框架包括计算机视觉CV,自然语言处理NLP, 强化学习RL, 传统ML等) 2016.06~2019.10 乐视致新 高级软件工程师 VR项目, 负责基于Oculus的ATW及多版本升级维护方案设计 乐视TV性能及稳定性, 综合性问题定位(anr, tomstone, FC等), 多种机制统计查杀等工作 智能家居项目, 负责软件的设计与开发, 包括:代码架构, 规则引擎, 消息系统, 监控调试模块等 2010.11~2016.06 裕兴软件 软件开发工程师 负责dvbs码流解析, 主要包括EIT, SDT, TDT, NIT, TOT等解析 匈牙利,卡塔尔等国际机顶盒项目, 负责多个模块开发与实现 家里云项目, 负责50%以上的软件开发与实现 获得荣誉 优秀毕业生, 优秀个人设计奖 裕兴软件优秀员工, 乐视致新优秀员工 专业技能 熟悉C/C++, Java, Python, Shell, 掌握JavaScript, VimScript, Html, CLIPS等 熟悉Linux系统, 熟悉各种命令及搭建各种服务 熟悉常用的软件设计模式, 熟悉网络TCP/IP协议, 进程IPC, 存储类SQL等 熟悉高等统计学的基础知识, 掌握Hadoop, Zookeeper, Hbase等 熟悉机器学习, 神经网络等人工智能相关知识及框架 自我评价 爱岗敬业, 勇于创新, 具有良好的沟通能力和团队协作能力 自学能力强, 适应能力强, 善于分析和解决问题 踏实肯干, 认真负责, 吃苦耐劳","tags":[]},{"title":"(原创)匿名共享内存之文件描述符传递","date":"2016-06-24T07:52:36.000Z","path":"2016/06/24/Note/Android/Ashmem/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; left: -4em; } pre.numberSource a.sourceLine::before { content: attr(title); position: relative; left: -1em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; display: inline-block; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; } /* Alert */ code span.an { color: #008000; } /* Annotation */ code span.at { } /* Attribute */ code span.bu { } /* BuiltIn */ code span.cf { color: #0000ff; } /* ControlFlow */ code span.ch { color: #008080; } /* Char */ code span.cn { } /* Constant */ code span.co { color: #008000; } /* Comment */ code span.cv { color: #008000; } /* CommentVar */ code span.do { color: #008000; } /* Documentation */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.im { } /* Import */ code span.in { color: #008000; } /* Information */ code span.kw { color: #0000ff; } /* Keyword */ code span.op { } /* Operator */ code span.ot { color: #ff4000; } /* Other */ code span.pp { color: #ff4000; } /* Preprocessor */ code span.sc { color: #008080; } /* SpecialChar */ code span.ss { color: #008080; } /* SpecialString */ code span.st { color: #008080; } /* String */ code span.va { } /* Variable */ code span.vs { color: #008080; } /* VerbatimString */ code span.wa { color: #008000; font-weight: bold; } /* Warning */ 目录树 源码 2.1 Common.h 2.2 AshmemServer.cpp 2.3 AshmemClient.cpp 2.4 Android.mk 3. 输出结果 3.1 /data/AshmemServer 3.2 /data/AshmemClient 4. 总结 源码下载 0.1 目录树 Ashmem/ `-- jni |-- Android.mk |-- AshmemClient.cpp |-- AshmemServer.cpp `-- Common.h 0.2 源码 0.2.1 2.1 Common.h #ifndef __Common__H_ #define __Common__H_ #define ASHMEM_SIZE 1024 #define ASHEME_DEV &quot;/dev/ashmem&quot; #define OPEN_FILE &quot;/var/_cmsg_file&quot; #define CLIENT_SOCK_PATH &quot;/var/_client_sock&quot; #define SERVER_SOCK_PATH &quot;/var/_server_sock&quot; #define TEST_STRING &quot;HelloWorld&quot; #endif 0.2.2 2.2 AshmemServer.cpp #include &lt;stdio.h&gt; #include &lt;stddef.h&gt; #include &lt;fcntl.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/socket.h&gt; #include &lt;sys/stat.h&gt; #include &lt;sys/types.h&gt; #include &lt;sys/un.h&gt; #include &lt;sys/mman.h&gt; #include &lt;errno.h&gt; #include &lt;sys/uio.h&gt; #include &lt;linux/ashmem.h&gt; #include &quot;Common.h&quot; int main(int argc, char const* argv[]) { int sockfd = -1, clientfd = -1, memfd = -1, testfd = -1; int len = 0, ret = 0, err = -1, readn = 0; char buf1[5]; char buf2[4]; char* mapaddr = 0; struct sockaddr_un un; struct cmsghdr* cmptr = 0; struct cmsghdr* pcmsg = 0; struct iovec iov[2]; struct msghdr msg; sockfd = socket(PF_UNIX, SOCK_STREAM, 0); if (sockfd &lt; 0) return err; unlink(SERVER_SOCK_PATH); memset(&amp;un, 0, sizeof(un)); un.sun_family = AF_UNIX; strcpy(un.sun_path, SERVER_SOCK_PATH); len = offsetof(struct sockaddr_un, sun_path) + strlen(SERVER_SOCK_PATH); ret = bind(sockfd, (struct sockaddr*)&amp;un, len); if (ret &lt; 0) { err = -2; goto Err; } ret = listen(sockfd, 1); if (ret &lt; 0) { err = -3; goto Err; } len = sizeof(un); memset(&amp;un, 0, len); clientfd = accept(sockfd, (struct sockaddr*)&amp;un, &amp;len); if (clientfd &lt; 0) { err = -4; goto Err; } printf(&quot;accept client fd = %d\\n&quot;, clientfd); cmptr = (struct cmsghdr*)malloc(CMSG_SPACE(sizeof(int))); if (!cmptr) { err = -5; goto Err; } iov[0].iov_base = buf1; iov[0].iov_len = sizeof(buf1); iov[1].iov_base = buf2; iov[1].iov_len = sizeof(buf2); msg.msg_iov = iov; msg.msg_iovlen = 2; msg.msg_name = 0; msg.msg_namelen = 0; msg.msg_control = cmptr; msg.msg_controllen = CMSG_SPACE(sizeof(int)); readn = recvmsg(clientfd, &amp;msg, 0); if (readn &lt;= 0) { err = -6; printf(&quot;Errno = %d %s\\n&quot;, errno, strerror(errno)); goto Err; } printf(&quot;buf1 = %s\\nbuf2 = %s\\n&quot;, buf1, buf2); pcmsg = CMSG_FIRSTHDR(&amp;msg); while (pcmsg) { if ((pcmsg-&gt;cmsg_level == SOL_SOCKET) &amp;&amp; (pcmsg-&gt;cmsg_type == SCM_RIGHTS)) { if (pcmsg-&gt;cmsg_len == CMSG_LEN(sizeof(int))) { memfd = *(int*)CMSG_DATA(pcmsg); break; } } pcmsg = CMSG_NXTHDR(&amp;msg, pcmsg); } if (memfd &gt; 0) { mapaddr = (char*)mmap(0, ASHMEM_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, memfd, 0); printf(&quot;get memfd = %d mapaddr = %p\\n&quot;, memfd, mapaddr); } memcpy(mapaddr, TEST_STRING, strlen(TEST_STRING)); sleep(5); free(cmptr); return 0; Err: printf(&quot;error = %d\\n&quot;, err); close(sockfd); return err; } 0.2.3 2.3 AshmemClient.cpp #include &lt;stdio.h&gt; #include &lt;stddef.h&gt; #include &lt;fcntl.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/socket.h&gt; #include &lt;sys/stat.h&gt; #include &lt;sys/mman.h&gt; #include &lt;sys/types.h&gt; #include &lt;sys/un.h&gt; #include &lt;sys/uio.h&gt; #include &lt;linux/ashmem.h&gt; #include &quot;Common.h&quot; int main(int argc, char const* argv[]) { int sockfd = -1, memfd = -1, testfd = -1, err = -1; int len =0, ret = 0, writen = 0; char buf1[5] = {&quot;file&quot;}; char buf2[4] = {&quot;map&quot;}; char* mapaddr = 0; char content[32] = { 0 }; struct sockaddr_un un; struct cmsghdr* cmptr = 0; struct cmsghdr* pcmsg = 0; struct iovec iov[2]; struct msghdr msg; sockfd = socket(PF_UNIX, SOCK_STREAM, 0); if (sockfd &lt; 0) return err; unlink(CLIENT_SOCK_PATH); memset(&amp;un, 0, sizeof(un)); un.sun_family = AF_UNIX; strcpy(un.sun_path, CLIENT_SOCK_PATH); len = offsetof(struct sockaddr_un, sun_path) + strlen(CLIENT_SOCK_PATH); ret = bind(sockfd, (struct sockaddr*)&amp;un, len); if (ret &lt; 0) { err = -2; goto Err; } memset(&amp;un, 0, sizeof(un)); un.sun_family = AF_UNIX; strcpy(un.sun_path, SERVER_SOCK_PATH); len = offsetof(struct sockaddr_un, sun_path) + strlen(SERVER_SOCK_PATH); ret = connect(sockfd, (struct sockaddr*)&amp;un, len); if (ret &lt; 0) { err = -3; goto Err; } testfd = open(OPEN_FILE, O_CREAT|O_RDWR, 0777); memfd = open(ASHEME_DEV, O_RDWR); printf(&quot;open %s fd = %d\\n&quot;, ASHEME_DEV, memfd); if (testfd &lt; 0 || memfd &lt; 0) { err = -4; goto Err; } ret = ioctl(memfd, ASHMEM_SET_SIZE, ASHMEM_SIZE); if (ret &lt; 0) { err = -5; goto Err; } mapaddr = (char*)mmap(0, ASHMEM_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, memfd, 0); printf(&quot;mmap addr = %p\\n&quot;, mapaddr); printf(&quot;sizeof(short) = %d\\n&quot;, sizeof(short)); printf(&quot;CMSG_ALIGN(sizeof(short)) = %d\\n&quot;, CMSG_ALIGN(sizeof(short))); printf(&quot;CMSG_LEN(sizeof(short)) = %d\\n&quot;, CMSG_LEN(sizeof(short))); printf(&quot;CMSG_SPACE(sizeof(short)) = %d\\n&quot;, CMSG_SPACE(sizeof(short))); cmptr = (struct cmsghdr*)malloc(2*CMSG_SPACE(sizeof(int))); if (!cmptr) { err = -6; goto Err; } printf(&quot;cmptr = %p\\n&quot;, cmptr); iov[0].iov_base = buf1; iov[0].iov_len = sizeof(buf1); iov[1].iov_base = buf2; iov[1].iov_len = sizeof(buf2); msg.msg_iov = iov; msg.msg_iovlen = 2; msg.msg_name = 0; msg.msg_namelen = 0; msg.msg_control = cmptr; msg.msg_controllen = 2*CMSG_SPACE(sizeof(int)); pcmsg = CMSG_FIRSTHDR(&amp;msg); printf(&quot;first pcmsg = %p\\n&quot;, pcmsg); pcmsg-&gt;cmsg_level = SOL_SOCKET; pcmsg-&gt;cmsg_type = SCM_RIGHTS; pcmsg-&gt;cmsg_len = CMSG_LEN(sizeof(int)); *(int*)CMSG_DATA(pcmsg) = memfd; //TODO something is wrong! pcmsg = CMSG_NXTHDR(&amp;msg, pcmsg); printf(&quot;next pcmsg = %p\\n&quot;, pcmsg); pcmsg-&gt;cmsg_level = SOL_SOCKET; pcmsg-&gt;cmsg_type = SCM_RIGHTS; pcmsg-&gt;cmsg_len = CMSG_LEN(sizeof(int)); *(int*)CMSG_DATA(pcmsg) = testfd; writen = sendmsg(sockfd, &amp;msg, 0); printf(&quot;sendmsg write n = %d (sizeof(buf1) + sizeof(buf2) = %d)\\n&quot;, writen, sizeof(buf1) + sizeof(buf2)); sleep(2); memcpy(content, mapaddr, strlen(TEST_STRING)); printf(&quot;content = %s\\n&quot;, content); close(sockfd); free(cmptr); return 0; Err: printf(&quot;error : %d\\n&quot;, err); close(sockfd); return -1; } 0.2.4 2.4 Android.mk LOCAL_PATH := $(call my-dir) JNI_RES_PATH := /opt/android/jni include $(CLEAR_VARS) LOCAL_MODULE_TAGS := eng LOCAL_MODULE := AshmemServer $(info &quot;Build ${LOCAL_MODULE}) LOCAL_SRC_FILES += AshmemServer.cpp LOCAL_C_INCLUDES += ${JNI_RES_PATH}/include ${JNI_RES_PATH}/include/bionic/libc/kernel/common/ LOCAL_C_INCLUDES += ${JNI_RES_PATH}/include/bionic/libc/include/ LOCAL_CPPFLAGS += -DDEBUG -DHAVE_ANDROID_OS -DHAVE_SYS_UIO_H # 编译条件以及第三方库: -lxml2 LOCAL_LDFLAGS += -L${JNI_RES_PATH}/libs -O2 # 系统库 LOCAL_LDLIBS += -lcutils -lutils # 动态库模块, 如果列出的库不存在会去编译 eg. libxxx LOCAL_SHARED_LIBRARIES += # ALL_DEFAULT_INSTALLED_MODULES += $(LOCAL_MODULE) # 目标输出类型 include $(BUILD_EXECUTABLE) include $(CLEAR_VARS) LOCAL_MODULE_TAGS := eng LOCAL_MODULE := AshmemClient $(info &quot;Build ${LOCAL_MODULE}) LOCAL_SRC_FILES += AshmemClient.cpp LOCAL_C_INCLUDES += ${JNI_RES_PATH}/include ${JNI_RES_PATH}/include/bionic/libc/kernel/common/ LOCAL_C_INCLUDES += ${JNI_RES_PATH}/include/bionic/libc/include/ LOCAL_CPPFLAGS += -DDEBUG -DHAVE_ANDROID_OS -DHAVE_SYS_UIO_H # 编译条件以及第三方库: -lxml2 LOCAL_LDFLAGS += -L${JNI_RES_PATH}/libs -O2 # 系统库 LOCAL_LDLIBS += -lcutils -lutils # 动态库模块, 如果列出的库不存在会去编译 eg. libxxx LOCAL_SHARED_LIBRARIES += # ALL_DEFAULT_INSTALLED_MODULES += $(LOCAL_MODULE) include $(BUILD_EXECUTABLE) 0.3 3. 输出结果 0.3.1 3.1 /data/AshmemServer accept client fd = 4 buf1 = file buf2 = map get memfd = 5 mapaddr = 0x76eb6000 0.3.2 3.2 /data/AshmemClient open /dev/ashmem fd = 5 mmap addr = 0x76e7a000 sizeof(short) = 2 CMSG_ALIGN(sizeof(short)) = 4 CMSG_LEN(sizeof(short)) = 14 CMSG_SPACE(sizeof(short)) = 16 cmptr = 0xc9e0a8 first pcmsg = 0xc9e0a8 next pcmsg = 0xc9e0b8 sendmsg write n = 9 (sizeof(buf1) + sizeof(buf2) = 9) content = HelloWorld 0.4 4. 总结 Android匿名共享内存多个进程实现共享, 那么每个进程都要拿到这个/dev/ashmem打开的文件描述符 通过msghdr这个结构体加上sendmsg和recvmsg实现文件描述符的进程间传递 之所以要进程间传递文件描述符,是因为\"匿名\"二字, 如果通讯的每个进程都打开/dev/ashmem文件是实现不了的. sendmsg是怎样把文件描述符传递的, 是不是有点像dup或dup2, 复制现存的文件描述符, 使他们指向同一个file结构体(本进程内)","tags":[{"name":"Android","slug":"Android","permalink":"https://qrsforever.github.io/tags/Android/"}]},{"title":"(原创)Binder简图-草稿","date":"2016-03-24T07:50:13.000Z","path":"2016/03/24/Note/Android/BinderDriver/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 高清图 BinderDriver 1 总结: Java层的Binder是通过在底层创建对应的本地Binder, 然后就和C++层一样了. Java层保存本地的一个引用mObject即 可. 代理服务是通过mRemote(BpBinder)中mHander找到对应的本地服务. mHandler的由来: SMgrProxy.addService(\"Tn\", new Tnatvie()),这个过程就在Binder驱动中创建了Binder实体, 而 且SMgr本地服务需要管理存储这个Tnative服务, 驱动同时就创建了Binder引用对象, 这个过程就产生了handler值(加 1操作), Smgr本地服务也是保存该引用. IPCThreadState是唯一能和Binder驱动对话的类, 所以对上下文数据的转换(为Binder驱动认识的数量类型), 就是在 该类中完成.","tags":[{"name":"Android","slug":"Android","permalink":"https://qrsforever.github.io/tags/Android/"}]},{"title":"(原创)Java层添加服务的Binder流程","date":"2016-03-17T14:06:38.000Z","path":"2016/03/17/Note/Android/Binder-Add-Service/","text":"dummy code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} 高清图 服务添加流程","tags":[{"name":"Android","slug":"Android","permalink":"https://qrsforever.github.io/tags/Android/"}]}]